// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: perfdog/perfdog/perfdog.proto

package perfdog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DEVICE_EVENTTYPE int32

const (
	DEVICE_EVENTTYPE_ADD    DEVICE_EVENTTYPE = 0 // 添加设备, add device
	DEVICE_EVENTTYPE_REMOVE DEVICE_EVENTTYPE = 1 // 移除设备, remove device
	DEVICE_EVENTTYPE_NOTIFY DEVICE_EVENTTYPE = 2 // 其它通知, other notification
)

// Enum value maps for DEVICE_EVENTTYPE.
var (
	DEVICE_EVENTTYPE_name = map[int32]string{
		0: "ADD",
		1: "REMOVE",
		2: "NOTIFY",
	}
	DEVICE_EVENTTYPE_value = map[string]int32{
		"ADD":    0,
		"REMOVE": 1,
		"NOTIFY": 2,
	}
)

func (x DEVICE_EVENTTYPE) Enum() *DEVICE_EVENTTYPE {
	p := new(DEVICE_EVENTTYPE)
	*p = x
	return p
}

func (x DEVICE_EVENTTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_EVENTTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[0].Descriptor()
}

func (DEVICE_EVENTTYPE) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[0]
}

func (x DEVICE_EVENTTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_EVENTTYPE.Descriptor instead.
func (DEVICE_EVENTTYPE) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{0}
}

type DEVICE_OSTYPE int32

const (
	DEVICE_OSTYPE_ANDROID     DEVICE_OSTYPE = 0 // Android设备, Android device
	DEVICE_OSTYPE_IOS         DEVICE_OSTYPE = 1 // iOS设备, iOS device
	DEVICE_OSTYPE_SWITCH      DEVICE_OSTYPE = 2 // Switch设备, Switch device
	DEVICE_OSTYPE_WINDOWS     DEVICE_OSTYPE = 3 // Windows设备, Windows device
	DEVICE_OSTYPE_PLAYSTATION DEVICE_OSTYPE = 4 // PS5设备, PS5 device
	DEVICE_OSTYPE_XBOX        DEVICE_OSTYPE = 5
	DEVICE_OSTYPE_HARMONY     DEVICE_OSTYPE = 6 // 鸿蒙设置, Harmony device
)

// Enum value maps for DEVICE_OSTYPE.
var (
	DEVICE_OSTYPE_name = map[int32]string{
		0: "ANDROID",
		1: "IOS",
		2: "SWITCH",
		3: "WINDOWS",
		4: "PLAYSTATION",
		5: "XBOX",
		6: "HARMONY",
	}
	DEVICE_OSTYPE_value = map[string]int32{
		"ANDROID":     0,
		"IOS":         1,
		"SWITCH":      2,
		"WINDOWS":     3,
		"PLAYSTATION": 4,
		"XBOX":        5,
		"HARMONY":     6,
	}
)

func (x DEVICE_OSTYPE) Enum() *DEVICE_OSTYPE {
	p := new(DEVICE_OSTYPE)
	*p = x
	return p
}

func (x DEVICE_OSTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_OSTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[1].Descriptor()
}

func (DEVICE_OSTYPE) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[1]
}

func (x DEVICE_OSTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_OSTYPE.Descriptor instead.
func (DEVICE_OSTYPE) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{1}
}

type DEVICE_CONTYPE int32

const (
	DEVICE_CONTYPE_USB  DEVICE_CONTYPE = 0 // usb连接, usb
	DEVICE_CONTYPE_WIFI DEVICE_CONTYPE = 1 // wifi连接, wifi
)

// Enum value maps for DEVICE_CONTYPE.
var (
	DEVICE_CONTYPE_name = map[int32]string{
		0: "USB",
		1: "WIFI",
	}
	DEVICE_CONTYPE_value = map[string]int32{
		"USB":  0,
		"WIFI": 1,
	}
)

func (x DEVICE_CONTYPE) Enum() *DEVICE_CONTYPE {
	p := new(DEVICE_CONTYPE)
	*p = x
	return p
}

func (x DEVICE_CONTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_CONTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[2].Descriptor()
}

func (DEVICE_CONTYPE) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[2]
}

func (x DEVICE_CONTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_CONTYPE.Descriptor instead.
func (DEVICE_CONTYPE) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{2}
}

type DEVICE_ACCESS_TYPE int32

const (
	DEVICE_ACCESS_TYPE_LOCAL              DEVICE_ACCESS_TYPE = 0
	DEVICE_ACCESS_TYPE_REMOTE_REACHABLE   DEVICE_ACCESS_TYPE = 1
	DEVICE_ACCESS_TYPE_REMOTE_UNREACHABLE DEVICE_ACCESS_TYPE = 2
)

// Enum value maps for DEVICE_ACCESS_TYPE.
var (
	DEVICE_ACCESS_TYPE_name = map[int32]string{
		0: "LOCAL",
		1: "REMOTE_REACHABLE",
		2: "REMOTE_UNREACHABLE",
	}
	DEVICE_ACCESS_TYPE_value = map[string]int32{
		"LOCAL":              0,
		"REMOTE_REACHABLE":   1,
		"REMOTE_UNREACHABLE": 2,
	}
)

func (x DEVICE_ACCESS_TYPE) Enum() *DEVICE_ACCESS_TYPE {
	p := new(DEVICE_ACCESS_TYPE)
	*p = x
	return p
}

func (x DEVICE_ACCESS_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DEVICE_ACCESS_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[3].Descriptor()
}

func (DEVICE_ACCESS_TYPE) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[3]
}

func (x DEVICE_ACCESS_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DEVICE_ACCESS_TYPE.Descriptor instead.
func (DEVICE_ACCESS_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{3}
}

type PerfDataType int32

const (
	PerfDataType_DATAID_NONE               PerfDataType = 0
	PerfDataType_CPU_USAGE                 PerfDataType = 1
	PerfDataType_GPU_USAGE                 PerfDataType = 2
	PerfDataType_GPU_FREQ                  PerfDataType = 3
	PerfDataType_FPS                       PerfDataType = 4
	PerfDataType_NETWORK_USAGE             PerfDataType = 5
	PerfDataType_ANDROID_MEMORY_DETAIL     PerfDataType = 6
	PerfDataType_MEMORY                    PerfDataType = 7
	PerfDataType_BATTERY                   PerfDataType = 8
	PerfDataType_CPU_TEMPERATURE           PerfDataType = 9
	PerfDataType_FRAME_TIME                PerfDataType = 10
	PerfDataType_CTX_SWITCH                PerfDataType = 11
	PerfDataType_WAKEUP                    PerfDataType = 12
	PerfDataType_SCREEN_SHOT               PerfDataType = 13
	PerfDataType_SYSTEM_LOG                PerfDataType = 14
	PerfDataType_CORE_FREQUENCY            PerfDataType = 15
	PerfDataType_CORE_USAGE                PerfDataType = 16
	PerfDataType_IOS_GPU_USAGE             PerfDataType = 17
	PerfDataType_IOS_ENERGY_USAGE          PerfDataType = 18
	PerfDataType_BATTERY_TEMPERATURE       PerfDataType = 19
	PerfDataType_NORMALIZED_CPU_USAGE      PerfDataType = 20
	PerfDataType_NORMALIZED_CPU_CORE_USAGE PerfDataType = 21
	PerfDataType_GPU_COUNTER_BASICS        PerfDataType = 22 // removed, use DynamicPerfDataDesc instead
	PerfDataType_GPU_COUNTER_MEMORY        PerfDataType = 23 // removed, use DynamicPerfDataDesc instead
	PerfDataType_GPU_COUNTER_SHADER        PerfDataType = 24 // removed, use DynamicPerfDataDesc instead
	PerfDataType_DEVICE_NETWORK_USAGE      PerfDataType = 25
	PerfDataType_SWITCH_MEMORY             PerfDataType = 26
	PerfDataType_UNITY_MONO_HEAP           PerfDataType = 27
	PerfDataType_THREAD_CPU_USAGE          PerfDataType = 28
	PerfDataType_APP_STARTUP_TIME          PerfDataType = 29
	PerfDataType_SCREEN_BRIGHTNESS         PerfDataType = 30
	PerfDataType_BATTERY_LEVEL             PerfDataType = 31
	PerfDataType_CPU_THROTTLING            PerfDataType = 32
	PerfDataType_FRAME_GENERATION          PerfDataType = 33
	PerfDataType_WINDOWS_CPU               PerfDataType = 100
	PerfDataType_WINDOWS_MEMORY            PerfDataType = 101
	PerfDataType_WINDOWS_IO                PerfDataType = 102
	PerfDataType_WINDOWS_THREAD_COUNT      PerfDataType = 103
	PerfDataType_WINDOWS_HANDLE_COUNT      PerfDataType = 104
	PerfDataType_WINDOWS_GPU               PerfDataType = 105
	PerfDataType_WINDOWS_GRAPHICS          PerfDataType = 106
	PerfDataType_WINDOWS_GPU_MEMORY        PerfDataType = 107
	PerfDataType_WINDOWS_NVIDIA_GPU_USAGE  PerfDataType = 108
	PerfDataType_WINDOWS_SYSTEM_CPU_CLOCK  PerfDataType = 109
	PerfDataType_WINDOWS_DISK_USAGE        PerfDataType = 110
	PerfDataType_WINDOWS_AMD_GPU_USAGE     PerfDataType = 111
	PerfDataType_WINDOWS_TREE_CPU          PerfDataType = 112
)

// Enum value maps for PerfDataType.
var (
	PerfDataType_name = map[int32]string{
		0:   "DATAID_NONE",
		1:   "CPU_USAGE",
		2:   "GPU_USAGE",
		3:   "GPU_FREQ",
		4:   "FPS",
		5:   "NETWORK_USAGE",
		6:   "ANDROID_MEMORY_DETAIL",
		7:   "MEMORY",
		8:   "BATTERY",
		9:   "CPU_TEMPERATURE",
		10:  "FRAME_TIME",
		11:  "CTX_SWITCH",
		12:  "WAKEUP",
		13:  "SCREEN_SHOT",
		14:  "SYSTEM_LOG",
		15:  "CORE_FREQUENCY",
		16:  "CORE_USAGE",
		17:  "IOS_GPU_USAGE",
		18:  "IOS_ENERGY_USAGE",
		19:  "BATTERY_TEMPERATURE",
		20:  "NORMALIZED_CPU_USAGE",
		21:  "NORMALIZED_CPU_CORE_USAGE",
		22:  "GPU_COUNTER_BASICS",
		23:  "GPU_COUNTER_MEMORY",
		24:  "GPU_COUNTER_SHADER",
		25:  "DEVICE_NETWORK_USAGE",
		26:  "SWITCH_MEMORY",
		27:  "UNITY_MONO_HEAP",
		28:  "THREAD_CPU_USAGE",
		29:  "APP_STARTUP_TIME",
		30:  "SCREEN_BRIGHTNESS",
		31:  "BATTERY_LEVEL",
		32:  "CPU_THROTTLING",
		33:  "FRAME_GENERATION",
		100: "WINDOWS_CPU",
		101: "WINDOWS_MEMORY",
		102: "WINDOWS_IO",
		103: "WINDOWS_THREAD_COUNT",
		104: "WINDOWS_HANDLE_COUNT",
		105: "WINDOWS_GPU",
		106: "WINDOWS_GRAPHICS",
		107: "WINDOWS_GPU_MEMORY",
		108: "WINDOWS_NVIDIA_GPU_USAGE",
		109: "WINDOWS_SYSTEM_CPU_CLOCK",
		110: "WINDOWS_DISK_USAGE",
		111: "WINDOWS_AMD_GPU_USAGE",
		112: "WINDOWS_TREE_CPU",
	}
	PerfDataType_value = map[string]int32{
		"DATAID_NONE":               0,
		"CPU_USAGE":                 1,
		"GPU_USAGE":                 2,
		"GPU_FREQ":                  3,
		"FPS":                       4,
		"NETWORK_USAGE":             5,
		"ANDROID_MEMORY_DETAIL":     6,
		"MEMORY":                    7,
		"BATTERY":                   8,
		"CPU_TEMPERATURE":           9,
		"FRAME_TIME":                10,
		"CTX_SWITCH":                11,
		"WAKEUP":                    12,
		"SCREEN_SHOT":               13,
		"SYSTEM_LOG":                14,
		"CORE_FREQUENCY":            15,
		"CORE_USAGE":                16,
		"IOS_GPU_USAGE":             17,
		"IOS_ENERGY_USAGE":          18,
		"BATTERY_TEMPERATURE":       19,
		"NORMALIZED_CPU_USAGE":      20,
		"NORMALIZED_CPU_CORE_USAGE": 21,
		"GPU_COUNTER_BASICS":        22,
		"GPU_COUNTER_MEMORY":        23,
		"GPU_COUNTER_SHADER":        24,
		"DEVICE_NETWORK_USAGE":      25,
		"SWITCH_MEMORY":             26,
		"UNITY_MONO_HEAP":           27,
		"THREAD_CPU_USAGE":          28,
		"APP_STARTUP_TIME":          29,
		"SCREEN_BRIGHTNESS":         30,
		"BATTERY_LEVEL":             31,
		"CPU_THROTTLING":            32,
		"FRAME_GENERATION":          33,
		"WINDOWS_CPU":               100,
		"WINDOWS_MEMORY":            101,
		"WINDOWS_IO":                102,
		"WINDOWS_THREAD_COUNT":      103,
		"WINDOWS_HANDLE_COUNT":      104,
		"WINDOWS_GPU":               105,
		"WINDOWS_GRAPHICS":          106,
		"WINDOWS_GPU_MEMORY":        107,
		"WINDOWS_NVIDIA_GPU_USAGE":  108,
		"WINDOWS_SYSTEM_CPU_CLOCK":  109,
		"WINDOWS_DISK_USAGE":        110,
		"WINDOWS_AMD_GPU_USAGE":     111,
		"WINDOWS_TREE_CPU":          112,
	}
)

func (x PerfDataType) Enum() *PerfDataType {
	p := new(PerfDataType)
	*p = x
	return p
}

func (x PerfDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerfDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[4].Descriptor()
}

func (PerfDataType) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[4]
}

func (x PerfDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerfDataType.Descriptor instead.
func (PerfDataType) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{4}
}

type DynamicPerfDataType int32

const (
	DynamicPerfDataType_GPU_COUNTER  DynamicPerfDataType = 0
	DynamicPerfDataType_PLAY_STATION DynamicPerfDataType = 1
	DynamicPerfDataType_XBOX_DATA    DynamicPerfDataType = 2
	DynamicPerfDataType_UNDEFINED    DynamicPerfDataType = 3
)

// Enum value maps for DynamicPerfDataType.
var (
	DynamicPerfDataType_name = map[int32]string{
		0: "GPU_COUNTER",
		1: "PLAY_STATION",
		2: "XBOX_DATA",
		3: "UNDEFINED",
	}
	DynamicPerfDataType_value = map[string]int32{
		"GPU_COUNTER":  0,
		"PLAY_STATION": 1,
		"XBOX_DATA":    2,
		"UNDEFINED":    3,
	}
)

func (x DynamicPerfDataType) Enum() *DynamicPerfDataType {
	p := new(DynamicPerfDataType)
	*p = x
	return p
}

func (x DynamicPerfDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicPerfDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[5].Descriptor()
}

func (DynamicPerfDataType) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[5]
}

func (x DynamicPerfDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicPerfDataType.Descriptor instead.
func (DynamicPerfDataType) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{5}
}

type ProfilingMode int32

const (
	ProfilingMode_DEFAULT ProfilingMode = 0
	ProfilingMode_SYSTEM  ProfilingMode = 1
	ProfilingMode_UNREAL  ProfilingMode = 2
	ProfilingMode_UNITY   ProfilingMode = 3
	ProfilingMode_NETWORK ProfilingMode = 4
)

// Enum value maps for ProfilingMode.
var (
	ProfilingMode_name = map[int32]string{
		0: "DEFAULT",
		1: "SYSTEM",
		2: "UNREAL",
		3: "UNITY",
		4: "NETWORK",
	}
	ProfilingMode_value = map[string]int32{
		"DEFAULT": 0,
		"SYSTEM":  1,
		"UNREAL":  2,
		"UNITY":   3,
		"NETWORK": 4,
	}
)

func (x ProfilingMode) Enum() *ProfilingMode {
	p := new(ProfilingMode)
	*p = x
	return p
}

func (x ProfilingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfilingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[6].Descriptor()
}

func (ProfilingMode) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[6]
}

func (x ProfilingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfilingMode.Descriptor instead.
func (ProfilingMode) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{6}
}

type NetworkProtocol int32

const (
	NetworkProtocol_NONE NetworkProtocol = 0
	NetworkProtocol_TCP  NetworkProtocol = 1
	NetworkProtocol_UDP  NetworkProtocol = 2
	NetworkProtocol_DNS  NetworkProtocol = 4
	NetworkProtocol_ICMP NetworkProtocol = 8
)

// Enum value maps for NetworkProtocol.
var (
	NetworkProtocol_name = map[int32]string{
		0: "NONE",
		1: "TCP",
		2: "UDP",
		4: "DNS",
		8: "ICMP",
	}
	NetworkProtocol_value = map[string]int32{
		"NONE": 0,
		"TCP":  1,
		"UDP":  2,
		"DNS":  4,
		"ICMP": 8,
	}
)

func (x NetworkProtocol) Enum() *NetworkProtocol {
	p := new(NetworkProtocol)
	*p = x
	return p
}

func (x NetworkProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[7].Descriptor()
}

func (NetworkProtocol) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[7]
}

func (x NetworkProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkProtocol.Descriptor instead.
func (NetworkProtocol) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{7}
}

type USAGE_TYPE int32

const (
	USAGE_TYPE_PROCESS_USAGE USAGE_TYPE = 0
	USAGE_TYPE_SYSTEM_USAGE  USAGE_TYPE = 1
)

// Enum value maps for USAGE_TYPE.
var (
	USAGE_TYPE_name = map[int32]string{
		0: "PROCESS_USAGE",
		1: "SYSTEM_USAGE",
	}
	USAGE_TYPE_value = map[string]int32{
		"PROCESS_USAGE": 0,
		"SYSTEM_USAGE":  1,
	}
)

func (x USAGE_TYPE) Enum() *USAGE_TYPE {
	p := new(USAGE_TYPE)
	*p = x
	return p
}

func (x USAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (USAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[8].Descriptor()
}

func (USAGE_TYPE) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[8]
}

func (x USAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use USAGE_TYPE.Descriptor instead.
func (USAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{8}
}

type BinderTransactionType int32

const (
	BinderTransactionType_BINDER_NONE    BinderTransactionType = 0
	BinderTransactionType_BINDER_SEND    BinderTransactionType = 1
	BinderTransactionType_BINDER_RECEIVE BinderTransactionType = 2
)

// Enum value maps for BinderTransactionType.
var (
	BinderTransactionType_name = map[int32]string{
		0: "BINDER_NONE",
		1: "BINDER_SEND",
		2: "BINDER_RECEIVE",
	}
	BinderTransactionType_value = map[string]int32{
		"BINDER_NONE":    0,
		"BINDER_SEND":    1,
		"BINDER_RECEIVE": 2,
	}
)

func (x BinderTransactionType) Enum() *BinderTransactionType {
	p := new(BinderTransactionType)
	*p = x
	return p
}

func (x BinderTransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinderTransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[9].Descriptor()
}

func (BinderTransactionType) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[9]
}

func (x BinderTransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinderTransactionType.Descriptor instead.
func (BinderTransactionType) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{9}
}

type CounterType int32

const (
	CounterType_FTRACE  CounterType = 0
	CounterType_PERFDOG CounterType = 1
	CounterType_VSYNC   CounterType = 2
)

// Enum value maps for CounterType.
var (
	CounterType_name = map[int32]string{
		0: "FTRACE",
		1: "PERFDOG",
		2: "VSYNC",
	}
	CounterType_value = map[string]int32{
		"FTRACE":  0,
		"PERFDOG": 1,
		"VSYNC":   2,
	}
)

func (x CounterType) Enum() *CounterType {
	p := new(CounterType)
	*p = x
	return p
}

func (x CounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[10].Descriptor()
}

func (CounterType) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[10]
}

func (x CounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CounterType.Descriptor instead.
func (CounterType) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{10}
}

type NetworkWarningType int32

const (
	NetworkWarningType_WARNING_NONE        NetworkWarningType = 0
	NetworkWarningType_WARNING_TLS         NetworkWarningType = 1
	NetworkWarningType_WARNING_TCP_CONNECT NetworkWarningType = 2
	NetworkWarningType_WARNING_DNS         NetworkWarningType = 3
	NetworkWarningType_WARNING_READ        NetworkWarningType = 4
)

// Enum value maps for NetworkWarningType.
var (
	NetworkWarningType_name = map[int32]string{
		0: "WARNING_NONE",
		1: "WARNING_TLS",
		2: "WARNING_TCP_CONNECT",
		3: "WARNING_DNS",
		4: "WARNING_READ",
	}
	NetworkWarningType_value = map[string]int32{
		"WARNING_NONE":        0,
		"WARNING_TLS":         1,
		"WARNING_TCP_CONNECT": 2,
		"WARNING_DNS":         3,
		"WARNING_READ":        4,
	}
)

func (x NetworkWarningType) Enum() *NetworkWarningType {
	p := new(NetworkWarningType)
	*p = x
	return p
}

func (x NetworkWarningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkWarningType) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[11].Descriptor()
}

func (NetworkWarningType) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[11]
}

func (x NetworkWarningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkWarningType.Descriptor instead.
func (NetworkWarningType) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{11}
}

type DataExportFormat int32

const (
	DataExportFormat_EXPORT_TO_EXCEL    DataExportFormat = 0
	DataExportFormat_EXPORT_TO_JSON     DataExportFormat = 1
	DataExportFormat_EXPORT_TO_PROTOBUF DataExportFormat = 2
	DataExportFormat_EXPORT_TO_PCAP     DataExportFormat = 3
)

// Enum value maps for DataExportFormat.
var (
	DataExportFormat_name = map[int32]string{
		0: "EXPORT_TO_EXCEL",
		1: "EXPORT_TO_JSON",
		2: "EXPORT_TO_PROTOBUF",
		3: "EXPORT_TO_PCAP",
	}
	DataExportFormat_value = map[string]int32{
		"EXPORT_TO_EXCEL":    0,
		"EXPORT_TO_JSON":     1,
		"EXPORT_TO_PROTOBUF": 2,
		"EXPORT_TO_PCAP":     3,
	}
)

func (x DataExportFormat) Enum() *DataExportFormat {
	p := new(DataExportFormat)
	*p = x
	return p
}

func (x DataExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[12].Descriptor()
}

func (DataExportFormat) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[12]
}

func (x DataExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataExportFormat.Descriptor instead.
func (DataExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{12}
}

type DataInterchangeFormat int32

const (
	DataInterchangeFormat_JSON     DataInterchangeFormat = 0
	DataInterchangeFormat_PROTOBUF DataInterchangeFormat = 1
)

// Enum value maps for DataInterchangeFormat.
var (
	DataInterchangeFormat_name = map[int32]string{
		0: "JSON",
		1: "PROTOBUF",
	}
	DataInterchangeFormat_value = map[string]int32{
		"JSON":     0,
		"PROTOBUF": 1,
	}
)

func (x DataInterchangeFormat) Enum() *DataInterchangeFormat {
	p := new(DataInterchangeFormat)
	*p = x
	return p
}

func (x DataInterchangeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataInterchangeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[13].Descriptor()
}

func (DataInterchangeFormat) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[13]
}

func (x DataInterchangeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataInterchangeFormat.Descriptor instead.
func (DataInterchangeFormat) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{13}
}

type FloatingWindowMessage int32

const (
	FloatingWindowMessage_START_RECORD FloatingWindowMessage = 0
	FloatingWindowMessage_STOP_RECORD  FloatingWindowMessage = 1
	FloatingWindowMessage_ADD_LABEL    FloatingWindowMessage = 2
)

// Enum value maps for FloatingWindowMessage.
var (
	FloatingWindowMessage_name = map[int32]string{
		0: "START_RECORD",
		1: "STOP_RECORD",
		2: "ADD_LABEL",
	}
	FloatingWindowMessage_value = map[string]int32{
		"START_RECORD": 0,
		"STOP_RECORD":  1,
		"ADD_LABEL":    2,
	}
)

func (x FloatingWindowMessage) Enum() *FloatingWindowMessage {
	p := new(FloatingWindowMessage)
	*p = x
	return p
}

func (x FloatingWindowMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatingWindowMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[14].Descriptor()
}

func (FloatingWindowMessage) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[14]
}

func (x FloatingWindowMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatingWindowMessage.Descriptor instead.
func (FloatingWindowMessage) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{14}
}

type FloatingWindowPosition int32

const (
	FloatingWindowPosition_TOP_LEFT  FloatingWindowPosition = 0
	FloatingWindowPosition_TOP_RIGHT FloatingWindowPosition = 1
	FloatingWindowPosition_HIDE      FloatingWindowPosition = 2
)

// Enum value maps for FloatingWindowPosition.
var (
	FloatingWindowPosition_name = map[int32]string{
		0: "TOP_LEFT",
		1: "TOP_RIGHT",
		2: "HIDE",
	}
	FloatingWindowPosition_value = map[string]int32{
		"TOP_LEFT":  0,
		"TOP_RIGHT": 1,
		"HIDE":      2,
	}
)

func (x FloatingWindowPosition) Enum() *FloatingWindowPosition {
	p := new(FloatingWindowPosition)
	*p = x
	return p
}

func (x FloatingWindowPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatingWindowPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[15].Descriptor()
}

func (FloatingWindowPosition) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[15]
}

func (x FloatingWindowPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatingWindowPosition.Descriptor instead.
func (FloatingWindowPosition) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{15}
}

type DXVersion int32

const (
	DXVersion_AUTO  DXVersion = 0
	DXVersion_DX_9  DXVersion = 1
	DXVersion_DX_11 DXVersion = 2
	DXVersion_DX_12 DXVersion = 3
)

// Enum value maps for DXVersion.
var (
	DXVersion_name = map[int32]string{
		0: "AUTO",
		1: "DX_9",
		2: "DX_11",
		3: "DX_12",
	}
	DXVersion_value = map[string]int32{
		"AUTO":  0,
		"DX_9":  1,
		"DX_11": 2,
		"DX_12": 3,
	}
)

func (x DXVersion) Enum() *DXVersion {
	p := new(DXVersion)
	*p = x
	return p
}

func (x DXVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DXVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_perfdog_perfdog_perfdog_proto_enumTypes[16].Descriptor()
}

func (DXVersion) Type() protoreflect.EnumType {
	return &file_perfdog_perfdog_perfdog_proto_enumTypes[16]
}

func (x DXVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DXVersion.Descriptor instead.
func (DXVersion) EnumDescriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{16}
}

type OptionalInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalInt) Reset() {
	*x = OptionalInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalInt) ProtoMessage() {}

func (x *OptionalInt) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalInt.ProtoReflect.Descriptor instead.
func (*OptionalInt) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{0}
}

func (x *OptionalInt) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionalInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalInt64) Reset() {
	*x = OptionalInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalInt64) ProtoMessage() {}

func (x *OptionalInt64) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalInt64.ProtoReflect.Descriptor instead.
func (*OptionalInt64) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{1}
}

func (x *OptionalInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionalFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalFloat) Reset() {
	*x = OptionalFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalFloat) ProtoMessage() {}

func (x *OptionalFloat) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalFloat.ProtoReflect.Descriptor instead.
func (*OptionalFloat) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{2}
}

func (x *OptionalFloat) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionalDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalDouble) Reset() {
	*x = OptionalDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalDouble) ProtoMessage() {}

func (x *OptionalDouble) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalDouble.ProtoReflect.Descriptor instead.
func (*OptionalDouble) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{3}
}

func (x *OptionalDouble) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OptionBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionBool) Reset() {
	*x = OptionBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionBool) ProtoMessage() {}

func (x *OptionBool) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionBool.ProtoReflect.Descriptor instead.
func (*OptionBool) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{4}
}

func (x *OptionBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{5}
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{6}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`   // 名字, name
	Pic   string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic,omitempty"`     // 头像url, avatar url
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"` // 邮箱, email
	Id    string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`       // 用户id, user id
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetPic() string {
	if x != nil {
		return x.Pic
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsType     DEVICE_OSTYPE      `protobuf:"varint,1,opt,name=osType,proto3,enum=com.perfdog.proto.DEVICE_OSTYPE" json:"osType,omitempty"`    // 设备系统类型, device os type
	ConType    DEVICE_CONTYPE     `protobuf:"varint,2,opt,name=conType,proto3,enum=com.perfdog.proto.DEVICE_CONTYPE" json:"conType,omitempty"` // 设备连接类型, device connection type
	Uid        string             `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`                                                // 设备uid, device uid
	Name       string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                              //设备名字, device name
	AccessType DEVICE_ACCESS_TYPE `protobuf:"varint,5,opt,name=accessType,proto3,enum=com.perfdog.proto.DEVICE_ACCESS_TYPE" json:"accessType,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetOsType() DEVICE_OSTYPE {
	if x != nil {
		return x.OsType
	}
	return DEVICE_OSTYPE_ANDROID
}

func (x *Device) GetConType() DEVICE_CONTYPE {
	if x != nil {
		return x.ConType
	}
	return DEVICE_CONTYPE_USB
}

func (x *Device) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetAccessType() DEVICE_ACCESS_TYPE {
	if x != nil {
		return x.AccessType
	}
	return DEVICE_ACCESS_TYPE_LOCAL
}

type GetPasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPasswordRequest) Reset() {
	*x = GetPasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPasswordRequest) ProtoMessage() {}

func (x *GetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPasswordRequest.ProtoReflect.Descriptor instead.
func (*GetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{9}
}

type DeviceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*DeviceMessage_GetPasswordRequest
	Value isDeviceMessage_Value `protobuf_oneof:"value"`
}

func (x *DeviceMessage) Reset() {
	*x = DeviceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMessage) ProtoMessage() {}

func (x *DeviceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMessage.ProtoReflect.Descriptor instead.
func (*DeviceMessage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{10}
}

func (m *DeviceMessage) GetValue() isDeviceMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DeviceMessage) GetGetPasswordRequest() *GetPasswordRequest {
	if x, ok := x.GetValue().(*DeviceMessage_GetPasswordRequest); ok {
		return x.GetPasswordRequest
	}
	return nil
}

type isDeviceMessage_Value interface {
	isDeviceMessage_Value()
}

type DeviceMessage_GetPasswordRequest struct {
	GetPasswordRequest *GetPasswordRequest `protobuf:"bytes,1,opt,name=getPasswordRequest,proto3,oneof"`
}

func (*DeviceMessage_GetPasswordRequest) isDeviceMessage_Value() {}

type DeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType     DEVICE_EVENTTYPE `protobuf:"varint,1,opt,name=eventType,proto3,enum=com.perfdog.proto.DEVICE_EVENTTYPE" json:"eventType,omitempty"` // 事件类型, event type
	Device        *Device          `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`                                                // 设备标识, device
	DeviceMessage *DeviceMessage   `protobuf:"bytes,3,opt,name=deviceMessage,proto3" json:"deviceMessage,omitempty"`
}

func (x *DeviceEvent) Reset() {
	*x = DeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent) ProtoMessage() {}

func (x *DeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent.ProtoReflect.Descriptor instead.
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceEvent) GetEventType() DEVICE_EVENTTYPE {
	if x != nil {
		return x.EventType
	}
	return DEVICE_EVENTTYPE_ADD
}

func (x *DeviceEvent) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceEvent) GetDeviceMessage() *DeviceMessage {
	if x != nil {
		return x.DeviceMessage
	}
	return nil
}

type LaunchAsCollectorEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LaunchAsCollectorEvent) Reset() {
	*x = LaunchAsCollectorEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchAsCollectorEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchAsCollectorEvent) ProtoMessage() {}

func (x *LaunchAsCollectorEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchAsCollectorEvent.ProtoReflect.Descriptor instead.
func (*LaunchAsCollectorEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{12}
}

type StartRecordEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartRecordEvent) Reset() {
	*x = StartRecordEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecordEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordEvent) ProtoMessage() {}

func (x *StartRecordEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordEvent.ProtoReflect.Descriptor instead.
func (*StartRecordEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{13}
}

type AddLabelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddLabelEvent) Reset() {
	*x = AddLabelEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddLabelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddLabelEvent) ProtoMessage() {}

func (x *AddLabelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddLabelEvent.ProtoReflect.Descriptor instead.
func (*AddLabelEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{14}
}

type GetResolutionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetResolutionEvent) Reset() {
	*x = GetResolutionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResolutionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResolutionEvent) ProtoMessage() {}

func (x *GetResolutionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResolutionEvent.ProtoReflect.Descriptor instead.
func (*GetResolutionEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{15}
}

type GlobalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*GlobalEvent_LaunchAsCollectorEvent
	//	*GlobalEvent_StartRecordEvent
	//	*GlobalEvent_AddLabelEvent
	//	*GlobalEvent_GetResolutionEvent
	Event isGlobalEvent_Event `protobuf_oneof:"event"`
}

func (x *GlobalEvent) Reset() {
	*x = GlobalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalEvent) ProtoMessage() {}

func (x *GlobalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalEvent.ProtoReflect.Descriptor instead.
func (*GlobalEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{16}
}

func (m *GlobalEvent) GetEvent() isGlobalEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GlobalEvent) GetLaunchAsCollectorEvent() *LaunchAsCollectorEvent {
	if x, ok := x.GetEvent().(*GlobalEvent_LaunchAsCollectorEvent); ok {
		return x.LaunchAsCollectorEvent
	}
	return nil
}

func (x *GlobalEvent) GetStartRecordEvent() *StartRecordEvent {
	if x, ok := x.GetEvent().(*GlobalEvent_StartRecordEvent); ok {
		return x.StartRecordEvent
	}
	return nil
}

func (x *GlobalEvent) GetAddLabelEvent() *AddLabelEvent {
	if x, ok := x.GetEvent().(*GlobalEvent_AddLabelEvent); ok {
		return x.AddLabelEvent
	}
	return nil
}

func (x *GlobalEvent) GetGetResolutionEvent() *GetResolutionEvent {
	if x, ok := x.GetEvent().(*GlobalEvent_GetResolutionEvent); ok {
		return x.GetResolutionEvent
	}
	return nil
}

type isGlobalEvent_Event interface {
	isGlobalEvent_Event()
}

type GlobalEvent_LaunchAsCollectorEvent struct {
	LaunchAsCollectorEvent *LaunchAsCollectorEvent `protobuf:"bytes,1,opt,name=launchAsCollectorEvent,proto3,oneof"`
}

type GlobalEvent_StartRecordEvent struct {
	StartRecordEvent *StartRecordEvent `protobuf:"bytes,2,opt,name=startRecordEvent,proto3,oneof"`
}

type GlobalEvent_AddLabelEvent struct {
	AddLabelEvent *AddLabelEvent `protobuf:"bytes,3,opt,name=addLabelEvent,proto3,oneof"`
}

type GlobalEvent_GetResolutionEvent struct {
	GetResolutionEvent *GetResolutionEvent `protobuf:"bytes,4,opt,name=getResolutionEvent,proto3,oneof"`
}

func (*GlobalEvent_LaunchAsCollectorEvent) isGlobalEvent_Event() {}

func (*GlobalEvent_StartRecordEvent) isGlobalEvent_Event() {}

func (*GlobalEvent_AddLabelEvent) isGlobalEvent_Event() {}

func (*GlobalEvent_GetResolutionEvent) isGlobalEvent_Event() {}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 设备信息map, map of device information
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{17}
}

func (x *DeviceInfo) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid                       bool `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`                             //false的时候设备需要初始化, The device needs to be initialized when false
	IsTesting                     bool `protobuf:"varint,2,opt,name=isTesting,proto3" json:"isTesting,omitempty"`                         //是否在测试中, Whether or not it is in testing
	IsPerfDogAppInstalled         bool `protobuf:"varint,3,opt,name=isPerfDogAppInstalled,proto3" json:"isPerfDogAppInstalled,omitempty"` //android上PerfDog App是否安装成功, Is the PerfDog App installed successfully on android?
	IsInstallFailedUserRestricted bool `protobuf:"varint,4,opt,name=isInstallFailedUserRestricted,proto3" json:"isInstallFailedUserRestricted,omitempty"`
	IsDevAppTestSupported         bool `protobuf:"varint,5,opt,name=isDevAppTestSupported,proto3" json:"isDevAppTestSupported,omitempty"` // ios
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceStatus) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *DeviceStatus) GetIsTesting() bool {
	if x != nil {
		return x.IsTesting
	}
	return false
}

func (x *DeviceStatus) GetIsPerfDogAppInstalled() bool {
	if x != nil {
		return x.IsPerfDogAppInstalled
	}
	return false
}

func (x *DeviceStatus) GetIsInstallFailedUserRestricted() bool {
	if x != nil {
		return x.IsInstallFailedUserRestricted
	}
	return false
}

func (x *DeviceStatus) GetIsDevAppTestSupported() bool {
	if x != nil {
		return x.IsDevAppTestSupported
	}
	return false
}

type AppInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label       string            `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`                                                                                         // APP名称, name
	PackageName string            `protobuf:"bytes,2,opt,name=packageName,proto3" json:"packageName,omitempty"`                                                                             // APP包名, package name
	Version     string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`                                                                                     // APP Version
	ProcessList []string          `protobuf:"bytes,4,rep,name=processList,proto3" json:"processList,omitempty"`                                                                             // APP进程列表, process list
	Icon        []byte            `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                           // APP Icon, PNG格式, app icon of png format
	IsSystemApp bool              `protobuf:"varint,6,opt,name=isSystemApp,proto3" json:"isSystemApp,omitempty"`                                                                            // 是否系统应用, Whether it is a system application
	SubVersion  string            `protobuf:"bytes,7,opt,name=subVersion,proto3" json:"subVersion,omitempty"`                                                                               // APP子版本号,android上为versionCode,ios上为CFBundleVersion(XCode里的build), APP sub version number, on android is versionCode, on ios is CFBundleVersion (build in XCode).
	Debuggable  bool              `protobuf:"varint,8,opt,name=debuggable,proto3" json:"debuggable,omitempty"`                                                                              // APP是否可调试,android上为android:debuggable属性, Whether the app is debuggable or not, on android is the android:debuggable property.
	Extra       map[string]string `protobuf:"bytes,9,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // //android上存app的<meta-data>数据, Storing app <meta-data> data on android
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{19}
}

func (x *AppInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *AppInfo) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AppInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AppInfo) GetProcessList() []string {
	if x != nil {
		return x.ProcessList
	}
	return nil
}

func (x *AppInfo) GetIcon() []byte {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *AppInfo) GetIsSystemApp() bool {
	if x != nil {
		return x.IsSystemApp
	}
	return false
}

func (x *AppInfo) GetSubVersion() string {
	if x != nil {
		return x.SubVersion
	}
	return ""
}

func (x *AppInfo) GetDebuggable() bool {
	if x != nil {
		return x.Debuggable
	}
	return false
}

func (x *AppInfo) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AppList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App []*AppInfo `protobuf:"bytes,1,rep,name=app,proto3" json:"app,omitempty"` // APP列表, app list
}

func (x *AppList) Reset() {
	*x = AppList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppList) ProtoMessage() {}

func (x *AppList) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppList.ProtoReflect.Descriptor instead.
func (*AppList) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{20}
}

func (x *AppList) GetApp() []*AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

type EnablePerfDataTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device      *Device              `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Type        PerfDataType         `protobuf:"varint,2,opt,name=type,proto3,enum=com.perfdog.proto.PerfDataType" json:"type,omitempty"`
	DynamicData *DynamicPerfDataDesc `protobuf:"bytes,3,opt,name=dynamicData,proto3" json:"dynamicData,omitempty"`
}

func (x *EnablePerfDataTypeReq) Reset() {
	*x = EnablePerfDataTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePerfDataTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePerfDataTypeReq) ProtoMessage() {}

func (x *EnablePerfDataTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePerfDataTypeReq.ProtoReflect.Descriptor instead.
func (*EnablePerfDataTypeReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{21}
}

func (x *EnablePerfDataTypeReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EnablePerfDataTypeReq) GetType() PerfDataType {
	if x != nil {
		return x.Type
	}
	return PerfDataType_DATAID_NONE
}

func (x *EnablePerfDataTypeReq) GetDynamicData() *DynamicPerfDataDesc {
	if x != nil {
		return x.DynamicData
	}
	return nil
}

type DisablePerfDataTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device      *Device              `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Type        PerfDataType         `protobuf:"varint,2,opt,name=type,proto3,enum=com.perfdog.proto.PerfDataType" json:"type,omitempty"`
	DynamicData *DynamicPerfDataDesc `protobuf:"bytes,3,opt,name=dynamicData,proto3" json:"dynamicData,omitempty"`
}

func (x *DisablePerfDataTypeReq) Reset() {
	*x = DisablePerfDataTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePerfDataTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePerfDataTypeReq) ProtoMessage() {}

func (x *DisablePerfDataTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePerfDataTypeReq.ProtoReflect.Descriptor instead.
func (*DisablePerfDataTypeReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{22}
}

func (x *DisablePerfDataTypeReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DisablePerfDataTypeReq) GetType() PerfDataType {
	if x != nil {
		return x.Type
	}
	return PerfDataType_DATAID_NONE
}

func (x *DisablePerfDataTypeReq) GetDynamicData() *DynamicPerfDataDesc {
	if x != nil {
		return x.DynamicData
	}
	return nil
}

type DynamicPerfDataKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Unit        string `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *DynamicPerfDataKeyInfo) Reset() {
	*x = DynamicPerfDataKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPerfDataKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPerfDataKeyInfo) ProtoMessage() {}

func (x *DynamicPerfDataKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPerfDataKeyInfo.ProtoReflect.Descriptor instead.
func (*DynamicPerfDataKeyInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{23}
}

func (x *DynamicPerfDataKeyInfo) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DynamicPerfDataKeyInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicPerfDataKeyInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

type DynamicPerfDataDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        DynamicPerfDataType       `protobuf:"varint,1,opt,name=type,proto3,enum=com.perfdog.proto.DynamicPerfDataType" json:"type,omitempty"`
	Category    string                    `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Description string                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Key         []*DynamicPerfDataKeyInfo `protobuf:"bytes,4,rep,name=key,proto3" json:"key,omitempty"`
	Group       int32                     `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *DynamicPerfDataDesc) Reset() {
	*x = DynamicPerfDataDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPerfDataDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPerfDataDesc) ProtoMessage() {}

func (x *DynamicPerfDataDesc) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPerfDataDesc.ProtoReflect.Descriptor instead.
func (*DynamicPerfDataDesc) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{24}
}

func (x *DynamicPerfDataDesc) GetType() DynamicPerfDataType {
	if x != nil {
		return x.Type
	}
	return DynamicPerfDataType_GPU_COUNTER
}

func (x *DynamicPerfDataDesc) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DynamicPerfDataDesc) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DynamicPerfDataDesc) GetKey() []*DynamicPerfDataKeyInfo {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *DynamicPerfDataDesc) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

type DynamicPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64               `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64               `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Category    string              `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Key         string              `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Value       *Value              `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Unit        string              `protobuf:"bytes,6,opt,name=unit,proto3" json:"unit,omitempty"`
	SampleCount *OptionalInt        `protobuf:"bytes,7,opt,name=sampleCount,proto3" json:"sampleCount,omitempty"`
	Group       int32               `protobuf:"varint,8,opt,name=group,proto3" json:"group,omitempty"`
	Type        DynamicPerfDataType `protobuf:"varint,9,opt,name=type,proto3,enum=com.perfdog.proto.DynamicPerfDataType" json:"type,omitempty"`
}

func (x *DynamicPerfData) Reset() {
	*x = DynamicPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicPerfData) ProtoMessage() {}

func (x *DynamicPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicPerfData.ProtoReflect.Descriptor instead.
func (*DynamicPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{25}
}

func (x *DynamicPerfData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DynamicPerfData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *DynamicPerfData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DynamicPerfData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DynamicPerfData) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicPerfData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *DynamicPerfData) GetSampleCount() *OptionalInt {
	if x != nil {
		return x.SampleCount
	}
	return nil
}

func (x *DynamicPerfData) GetGroup() int32 {
	if x != nil {
		return x.Group
	}
	return 0
}

func (x *DynamicPerfData) GetType() DynamicPerfDataType {
	if x != nil {
		return x.Type
	}
	return DynamicPerfDataType_GPU_COUNTER
}

type DynamicDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DynamicData []*DynamicPerfData     `protobuf:"bytes,1,rep,name=dynamicData,proto3" json:"dynamicData,omitempty"`
	DynamicInfo []*DynamicPerfDataDesc `protobuf:"bytes,2,rep,name=dynamicInfo,proto3" json:"dynamicInfo,omitempty"`
}

func (x *DynamicDataList) Reset() {
	*x = DynamicDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicDataList) ProtoMessage() {}

func (x *DynamicDataList) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicDataList.ProtoReflect.Descriptor instead.
func (*DynamicDataList) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{26}
}

func (x *DynamicDataList) GetDynamicData() []*DynamicPerfData {
	if x != nil {
		return x.DynamicData
	}
	return nil
}

func (x *DynamicDataList) GetDynamicInfo() []*DynamicPerfDataDesc {
	if x != nil {
		return x.DynamicInfo
	}
	return nil
}

type SystraceCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SystraceCategory) Reset() {
	*x = SystraceCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystraceCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystraceCategory) ProtoMessage() {}

func (x *SystraceCategory) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystraceCategory.ProtoReflect.Descriptor instead.
func (*SystraceCategory) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{27}
}

func (x *SystraceCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystraceCategory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PerfDataTypeRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               []PerfDataType         `protobuf:"varint,1,rep,packed,name=type,proto3,enum=com.perfdog.proto.PerfDataType" json:"type,omitempty"`
	DynamicDataDesc    []*DynamicPerfDataDesc `protobuf:"bytes,2,rep,name=dynamicDataDesc,proto3" json:"dynamicDataDesc,omitempty"`
	SystraceCategories []*SystraceCategory    `protobuf:"bytes,3,rep,name=systraceCategories,proto3" json:"systraceCategories,omitempty"`
}

func (x *PerfDataTypeRet) Reset() {
	*x = PerfDataTypeRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfDataTypeRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfDataTypeRet) ProtoMessage() {}

func (x *PerfDataTypeRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfDataTypeRet.ProtoReflect.Descriptor instead.
func (*PerfDataTypeRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{28}
}

func (x *PerfDataTypeRet) GetType() []PerfDataType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PerfDataTypeRet) GetDynamicDataDesc() []*DynamicPerfDataDesc {
	if x != nil {
		return x.DynamicDataDesc
	}
	return nil
}

func (x *PerfDataTypeRet) GetSystraceCategories() []*SystraceCategory {
	if x != nil {
		return x.SystraceCategories
	}
	return nil
}

type ScreenShotInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Second int32   `protobuf:"varint,2,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *ScreenShotInterval) Reset() {
	*x = ScreenShotInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenShotInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenShotInterval) ProtoMessage() {}

func (x *ScreenShotInterval) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenShotInterval.ProtoReflect.Descriptor instead.
func (*ScreenShotInterval) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{29}
}

func (x *ScreenShotInterval) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ScreenShotInterval) GetSecond() int32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type DelayBias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayBiasMin     int32 `protobuf:"varint,1,opt,name=delayBiasMin,proto3" json:"delayBiasMin,omitempty"`         //延时抖动范围的下区间,单位毫秒, Lower range of delay jitter, in milliseconds
	DelayBiasMax     int32 `protobuf:"varint,2,opt,name=delayBiasMax,proto3" json:"delayBiasMax,omitempty"`         //延时抖动范围的上区间,单位毫秒, Upper interval of the delay jitter range, in milliseconds
	DelayBiasPercent int32 `protobuf:"varint,3,opt,name=delayBiasPercent,proto3" json:"delayBiasPercent,omitempty"` //延时抖动的概率1-100%, Probability of delayed jitter 1-100%
}

func (x *DelayBias) Reset() {
	*x = DelayBias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayBias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayBias) ProtoMessage() {}

func (x *DelayBias) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayBias.ProtoReflect.Descriptor instead.
func (*DelayBias) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{30}
}

func (x *DelayBias) GetDelayBiasMin() int32 {
	if x != nil {
		return x.DelayBiasMin
	}
	return 0
}

func (x *DelayBias) GetDelayBiasMax() int32 {
	if x != nil {
		return x.DelayBiasMax
	}
	return 0
}

func (x *DelayBias) GetDelayBiasPercent() int32 {
	if x != nil {
		return x.DelayBiasPercent
	}
	return 0
}

type NetworkProfilingScene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client         string  `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Server         string  `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	Operator       string  `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"` //运营商, network operator
	Network        string  `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`   //网络类型, network type
	Ping           int32   `protobuf:"varint,5,opt,name=ping,proto3" json:"ping,omitempty"`
	PingVariance   int32   `protobuf:"varint,6,opt,name=pingVariance,proto3" json:"pingVariance,omitempty"`
	LossRate       float64 `protobuf:"fixed64,7,opt,name=lossRate,proto3" json:"lossRate,omitempty"`
	DataUpdateTime int64   `protobuf:"varint,8,opt,name=dataUpdateTime,proto3" json:"dataUpdateTime,omitempty"` //地址网络数据的更新时间, Address network data update time
	SceneId        int32   `protobuf:"varint,9,opt,name=sceneId,proto3" json:"sceneId,omitempty"`
	SceneName      string  `protobuf:"bytes,10,opt,name=sceneName,proto3" json:"sceneName,omitempty"`
}

func (x *NetworkProfilingScene) Reset() {
	*x = NetworkProfilingScene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProfilingScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProfilingScene) ProtoMessage() {}

func (x *NetworkProfilingScene) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProfilingScene.ProtoReflect.Descriptor instead.
func (*NetworkProfilingScene) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{31}
}

func (x *NetworkProfilingScene) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *NetworkProfilingScene) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *NetworkProfilingScene) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *NetworkProfilingScene) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NetworkProfilingScene) GetPing() int32 {
	if x != nil {
		return x.Ping
	}
	return 0
}

func (x *NetworkProfilingScene) GetPingVariance() int32 {
	if x != nil {
		return x.PingVariance
	}
	return 0
}

func (x *NetworkProfilingScene) GetLossRate() float64 {
	if x != nil {
		return x.LossRate
	}
	return 0
}

func (x *NetworkProfilingScene) GetDataUpdateTime() int64 {
	if x != nil {
		return x.DataUpdateTime
	}
	return 0
}

func (x *NetworkProfilingScene) GetSceneId() int32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *NetworkProfilingScene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

type NetworkProfilingOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration         *OptionalInt      `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`                                                                 //模板持续时间, Template Duration
	OutBandwidth     *OptionalInt      `protobuf:"bytes,2,opt,name=outBandwidth,proto3" json:"outBandwidth,omitempty"`                                                         //上行带宽,单位kbps, UpStream bandwidth, in kbps
	OutDelay         *OptionalInt      `protobuf:"bytes,3,opt,name=outDelay,proto3" json:"outDelay,omitempty"`                                                                 //上行延时,单位毫秒, Uplink delay, in milliseconds
	OutDelayBias     []*DelayBias      `protobuf:"bytes,4,rep,name=outDelayBias,proto3" json:"outDelayBias,omitempty"`                                                         //上行延时抖动, Uplink delay jitter
	OutRate          *OptionalInt      `protobuf:"bytes,5,opt,name=outRate,proto3" json:"outRate,omitempty"`                                                                   //上行随机丢包,1-100整型, Uplink random packet loss, integer 1-100
	OutPass          *OptionalInt      `protobuf:"bytes,6,opt,name=outPass,proto3" json:"outPass,omitempty"`                                                                   //上行周期性设置（正常放行）,单位毫秒, Uplink periodicity setting (normal release), in milliseconds
	OutLoss          *OptionalInt      `protobuf:"bytes,7,opt,name=outLoss,proto3" json:"outLoss,omitempty"`                                                                   //上行周期性设置（完全丢包）,单位毫秒, Uplink periodicity setting (complete packet loss), in milliseconds
	OutBurst         *OptionalInt      `protobuf:"bytes,8,opt,name=outBurst,proto3" json:"outBurst,omitempty"`                                                                 //上行周期性设置（时间点放行）,单位毫秒, Uplink periodicity setting (point-in-time release), in milliseconds
	InBandwidth      *OptionalInt      `protobuf:"bytes,9,opt,name=inBandwidth,proto3" json:"inBandwidth,omitempty"`                                                           //下行带宽,单位kbps, Downlink bandwidth, in kbps
	InDelay          *OptionalInt      `protobuf:"bytes,10,opt,name=inDelay,proto3" json:"inDelay,omitempty"`                                                                  //下行延时,单位毫秒, Downlink delay, in milliseconds
	InDelayBias      []*DelayBias      `protobuf:"bytes,11,rep,name=inDelayBias,proto3" json:"inDelayBias,omitempty"`                                                          //下行延时抖动, Downlink delay jitter
	InRate           *OptionalInt      `protobuf:"bytes,12,opt,name=inRate,proto3" json:"inRate,omitempty"`                                                                    //下行随机丢包,1-100整型, Downlink random packet loss, integer 1-100
	InPass           *OptionalInt      `protobuf:"bytes,13,opt,name=inPass,proto3" json:"inPass,omitempty"`                                                                    //下行周期性设置（正常放行）,单位毫秒, Downlink periodicity setting (normal release), in milliseconds
	InLoss           *OptionalInt      `protobuf:"bytes,14,opt,name=inLoss,proto3" json:"inLoss,omitempty"`                                                                    //下行周期性设置（完全丢包）,单位毫秒, Downlink periodicity setting (complete packet loss), in milliseconds
	InBurst          *OptionalInt      `protobuf:"bytes,15,opt,name=inBurst,proto3" json:"inBurst,omitempty"`                                                                  //下行周期性设置（时间点放行）,单位毫秒, Downlink periodicity setting (point-in-time release), in milliseconds
	AffectedProtocol []NetworkProtocol `protobuf:"varint,16,rep,packed,name=affectedProtocol,proto3,enum=com.perfdog.proto.NetworkProtocol" json:"affectedProtocol,omitempty"` //应用弱网模拟的协议,不在列表里的协议会直接通过, All protocols affected by weak network simulation. If it is not in the list, it will be passed directly.
	IpList           []string          `protobuf:"bytes,17,rep,name=ipList,proto3" json:"ipList,omitempty"`                                                                    //指定生效弱网的IP, Specify the IP of the weak network that takes effect
}

func (x *NetworkProfilingOption) Reset() {
	*x = NetworkProfilingOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProfilingOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProfilingOption) ProtoMessage() {}

func (x *NetworkProfilingOption) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProfilingOption.ProtoReflect.Descriptor instead.
func (*NetworkProfilingOption) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{32}
}

func (x *NetworkProfilingOption) GetDuration() *OptionalInt {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutBandwidth() *OptionalInt {
	if x != nil {
		return x.OutBandwidth
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutDelay() *OptionalInt {
	if x != nil {
		return x.OutDelay
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutDelayBias() []*DelayBias {
	if x != nil {
		return x.OutDelayBias
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutRate() *OptionalInt {
	if x != nil {
		return x.OutRate
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutPass() *OptionalInt {
	if x != nil {
		return x.OutPass
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutLoss() *OptionalInt {
	if x != nil {
		return x.OutLoss
	}
	return nil
}

func (x *NetworkProfilingOption) GetOutBurst() *OptionalInt {
	if x != nil {
		return x.OutBurst
	}
	return nil
}

func (x *NetworkProfilingOption) GetInBandwidth() *OptionalInt {
	if x != nil {
		return x.InBandwidth
	}
	return nil
}

func (x *NetworkProfilingOption) GetInDelay() *OptionalInt {
	if x != nil {
		return x.InDelay
	}
	return nil
}

func (x *NetworkProfilingOption) GetInDelayBias() []*DelayBias {
	if x != nil {
		return x.InDelayBias
	}
	return nil
}

func (x *NetworkProfilingOption) GetInRate() *OptionalInt {
	if x != nil {
		return x.InRate
	}
	return nil
}

func (x *NetworkProfilingOption) GetInPass() *OptionalInt {
	if x != nil {
		return x.InPass
	}
	return nil
}

func (x *NetworkProfilingOption) GetInLoss() *OptionalInt {
	if x != nil {
		return x.InLoss
	}
	return nil
}

func (x *NetworkProfilingOption) GetInBurst() *OptionalInt {
	if x != nil {
		return x.InBurst
	}
	return nil
}

func (x *NetworkProfilingOption) GetAffectedProtocol() []NetworkProtocol {
	if x != nil {
		return x.AffectedProtocol
	}
	return nil
}

func (x *NetworkProfilingOption) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type NetworkProfilingTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description             string                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Recommended             bool                      `protobuf:"varint,4,opt,name=recommended,proto3" json:"recommended,omitempty"`
	SceneInfo               *NetworkProfilingScene    `protobuf:"bytes,5,opt,name=sceneInfo,proto3" json:"sceneInfo,omitempty"`
	NetworkProfilingOptions []*NetworkProfilingOption `protobuf:"bytes,6,rep,name=networkProfilingOptions,proto3" json:"networkProfilingOptions,omitempty"`
}

func (x *NetworkProfilingTemplate) Reset() {
	*x = NetworkProfilingTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProfilingTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProfilingTemplate) ProtoMessage() {}

func (x *NetworkProfilingTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProfilingTemplate.ProtoReflect.Descriptor instead.
func (*NetworkProfilingTemplate) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{33}
}

func (x *NetworkProfilingTemplate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetworkProfilingTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkProfilingTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkProfilingTemplate) GetRecommended() bool {
	if x != nil {
		return x.Recommended
	}
	return false
}

func (x *NetworkProfilingTemplate) GetSceneInfo() *NetworkProfilingScene {
	if x != nil {
		return x.SceneInfo
	}
	return nil
}

func (x *NetworkProfilingTemplate) GetNetworkProfilingOptions() []*NetworkProfilingOption {
	if x != nil {
		return x.NetworkProfilingOptions
	}
	return nil
}

type NetworkStartTestOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableHttpsDecrypt    bool `protobuf:"varint,1,opt,name=enableHttpsDecrypt,proto3" json:"enableHttpsDecrypt,omitempty"`
	DoNotRestartTestedApp bool `protobuf:"varint,2,opt,name=doNotRestartTestedApp,proto3" json:"doNotRestartTestedApp,omitempty"` //目前仅网络模式生效.为true时不重新拉起被测APP, It Currently only takes effect on the network mode. When true, the APP under test will not be relaunched.
	EnableAdaptiveDelay   bool `protobuf:"varint,3,opt,name=enableAdaptiveDelay,proto3" json:"enableAdaptiveDelay,omitempty"`     //开启后设置的延迟值会减去主ip的延迟, The delay value set after turning on will subtract the delay of the main IP.
}

func (x *NetworkStartTestOption) Reset() {
	*x = NetworkStartTestOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStartTestOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStartTestOption) ProtoMessage() {}

func (x *NetworkStartTestOption) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStartTestOption.ProtoReflect.Descriptor instead.
func (*NetworkStartTestOption) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{34}
}

func (x *NetworkStartTestOption) GetEnableHttpsDecrypt() bool {
	if x != nil {
		return x.EnableHttpsDecrypt
	}
	return false
}

func (x *NetworkStartTestOption) GetDoNotRestartTestedApp() bool {
	if x != nil {
		return x.DoNotRestartTestedApp
	}
	return false
}

func (x *NetworkStartTestOption) GetEnableAdaptiveDelay() bool {
	if x != nil {
		return x.EnableAdaptiveDelay
	}
	return false
}

type SystraceStartTestOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystraceCategories []*SystraceCategory `protobuf:"bytes,1,rep,name=systraceCategories,proto3" json:"systraceCategories,omitempty"`
}

func (x *SystraceStartTestOption) Reset() {
	*x = SystraceStartTestOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystraceStartTestOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystraceStartTestOption) ProtoMessage() {}

func (x *SystraceStartTestOption) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystraceStartTestOption.ProtoReflect.Descriptor instead.
func (*SystraceStartTestOption) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{35}
}

func (x *SystraceStartTestOption) GetSystraceCategories() []*SystraceCategory {
	if x != nil {
		return x.SystraceCategories
	}
	return nil
}

type StartTestAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device                   *Device                   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	App                      *AppInfo                  `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`                                                           // 需要测试的APP, tested app
	SubProcess               string                    `protobuf:"bytes,3,opt,name=subProcess,proto3" json:"subProcess,omitempty"`                                             // 需要测试的子进程(只适用于Android, iOS无需填写), The child process being tested (only applicable to Android, no need to fill in for iOS)
	HideFloatingWindow       bool                      `protobuf:"varint,4,opt,name=hideFloatingWindow,proto3" json:"hideFloatingWindow,omitempty"`                            // 手机上是否不显示悬浮窗(只适用于Android),优先级比setFloatingWindowPreferences高, Whether the floating window is not displayed on the mobile phone (only applicable to Android), the priority is higher than setFloatingWindowPreferences
	SubWindow                string                    `protobuf:"bytes,5,opt,name=subWindow,proto3" json:"subWindow,omitempty"`                                               // 指定测试fps的窗口名字, Specify the window name for testing fps
	ProfilingMode            ProfilingMode             `protobuf:"varint,7,opt,name=profilingMode,proto3,enum=com.perfdog.proto.ProfilingMode" json:"profilingMode,omitempty"` // 针对可调试的应用获取更深度的信息, Get deeper information for debuggable apps
	NetworkProfilingTemplate *NetworkProfilingTemplate `protobuf:"bytes,8,opt,name=networkProfilingTemplate,proto3" json:"networkProfilingTemplate,omitempty"`
	NetworkOption            *NetworkStartTestOption   `protobuf:"bytes,9,opt,name=networkOption,proto3" json:"networkOption,omitempty"`
	SystraceOption           *SystraceStartTestOption  `protobuf:"bytes,10,opt,name=systraceOption,proto3" json:"systraceOption,omitempty"`
}

func (x *StartTestAppReq) Reset() {
	*x = StartTestAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTestAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTestAppReq) ProtoMessage() {}

func (x *StartTestAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTestAppReq.ProtoReflect.Descriptor instead.
func (*StartTestAppReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{36}
}

func (x *StartTestAppReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *StartTestAppReq) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *StartTestAppReq) GetSubProcess() string {
	if x != nil {
		return x.SubProcess
	}
	return ""
}

func (x *StartTestAppReq) GetHideFloatingWindow() bool {
	if x != nil {
		return x.HideFloatingWindow
	}
	return false
}

func (x *StartTestAppReq) GetSubWindow() string {
	if x != nil {
		return x.SubWindow
	}
	return ""
}

func (x *StartTestAppReq) GetProfilingMode() ProfilingMode {
	if x != nil {
		return x.ProfilingMode
	}
	return ProfilingMode_DEFAULT
}

func (x *StartTestAppReq) GetNetworkProfilingTemplate() *NetworkProfilingTemplate {
	if x != nil {
		return x.NetworkProfilingTemplate
	}
	return nil
}

func (x *StartTestAppReq) GetNetworkOption() *NetworkStartTestOption {
	if x != nil {
		return x.NetworkOption
	}
	return nil
}

func (x *StartTestAppReq) GetSystraceOption() *SystraceStartTestOption {
	if x != nil {
		return x.SystraceOption
	}
	return nil
}

type StartTestSysProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device             *Device                  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	SysProcessInfo     *SysProcessInfo          `protobuf:"bytes,2,opt,name=sysProcessInfo,proto3" json:"sysProcessInfo,omitempty"`
	HideFloatingWindow bool                     `protobuf:"varint,3,opt,name=hideFloatingWindow,proto3" json:"hideFloatingWindow,omitempty"`                            // 手机上是否不显示悬浮窗(只适用于Android),优先级比setFloatingWindowPreferences高, Whether the floating window is not displayed on the mobile phone (only applicable to Android), the priority is higher than setFloatingWindowPreferences
	DxVersion          DXVersion                `protobuf:"varint,8,opt,name=dxVersion,proto3,enum=com.perfdog.proto.DXVersion" json:"dxVersion,omitempty"`             //只适用于Window,指定要测试的dx版本, Applies to Window only, specifies the dx version to test
	ProfilingMode      ProfilingMode            `protobuf:"varint,9,opt,name=profilingMode,proto3,enum=com.perfdog.proto.ProfilingMode" json:"profilingMode,omitempty"` // 获取更深度的信息, Get more in-depth information
	SystraceOption     *SystraceStartTestOption `protobuf:"bytes,10,opt,name=systraceOption,proto3" json:"systraceOption,omitempty"`
}

func (x *StartTestSysProcessReq) Reset() {
	*x = StartTestSysProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTestSysProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTestSysProcessReq) ProtoMessage() {}

func (x *StartTestSysProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTestSysProcessReq.ProtoReflect.Descriptor instead.
func (*StartTestSysProcessReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{37}
}

func (x *StartTestSysProcessReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *StartTestSysProcessReq) GetSysProcessInfo() *SysProcessInfo {
	if x != nil {
		return x.SysProcessInfo
	}
	return nil
}

func (x *StartTestSysProcessReq) GetHideFloatingWindow() bool {
	if x != nil {
		return x.HideFloatingWindow
	}
	return false
}

func (x *StartTestSysProcessReq) GetDxVersion() DXVersion {
	if x != nil {
		return x.DxVersion
	}
	return DXVersion_AUTO
}

func (x *StartTestSysProcessReq) GetProfilingMode() ProfilingMode {
	if x != nil {
		return x.ProfilingMode
	}
	return ProfilingMode_DEFAULT
}

func (x *StartTestSysProcessReq) GetSystraceOption() *SystraceStartTestOption {
	if x != nil {
		return x.SystraceOption
	}
	return nil
}

type StartTestRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret int32 `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
}

func (x *StartTestRet) Reset() {
	*x = StartTestRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTestRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTestRet) ProtoMessage() {}

func (x *StartTestRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTestRet.ProtoReflect.Descriptor instead.
func (*StartTestRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{38}
}

func (x *StartTestRet) GetRet() int32 {
	if x != nil {
		return x.Ret
	}
	return 0
}

type OpenPerfDataStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *OpenPerfDataStreamReq) Reset() {
	*x = OpenPerfDataStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPerfDataStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPerfDataStreamReq) ProtoMessage() {}

func (x *OpenPerfDataStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPerfDataStreamReq.ProtoReflect.Descriptor instead.
func (*OpenPerfDataStreamReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{39}
}

func (x *OpenPerfDataStreamReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type StopTestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *StopTestReq) Reset() {
	*x = StopTestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopTestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopTestReq) ProtoMessage() {}

func (x *StopTestReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopTestReq.ProtoReflect.Descriptor instead.
func (*StopTestReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{40}
}

func (x *StopTestReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type FrameTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime      int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	FrameTime    float64 `protobuf:"fixed64,3,opt,name=frameTime,proto3" json:"frameTime,omitempty"`
	IsInterFrame bool    `protobuf:"varint,4,opt,name=isInterFrame,proto3" json:"isInterFrame,omitempty"`
}

func (x *FrameTime) Reset() {
	*x = FrameTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTime) ProtoMessage() {}

func (x *FrameTime) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTime.ProtoReflect.Descriptor instead.
func (*FrameTime) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{41}
}

func (x *FrameTime) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FrameTime) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *FrameTime) GetFrameTime() float64 {
	if x != nil {
		return x.FrameTime
	}
	return 0
}

func (x *FrameTime) GetIsInterFrame() bool {
	if x != nil {
		return x.IsInterFrame
	}
	return false
}

type FpsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Fps        float64         `protobuf:"fixed64,3,opt,name=fps,proto3" json:"fps,omitempty"`
	Label      string          `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Note       string          `protobuf:"bytes,5,opt,name=note,proto3" json:"note,omitempty"`
	InterFrame *OptionalDouble `protobuf:"bytes,6,opt,name=InterFrame,proto3" json:"InterFrame,omitempty"` // 只有android手机有, Only for android phones
	VisualFps  *OptionalDouble `protobuf:"bytes,7,opt,name=visualFps,proto3" json:"visualFps,omitempty"`
}

func (x *FpsData) Reset() {
	*x = FpsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FpsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FpsData) ProtoMessage() {}

func (x *FpsData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FpsData.ProtoReflect.Descriptor instead.
func (*FpsData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{42}
}

func (x *FpsData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FpsData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *FpsData) GetFps() float64 {
	if x != nil {
		return x.Fps
	}
	return 0
}

func (x *FpsData) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FpsData) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *FpsData) GetInterFrame() *OptionalDouble {
	if x != nil {
		return x.InterFrame
	}
	return nil
}

func (x *FpsData) GetVisualFps() *OptionalDouble {
	if x != nil {
		return x.VisualFps
	}
	return nil
}

type FrameTimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameTime []*FrameTime `protobuf:"bytes,1,rep,name=frameTime,proto3" json:"frameTime,omitempty"`
}

func (x *FrameTimeData) Reset() {
	*x = FrameTimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTimeData) ProtoMessage() {}

func (x *FrameTimeData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTimeData.ProtoReflect.Descriptor instead.
func (*FrameTimeData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{43}
}

func (x *FrameTimeData) GetFrameTime() []*FrameTime {
	if x != nil {
		return x.FrameTime
	}
	return nil
}

type JankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime            int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Jank               int32           `protobuf:"varint,3,opt,name=jank,proto3" json:"jank,omitempty"`
	BigJank            int32           `protobuf:"varint,4,opt,name=bigJank,proto3" json:"bigJank,omitempty"`
	Stutter            float64         `protobuf:"fixed64,5,opt,name=stutter,proto3" json:"stutter,omitempty"`
	SmallJank          int32           `protobuf:"varint,6,opt,name=smallJank,proto3" json:"smallJank,omitempty"`
	FrameStability     float64         `protobuf:"fixed64,7,opt,name=frameStability,proto3" json:"frameStability,omitempty"`
	OnePercentLowFrame *OptionalDouble `protobuf:"bytes,8,opt,name=onePercentLowFrame,proto3" json:"onePercentLowFrame,omitempty"`
}

func (x *JankData) Reset() {
	*x = JankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JankData) ProtoMessage() {}

func (x *JankData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JankData.ProtoReflect.Descriptor instead.
func (*JankData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{44}
}

func (x *JankData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *JankData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *JankData) GetJank() int32 {
	if x != nil {
		return x.Jank
	}
	return 0
}

func (x *JankData) GetBigJank() int32 {
	if x != nil {
		return x.BigJank
	}
	return 0
}

func (x *JankData) GetStutter() float64 {
	if x != nil {
		return x.Stutter
	}
	return 0
}

func (x *JankData) GetSmallJank() int32 {
	if x != nil {
		return x.SmallJank
	}
	return 0
}

func (x *JankData) GetFrameStability() float64 {
	if x != nil {
		return x.FrameStability
	}
	return 0
}

func (x *JankData) GetOnePercentLowFrame() *OptionalDouble {
	if x != nil {
		return x.OnePercentLowFrame
	}
	return nil
}

type AndroidGpuUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuUsage float64 `protobuf:"fixed64,3,opt,name=gpuUsage,proto3" json:"gpuUsage,omitempty"`
}

func (x *AndroidGpuUsageData) Reset() {
	*x = AndroidGpuUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidGpuUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidGpuUsageData) ProtoMessage() {}

func (x *AndroidGpuUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidGpuUsageData.ProtoReflect.Descriptor instead.
func (*AndroidGpuUsageData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{45}
}

func (x *AndroidGpuUsageData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AndroidGpuUsageData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *AndroidGpuUsageData) GetGpuUsage() float64 {
	if x != nil {
		return x.GpuUsage
	}
	return 0
}

type IosGpuUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	RenderUsage float32 `protobuf:"fixed32,3,opt,name=renderUsage,proto3" json:"renderUsage,omitempty"`
	TilerUsage  float32 `protobuf:"fixed32,4,opt,name=tilerUsage,proto3" json:"tilerUsage,omitempty"`
	DeviceUsage float32 `protobuf:"fixed32,5,opt,name=deviceUsage,proto3" json:"deviceUsage,omitempty"`
}

func (x *IosGpuUsageData) Reset() {
	*x = IosGpuUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosGpuUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosGpuUsageData) ProtoMessage() {}

func (x *IosGpuUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosGpuUsageData.ProtoReflect.Descriptor instead.
func (*IosGpuUsageData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{46}
}

func (x *IosGpuUsageData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosGpuUsageData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosGpuUsageData) GetRenderUsage() float32 {
	if x != nil {
		return x.RenderUsage
	}
	return 0
}

func (x *IosGpuUsageData) GetTilerUsage() float32 {
	if x != nil {
		return x.TilerUsage
	}
	return 0
}

func (x *IosGpuUsageData) GetDeviceUsage() float32 {
	if x != nil {
		return x.DeviceUsage
	}
	return 0
}

type GpuFreqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuFreq int32 `protobuf:"varint,3,opt,name=gpuFreq,proto3" json:"gpuFreq,omitempty"`
}

func (x *GpuFreqData) Reset() {
	*x = GpuFreqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuFreqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuFreqData) ProtoMessage() {}

func (x *GpuFreqData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuFreqData.ProtoReflect.Descriptor instead.
func (*GpuFreqData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{47}
}

func (x *GpuFreqData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GpuFreqData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *GpuFreqData) GetGpuFreq() int32 {
	if x != nil {
		return x.GpuFreq
	}
	return 0
}

type AndroidMemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Pss             int32 `protobuf:"varint,3,opt,name=pss,proto3" json:"pss,omitempty"`
	Swap            int32 `protobuf:"varint,4,opt,name=swap,proto3" json:"swap,omitempty"`
	VirtualMemory   int32 `protobuf:"varint,5,opt,name=virtualMemory,proto3" json:"virtualMemory,omitempty"`
	AvailableMemory int32 `protobuf:"varint,6,opt,name=availableMemory,proto3" json:"availableMemory,omitempty"`
}

func (x *AndroidMemData) Reset() {
	*x = AndroidMemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemData) ProtoMessage() {}

func (x *AndroidMemData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemData.ProtoReflect.Descriptor instead.
func (*AndroidMemData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{48}
}

func (x *AndroidMemData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AndroidMemData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *AndroidMemData) GetPss() int32 {
	if x != nil {
		return x.Pss
	}
	return 0
}

func (x *AndroidMemData) GetSwap() int32 {
	if x != nil {
		return x.Swap
	}
	return 0
}

func (x *AndroidMemData) GetVirtualMemory() int32 {
	if x != nil {
		return x.VirtualMemory
	}
	return 0
}

func (x *AndroidMemData) GetAvailableMemory() int32 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

type AndroidMemDetailData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime      int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	NativePss    float64         `protobuf:"fixed64,3,opt,name=nativePss,proto3" json:"nativePss,omitempty"`
	Gfx          float64         `protobuf:"fixed64,4,opt,name=gfx,proto3" json:"gfx,omitempty"`
	Gl           float64         `protobuf:"fixed64,5,opt,name=gl,proto3" json:"gl,omitempty"`
	Unknown      float64         `protobuf:"fixed64,6,opt,name=unknown,proto3" json:"unknown,omitempty"`
	JavaHeap     float64         `protobuf:"fixed64,7,opt,name=javaHeap,proto3" json:"javaHeap,omitempty"`
	DalvikHeap   float64         `protobuf:"fixed64,8,opt,name=dalvikHeap,proto3" json:"dalvikHeap,omitempty"`
	DalvikOther  *OptionalDouble `protobuf:"bytes,9,opt,name=dalvikOther,proto3" json:"dalvikOther,omitempty"`
	Stack        *OptionalDouble `protobuf:"bytes,10,opt,name=stack,proto3" json:"stack,omitempty"`
	Cursor       *OptionalDouble `protobuf:"bytes,11,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Ashmem       *OptionalDouble `protobuf:"bytes,12,opt,name=ashmem,proto3" json:"ashmem,omitempty"`
	OtherDev     *OptionalDouble `protobuf:"bytes,13,opt,name=otherDev,proto3" json:"otherDev,omitempty"`
	SoMmap       *OptionalDouble `protobuf:"bytes,14,opt,name=soMmap,proto3" json:"soMmap,omitempty"`
	JarMmap      *OptionalDouble `protobuf:"bytes,15,opt,name=jarMmap,proto3" json:"jarMmap,omitempty"`
	ApkMmap      *OptionalDouble `protobuf:"bytes,16,opt,name=apkMmap,proto3" json:"apkMmap,omitempty"`
	TtfMmap      *OptionalDouble `protobuf:"bytes,17,opt,name=ttfMmap,proto3" json:"ttfMmap,omitempty"`
	DexMmap      *OptionalDouble `protobuf:"bytes,18,opt,name=dexMmap,proto3" json:"dexMmap,omitempty"`
	CodeMmap     *OptionalDouble `protobuf:"bytes,19,opt,name=codeMmap,proto3" json:"codeMmap,omitempty"`
	ImageMmap    *OptionalDouble `protobuf:"bytes,20,opt,name=imageMmap,proto3" json:"imageMmap,omitempty"`
	OtherMmap    *OptionalDouble `protobuf:"bytes,21,opt,name=otherMmap,proto3" json:"otherMmap,omitempty"`
	Graphics     *OptionalDouble `protobuf:"bytes,22,opt,name=graphics,proto3" json:"graphics,omitempty"`
	Memtrack     *OptionalDouble `protobuf:"bytes,23,opt,name=memtrack,proto3" json:"memtrack,omitempty"`
	OatMmap      *OptionalDouble `protobuf:"bytes,24,opt,name=oatMmap,proto3" json:"oatMmap,omitempty"`
	ArtMmap      *OptionalDouble `protobuf:"bytes,25,opt,name=artMmap,proto3" json:"artMmap,omitempty"`
	EglMtrack    *OptionalDouble `protobuf:"bytes,26,opt,name=eglMtrack,proto3" json:"eglMtrack,omitempty"`
	OtherMtrack  *OptionalDouble `protobuf:"bytes,27,opt,name=otherMtrack,proto3" json:"otherMtrack,omitempty"`
	TotalSwapPss *OptionalDouble `protobuf:"bytes,28,opt,name=totalSwapPss,proto3" json:"totalSwapPss,omitempty"`
}

func (x *AndroidMemDetailData) Reset() {
	*x = AndroidMemDetailData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidMemDetailData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidMemDetailData) ProtoMessage() {}

func (x *AndroidMemDetailData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidMemDetailData.ProtoReflect.Descriptor instead.
func (*AndroidMemDetailData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{49}
}

func (x *AndroidMemDetailData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AndroidMemDetailData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *AndroidMemDetailData) GetNativePss() float64 {
	if x != nil {
		return x.NativePss
	}
	return 0
}

func (x *AndroidMemDetailData) GetGfx() float64 {
	if x != nil {
		return x.Gfx
	}
	return 0
}

func (x *AndroidMemDetailData) GetGl() float64 {
	if x != nil {
		return x.Gl
	}
	return 0
}

func (x *AndroidMemDetailData) GetUnknown() float64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *AndroidMemDetailData) GetJavaHeap() float64 {
	if x != nil {
		return x.JavaHeap
	}
	return 0
}

func (x *AndroidMemDetailData) GetDalvikHeap() float64 {
	if x != nil {
		return x.DalvikHeap
	}
	return 0
}

func (x *AndroidMemDetailData) GetDalvikOther() *OptionalDouble {
	if x != nil {
		return x.DalvikOther
	}
	return nil
}

func (x *AndroidMemDetailData) GetStack() *OptionalDouble {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *AndroidMemDetailData) GetCursor() *OptionalDouble {
	if x != nil {
		return x.Cursor
	}
	return nil
}

func (x *AndroidMemDetailData) GetAshmem() *OptionalDouble {
	if x != nil {
		return x.Ashmem
	}
	return nil
}

func (x *AndroidMemDetailData) GetOtherDev() *OptionalDouble {
	if x != nil {
		return x.OtherDev
	}
	return nil
}

func (x *AndroidMemDetailData) GetSoMmap() *OptionalDouble {
	if x != nil {
		return x.SoMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetJarMmap() *OptionalDouble {
	if x != nil {
		return x.JarMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetApkMmap() *OptionalDouble {
	if x != nil {
		return x.ApkMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetTtfMmap() *OptionalDouble {
	if x != nil {
		return x.TtfMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetDexMmap() *OptionalDouble {
	if x != nil {
		return x.DexMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetCodeMmap() *OptionalDouble {
	if x != nil {
		return x.CodeMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetImageMmap() *OptionalDouble {
	if x != nil {
		return x.ImageMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetOtherMmap() *OptionalDouble {
	if x != nil {
		return x.OtherMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetGraphics() *OptionalDouble {
	if x != nil {
		return x.Graphics
	}
	return nil
}

func (x *AndroidMemDetailData) GetMemtrack() *OptionalDouble {
	if x != nil {
		return x.Memtrack
	}
	return nil
}

func (x *AndroidMemDetailData) GetOatMmap() *OptionalDouble {
	if x != nil {
		return x.OatMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetArtMmap() *OptionalDouble {
	if x != nil {
		return x.ArtMmap
	}
	return nil
}

func (x *AndroidMemDetailData) GetEglMtrack() *OptionalDouble {
	if x != nil {
		return x.EglMtrack
	}
	return nil
}

func (x *AndroidMemDetailData) GetOtherMtrack() *OptionalDouble {
	if x != nil {
		return x.OtherMtrack
	}
	return nil
}

func (x *AndroidMemDetailData) GetTotalSwapPss() *OptionalDouble {
	if x != nil {
		return x.TotalSwapPss
	}
	return nil
}

type Ios10MemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	RealMemory      int32 `protobuf:"varint,3,opt,name=realMemory,proto3" json:"realMemory,omitempty"`
	VirtualMemory   int32 `protobuf:"varint,4,opt,name=virtualMemory,proto3" json:"virtualMemory,omitempty"`
	AvailableMemory int32 `protobuf:"varint,5,opt,name=availableMemory,proto3" json:"availableMemory,omitempty"`
}

func (x *Ios10MemData) Reset() {
	*x = Ios10MemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ios10MemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ios10MemData) ProtoMessage() {}

func (x *Ios10MemData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ios10MemData.ProtoReflect.Descriptor instead.
func (*Ios10MemData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{50}
}

func (x *Ios10MemData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Ios10MemData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *Ios10MemData) GetRealMemory() int32 {
	if x != nil {
		return x.RealMemory
	}
	return 0
}

func (x *Ios10MemData) GetVirtualMemory() int32 {
	if x != nil {
		return x.VirtualMemory
	}
	return 0
}

func (x *Ios10MemData) GetAvailableMemory() int32 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

type Ios11MemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	XcodeMemory     int32 `protobuf:"varint,3,opt,name=xcodeMemory,proto3" json:"xcodeMemory,omitempty"`
	RealMemory      int32 `protobuf:"varint,4,opt,name=realMemory,proto3" json:"realMemory,omitempty"`
	Memory          int32 `protobuf:"varint,5,opt,name=memory,proto3" json:"memory,omitempty"`
	VirtualMemory   int32 `protobuf:"varint,6,opt,name=virtualMemory,proto3" json:"virtualMemory,omitempty"`
	AvailableMemory int32 `protobuf:"varint,7,opt,name=availableMemory,proto3" json:"availableMemory,omitempty"`
}

func (x *Ios11MemData) Reset() {
	*x = Ios11MemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ios11MemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ios11MemData) ProtoMessage() {}

func (x *Ios11MemData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ios11MemData.ProtoReflect.Descriptor instead.
func (*Ios11MemData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{51}
}

func (x *Ios11MemData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Ios11MemData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *Ios11MemData) GetXcodeMemory() int32 {
	if x != nil {
		return x.XcodeMemory
	}
	return 0
}

func (x *Ios11MemData) GetRealMemory() int32 {
	if x != nil {
		return x.RealMemory
	}
	return 0
}

func (x *Ios11MemData) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Ios11MemData) GetVirtualMemory() int32 {
	if x != nil {
		return x.VirtualMemory
	}
	return 0
}

func (x *Ios11MemData) GetAvailableMemory() int32 {
	if x != nil {
		return x.AvailableMemory
	}
	return 0
}

type CoreUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime   int64     `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	CoreUsage []float32 `protobuf:"fixed32,3,rep,packed,name=coreUsage,proto3" json:"coreUsage,omitempty"`
}

func (x *CoreUsageData) Reset() {
	*x = CoreUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreUsageData) ProtoMessage() {}

func (x *CoreUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreUsageData.ProtoReflect.Descriptor instead.
func (*CoreUsageData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{52}
}

func (x *CoreUsageData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CoreUsageData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CoreUsageData) GetCoreUsage() []float32 {
	if x != nil {
		return x.CoreUsage
	}
	return nil
}

type CpuFreqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	CpuFreq []int32 `protobuf:"varint,3,rep,packed,name=cpuFreq,proto3" json:"cpuFreq,omitempty"`
}

func (x *CpuFreqData) Reset() {
	*x = CpuFreqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuFreqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuFreqData) ProtoMessage() {}

func (x *CpuFreqData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuFreqData.ProtoReflect.Descriptor instead.
func (*CpuFreqData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{53}
}

func (x *CpuFreqData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CpuFreqData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CpuFreqData) GetCpuFreq() []int32 {
	if x != nil {
		return x.CpuFreq
	}
	return nil
}

type CpuUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	AppUsage   float64 `protobuf:"fixed64,3,opt,name=appUsage,proto3" json:"appUsage,omitempty"`
	TotalUsage float64 `protobuf:"fixed64,4,opt,name=totalUsage,proto3" json:"totalUsage,omitempty"`
}

func (x *CpuUsageData) Reset() {
	*x = CpuUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuUsageData) ProtoMessage() {}

func (x *CpuUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuUsageData.ProtoReflect.Descriptor instead.
func (*CpuUsageData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{54}
}

func (x *CpuUsageData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CpuUsageData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CpuUsageData) GetAppUsage() float64 {
	if x != nil {
		return x.AppUsage
	}
	return 0
}

func (x *CpuUsageData) GetTotalUsage() float64 {
	if x != nil {
		return x.TotalUsage
	}
	return 0
}

type CpuTempData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Temp    int32 `protobuf:"varint,3,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *CpuTempData) Reset() {
	*x = CpuTempData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuTempData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuTempData) ProtoMessage() {}

func (x *CpuTempData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuTempData.ProtoReflect.Descriptor instead.
func (*CpuTempData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{55}
}

func (x *CpuTempData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CpuTempData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CpuTempData) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type BatteryTempData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Temp    int32 `protobuf:"varint,3,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *BatteryTempData) Reset() {
	*x = BatteryTempData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryTempData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryTempData) ProtoMessage() {}

func (x *BatteryTempData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryTempData.ProtoReflect.Descriptor instead.
func (*BatteryTempData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{56}
}

func (x *BatteryTempData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BatteryTempData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *BatteryTempData) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type GpuTempData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Temp    int32 `protobuf:"varint,3,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *GpuTempData) Reset() {
	*x = GpuTempData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuTempData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuTempData) ProtoMessage() {}

func (x *GpuTempData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuTempData.ProtoReflect.Descriptor instead.
func (*GpuTempData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{57}
}

func (x *GpuTempData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GpuTempData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *GpuTempData) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type NpuTempData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Temp    int32 `protobuf:"varint,3,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *NpuTempData) Reset() {
	*x = NpuTempData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NpuTempData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NpuTempData) ProtoMessage() {}

func (x *NpuTempData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NpuTempData.ProtoReflect.Descriptor instead.
func (*NpuTempData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{58}
}

func (x *NpuTempData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NpuTempData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *NpuTempData) GetTemp() int32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

type CtxSwitchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime   int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	CtxSwitch int64 `protobuf:"varint,3,opt,name=ctxSwitch,proto3" json:"ctxSwitch,omitempty"`
}

func (x *CtxSwitchData) Reset() {
	*x = CtxSwitchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtxSwitchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtxSwitchData) ProtoMessage() {}

func (x *CtxSwitchData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtxSwitchData.ProtoReflect.Descriptor instead.
func (*CtxSwitchData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{59}
}

func (x *CtxSwitchData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CtxSwitchData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CtxSwitchData) GetCtxSwitch() int64 {
	if x != nil {
		return x.CtxSwitch
	}
	return 0
}

type WakeupsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Wakeups int64 `protobuf:"varint,3,opt,name=wakeups,proto3" json:"wakeups,omitempty"`
}

func (x *WakeupsData) Reset() {
	*x = WakeupsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeupsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeupsData) ProtoMessage() {}

func (x *WakeupsData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeupsData.ProtoReflect.Descriptor instead.
func (*WakeupsData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{60}
}

func (x *WakeupsData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WakeupsData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WakeupsData) GetWakeups() int64 {
	if x != nil {
		return x.Wakeups
	}
	return 0
}

type BatteryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Current int32 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	Voltage int32 `protobuf:"varint,4,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Power   int32 `protobuf:"varint,5,opt,name=power,proto3" json:"power,omitempty"`
}

func (x *BatteryData) Reset() {
	*x = BatteryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryData) ProtoMessage() {}

func (x *BatteryData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryData.ProtoReflect.Descriptor instead.
func (*BatteryData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{61}
}

func (x *BatteryData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BatteryData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *BatteryData) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *BatteryData) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *BatteryData) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

type NetworkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Upload   int32 `protobuf:"varint,3,opt,name=upload,proto3" json:"upload,omitempty"`
	Download int32 `protobuf:"varint,4,opt,name=download,proto3" json:"download,omitempty"`
}

func (x *NetworkData) Reset() {
	*x = NetworkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkData) ProtoMessage() {}

func (x *NetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkData.ProtoReflect.Descriptor instead.
func (*NetworkData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{62}
}

func (x *NetworkData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworkData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *NetworkData) GetUpload() int32 {
	if x != nil {
		return x.Upload
	}
	return 0
}

func (x *NetworkData) GetDownload() int32 {
	if x != nil {
		return x.Download
	}
	return 0
}

type SyslogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log string `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *SyslogData) Reset() {
	*x = SyslogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyslogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyslogData) ProtoMessage() {}

func (x *SyslogData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyslogData.ProtoReflect.Descriptor instead.
func (*SyslogData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{63}
}

func (x *SyslogData) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

type ScreenShotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ScreenShotData) Reset() {
	*x = ScreenShotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenShotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenShotData) ProtoMessage() {}

func (x *ScreenShotData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenShotData.ProtoReflect.Descriptor instead.
func (*ScreenShotData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{64}
}

func (x *ScreenShotData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ScreenShotData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *ScreenShotData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type WarningData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *WarningData) Reset() {
	*x = WarningData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarningData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarningData) ProtoMessage() {}

func (x *WarningData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarningData.ProtoReflect.Descriptor instead.
func (*WarningData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{65}
}

func (x *WarningData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ErrorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ErrorData) Reset() {
	*x = ErrorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorData) ProtoMessage() {}

func (x *ErrorData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorData.ProtoReflect.Descriptor instead.
func (*ErrorData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{66}
}

func (x *ErrorData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type MaliGpuCounterBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                   int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	NonFragmentUtilization *OptionalFloat `protobuf:"bytes,3,opt,name=nonFragmentUtilization,proto3" json:"nonFragmentUtilization,omitempty"`
	FragmentUtilization    *OptionalFloat `protobuf:"bytes,4,opt,name=fragmentUtilization,proto3" json:"fragmentUtilization,omitempty"`
	TilerUtilization       *OptionalFloat `protobuf:"bytes,5,opt,name=tilerUtilization,proto3" json:"tilerUtilization,omitempty"`
	GpuActiveCycle         *OptionalFloat `protobuf:"bytes,6,opt,name=gpuActiveCycle,proto3" json:"gpuActiveCycle,omitempty"`
}

func (x *MaliGpuCounterBasic) Reset() {
	*x = MaliGpuCounterBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaliGpuCounterBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaliGpuCounterBasic) ProtoMessage() {}

func (x *MaliGpuCounterBasic) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaliGpuCounterBasic.ProtoReflect.Descriptor instead.
func (*MaliGpuCounterBasic) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{67}
}

func (x *MaliGpuCounterBasic) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MaliGpuCounterBasic) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *MaliGpuCounterBasic) GetNonFragmentUtilization() *OptionalFloat {
	if x != nil {
		return x.NonFragmentUtilization
	}
	return nil
}

func (x *MaliGpuCounterBasic) GetFragmentUtilization() *OptionalFloat {
	if x != nil {
		return x.FragmentUtilization
	}
	return nil
}

func (x *MaliGpuCounterBasic) GetTilerUtilization() *OptionalFloat {
	if x != nil {
		return x.TilerUtilization
	}
	return nil
}

func (x *MaliGpuCounterBasic) GetGpuActiveCycle() *OptionalFloat {
	if x != nil {
		return x.GpuActiveCycle
	}
	return nil
}

type MaliGpuCounterShader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime          int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	OverDraw         *OptionalFloat `protobuf:"bytes,3,opt,name=overDraw,proto3" json:"overDraw,omitempty"`
	PixelThroughput  *OptionalFloat `protobuf:"bytes,4,opt,name=pixelThroughput,proto3" json:"pixelThroughput,omitempty"`
	NonFragmentWarps *OptionalInt64 `protobuf:"bytes,5,opt,name=nonFragmentWarps,proto3" json:"nonFragmentWarps,omitempty"`
	FragmentWarps    *OptionalInt64 `protobuf:"bytes,6,opt,name=fragmentWarps,proto3" json:"fragmentWarps,omitempty"`
}

func (x *MaliGpuCounterShader) Reset() {
	*x = MaliGpuCounterShader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaliGpuCounterShader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaliGpuCounterShader) ProtoMessage() {}

func (x *MaliGpuCounterShader) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaliGpuCounterShader.ProtoReflect.Descriptor instead.
func (*MaliGpuCounterShader) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{68}
}

func (x *MaliGpuCounterShader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MaliGpuCounterShader) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *MaliGpuCounterShader) GetOverDraw() *OptionalFloat {
	if x != nil {
		return x.OverDraw
	}
	return nil
}

func (x *MaliGpuCounterShader) GetPixelThroughput() *OptionalFloat {
	if x != nil {
		return x.PixelThroughput
	}
	return nil
}

func (x *MaliGpuCounterShader) GetNonFragmentWarps() *OptionalInt64 {
	if x != nil {
		return x.NonFragmentWarps
	}
	return nil
}

func (x *MaliGpuCounterShader) GetFragmentWarps() *OptionalInt64 {
	if x != nil {
		return x.FragmentWarps
	}
	return nil
}

type MaliGpuCounterMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64        `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	L2LoadStoreRead *OptionalInt `protobuf:"bytes,3,opt,name=l2LoadStoreRead,proto3" json:"l2LoadStoreRead,omitempty"`
	L2TextureRead   *OptionalInt `protobuf:"bytes,4,opt,name=l2TextureRead,proto3" json:"l2TextureRead,omitempty"`
	BusRead         *OptionalInt `protobuf:"bytes,5,opt,name=busRead,proto3" json:"busRead,omitempty"`
	BusWrite        *OptionalInt `protobuf:"bytes,6,opt,name=busWrite,proto3" json:"busWrite,omitempty"`
}

func (x *MaliGpuCounterMemory) Reset() {
	*x = MaliGpuCounterMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaliGpuCounterMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaliGpuCounterMemory) ProtoMessage() {}

func (x *MaliGpuCounterMemory) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaliGpuCounterMemory.ProtoReflect.Descriptor instead.
func (*MaliGpuCounterMemory) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{69}
}

func (x *MaliGpuCounterMemory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MaliGpuCounterMemory) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *MaliGpuCounterMemory) GetL2LoadStoreRead() *OptionalInt {
	if x != nil {
		return x.L2LoadStoreRead
	}
	return nil
}

func (x *MaliGpuCounterMemory) GetL2TextureRead() *OptionalInt {
	if x != nil {
		return x.L2TextureRead
	}
	return nil
}

func (x *MaliGpuCounterMemory) GetBusRead() *OptionalInt {
	if x != nil {
		return x.BusRead
	}
	return nil
}

func (x *MaliGpuCounterMemory) GetBusWrite() *OptionalInt {
	if x != nil {
		return x.BusWrite
	}
	return nil
}

type QComGpuCounterBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                        int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                     int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuUtilization              *OptionalFloat `protobuf:"bytes,3,opt,name=gpuUtilization,proto3" json:"gpuUtilization,omitempty"`
	GpuBusBusy                  *OptionalFloat `protobuf:"bytes,4,opt,name=gpuBusBusy,proto3" json:"gpuBusBusy,omitempty"`
	ShadersBusy                 *OptionalFloat `protobuf:"bytes,5,opt,name=shadersBusy,proto3" json:"shadersBusy,omitempty"`
	PreClippedPolygonsPerSecond *OptionalInt64 `protobuf:"bytes,6,opt,name=preClippedPolygonsPerSecond,proto3" json:"preClippedPolygonsPerSecond,omitempty"`
}

func (x *QComGpuCounterBasic) Reset() {
	*x = QComGpuCounterBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QComGpuCounterBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QComGpuCounterBasic) ProtoMessage() {}

func (x *QComGpuCounterBasic) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QComGpuCounterBasic.ProtoReflect.Descriptor instead.
func (*QComGpuCounterBasic) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{70}
}

func (x *QComGpuCounterBasic) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QComGpuCounterBasic) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *QComGpuCounterBasic) GetGpuUtilization() *OptionalFloat {
	if x != nil {
		return x.GpuUtilization
	}
	return nil
}

func (x *QComGpuCounterBasic) GetGpuBusBusy() *OptionalFloat {
	if x != nil {
		return x.GpuBusBusy
	}
	return nil
}

func (x *QComGpuCounterBasic) GetShadersBusy() *OptionalFloat {
	if x != nil {
		return x.ShadersBusy
	}
	return nil
}

func (x *QComGpuCounterBasic) GetPreClippedPolygonsPerSecond() *OptionalInt64 {
	if x != nil {
		return x.PreClippedPolygonsPerSecond
	}
	return nil
}

type QComGpuCounterMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime               int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	ReadTotal             *OptionalInt   `protobuf:"bytes,3,opt,name=readTotal,proto3" json:"readTotal,omitempty"`
	WriteTotal            *OptionalInt   `protobuf:"bytes,4,opt,name=writeTotal,proto3" json:"writeTotal,omitempty"`
	TextureL2Miss         *OptionalFloat `protobuf:"bytes,5,opt,name=textureL2Miss,proto3" json:"textureL2Miss,omitempty"`
	StalledOnSystemMemory *OptionalFloat `protobuf:"bytes,6,opt,name=stalledOnSystemMemory,proto3" json:"stalledOnSystemMemory,omitempty"`
}

func (x *QComGpuCounterMemory) Reset() {
	*x = QComGpuCounterMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QComGpuCounterMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QComGpuCounterMemory) ProtoMessage() {}

func (x *QComGpuCounterMemory) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QComGpuCounterMemory.ProtoReflect.Descriptor instead.
func (*QComGpuCounterMemory) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{71}
}

func (x *QComGpuCounterMemory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QComGpuCounterMemory) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *QComGpuCounterMemory) GetReadTotal() *OptionalInt {
	if x != nil {
		return x.ReadTotal
	}
	return nil
}

func (x *QComGpuCounterMemory) GetWriteTotal() *OptionalInt {
	if x != nil {
		return x.WriteTotal
	}
	return nil
}

func (x *QComGpuCounterMemory) GetTextureL2Miss() *OptionalFloat {
	if x != nil {
		return x.TextureL2Miss
	}
	return nil
}

func (x *QComGpuCounterMemory) GetStalledOnSystemMemory() *OptionalFloat {
	if x != nil {
		return x.StalledOnSystemMemory
	}
	return nil
}

type QComGpuCounterShader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                     int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                  int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	VerticesShadedPerSecond  *OptionalInt64 `protobuf:"bytes,3,opt,name=verticesShadedPerSecond,proto3" json:"verticesShadedPerSecond,omitempty"`
	FragmentsShadedPerSecond *OptionalInt64 `protobuf:"bytes,4,opt,name=fragmentsShadedPerSecond,proto3" json:"fragmentsShadedPerSecond,omitempty"`
}

func (x *QComGpuCounterShader) Reset() {
	*x = QComGpuCounterShader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QComGpuCounterShader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QComGpuCounterShader) ProtoMessage() {}

func (x *QComGpuCounterShader) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QComGpuCounterShader.ProtoReflect.Descriptor instead.
func (*QComGpuCounterShader) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{72}
}

func (x *QComGpuCounterShader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *QComGpuCounterShader) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *QComGpuCounterShader) GetVerticesShadedPerSecond() *OptionalInt64 {
	if x != nil {
		return x.VerticesShadedPerSecond
	}
	return nil
}

func (x *QComGpuCounterShader) GetFragmentsShadedPerSecond() *OptionalInt64 {
	if x != nil {
		return x.FragmentsShadedPerSecond
	}
	return nil
}

type PVRGpuCounterBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	RendererActive *OptionalFloat `protobuf:"bytes,3,opt,name=rendererActive,proto3" json:"rendererActive,omitempty"`
	TilerActive    *OptionalFloat `protobuf:"bytes,4,opt,name=tilerActive,proto3" json:"tilerActive,omitempty"`
	HsrEfficiency  *OptionalFloat `protobuf:"bytes,5,opt,name=hsrEfficiency,proto3" json:"hsrEfficiency,omitempty"`
	SpmActive      *OptionalFloat `protobuf:"bytes,6,opt,name=spmActive,proto3" json:"spmActive,omitempty"`
}

func (x *PVRGpuCounterBasic) Reset() {
	*x = PVRGpuCounterBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVRGpuCounterBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVRGpuCounterBasic) ProtoMessage() {}

func (x *PVRGpuCounterBasic) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVRGpuCounterBasic.ProtoReflect.Descriptor instead.
func (*PVRGpuCounterBasic) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{73}
}

func (x *PVRGpuCounterBasic) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PVRGpuCounterBasic) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *PVRGpuCounterBasic) GetRendererActive() *OptionalFloat {
	if x != nil {
		return x.RendererActive
	}
	return nil
}

func (x *PVRGpuCounterBasic) GetTilerActive() *OptionalFloat {
	if x != nil {
		return x.TilerActive
	}
	return nil
}

func (x *PVRGpuCounterBasic) GetHsrEfficiency() *OptionalFloat {
	if x != nil {
		return x.HsrEfficiency
	}
	return nil
}

func (x *PVRGpuCounterBasic) GetSpmActive() *OptionalFloat {
	if x != nil {
		return x.SpmActive
	}
	return nil
}

type PVRGpuCounterMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                   int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuMemoryReadRate      *OptionalInt   `protobuf:"bytes,3,opt,name=gpuMemoryReadRate,proto3" json:"gpuMemoryReadRate,omitempty"`
	GpuMemoryWriteRate     *OptionalInt   `protobuf:"bytes,4,opt,name=gpuMemoryWriteRate,proto3" json:"gpuMemoryWriteRate,omitempty"`
	GpuMemoryTotalRate     *OptionalInt   `protobuf:"bytes,5,opt,name=gpuMemoryTotalRate,proto3" json:"gpuMemoryTotalRate,omitempty"`
	GpuMemoryInterfaceLoad *OptionalFloat `protobuf:"bytes,6,opt,name=gpuMemoryInterfaceLoad,proto3" json:"gpuMemoryInterfaceLoad,omitempty"`
}

func (x *PVRGpuCounterMemory) Reset() {
	*x = PVRGpuCounterMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVRGpuCounterMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVRGpuCounterMemory) ProtoMessage() {}

func (x *PVRGpuCounterMemory) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVRGpuCounterMemory.ProtoReflect.Descriptor instead.
func (*PVRGpuCounterMemory) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{74}
}

func (x *PVRGpuCounterMemory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PVRGpuCounterMemory) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *PVRGpuCounterMemory) GetGpuMemoryReadRate() *OptionalInt {
	if x != nil {
		return x.GpuMemoryReadRate
	}
	return nil
}

func (x *PVRGpuCounterMemory) GetGpuMemoryWriteRate() *OptionalInt {
	if x != nil {
		return x.GpuMemoryWriteRate
	}
	return nil
}

func (x *PVRGpuCounterMemory) GetGpuMemoryTotalRate() *OptionalInt {
	if x != nil {
		return x.GpuMemoryTotalRate
	}
	return nil
}

func (x *PVRGpuCounterMemory) GetGpuMemoryInterfaceLoad() *OptionalFloat {
	if x != nil {
		return x.GpuMemoryInterfaceLoad
	}
	return nil
}

type PVRGpuCounterShader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                    int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                 int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	ShadedVerticesPerSecond *OptionalInt64 `protobuf:"bytes,3,opt,name=shadedVerticesPerSecond,proto3" json:"shadedVerticesPerSecond,omitempty"`
	ShadedPixelsPerSecond   *OptionalInt64 `protobuf:"bytes,4,opt,name=shadedPixelsPerSecond,proto3" json:"shadedPixelsPerSecond,omitempty"`
	OverDraw                *OptionalFloat `protobuf:"bytes,5,opt,name=overDraw,proto3" json:"overDraw,omitempty"`
}

func (x *PVRGpuCounterShader) Reset() {
	*x = PVRGpuCounterShader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PVRGpuCounterShader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PVRGpuCounterShader) ProtoMessage() {}

func (x *PVRGpuCounterShader) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PVRGpuCounterShader.ProtoReflect.Descriptor instead.
func (*PVRGpuCounterShader) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{75}
}

func (x *PVRGpuCounterShader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PVRGpuCounterShader) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *PVRGpuCounterShader) GetShadedVerticesPerSecond() *OptionalInt64 {
	if x != nil {
		return x.ShadedVerticesPerSecond
	}
	return nil
}

func (x *PVRGpuCounterShader) GetShadedPixelsPerSecond() *OptionalInt64 {
	if x != nil {
		return x.ShadedPixelsPerSecond
	}
	return nil
}

func (x *PVRGpuCounterShader) GetOverDraw() *OptionalFloat {
	if x != nil {
		return x.OverDraw
	}
	return nil
}

type IosGPUCounterBasics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time              int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime           int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	TotalOccupancy    *OptionalDouble `protobuf:"bytes,3,opt,name=totalOccupancy,proto3" json:"totalOccupancy,omitempty"`
	VertexOccupancy   *OptionalDouble `protobuf:"bytes,4,opt,name=vertexOccupancy,proto3" json:"vertexOccupancy,omitempty"`
	FragmentOccupancy *OptionalDouble `protobuf:"bytes,5,opt,name=fragmentOccupancy,proto3" json:"fragmentOccupancy,omitempty"`
	ComputeOccupancy  *OptionalDouble `protobuf:"bytes,6,opt,name=computeOccupancy,proto3" json:"computeOccupancy,omitempty"`
}

func (x *IosGPUCounterBasics) Reset() {
	*x = IosGPUCounterBasics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosGPUCounterBasics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosGPUCounterBasics) ProtoMessage() {}

func (x *IosGPUCounterBasics) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosGPUCounterBasics.ProtoReflect.Descriptor instead.
func (*IosGPUCounterBasics) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{76}
}

func (x *IosGPUCounterBasics) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosGPUCounterBasics) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosGPUCounterBasics) GetTotalOccupancy() *OptionalDouble {
	if x != nil {
		return x.TotalOccupancy
	}
	return nil
}

func (x *IosGPUCounterBasics) GetVertexOccupancy() *OptionalDouble {
	if x != nil {
		return x.VertexOccupancy
	}
	return nil
}

func (x *IosGPUCounterBasics) GetFragmentOccupancy() *OptionalDouble {
	if x != nil {
		return x.FragmentOccupancy
	}
	return nil
}

func (x *IosGPUCounterBasics) GetComputeOccupancy() *OptionalDouble {
	if x != nil {
		return x.ComputeOccupancy
	}
	return nil
}

type IosGPUCounterMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                     int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                  int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	BufferReadLimiter        *OptionalDouble `protobuf:"bytes,3,opt,name=bufferReadLimiter,proto3" json:"bufferReadLimiter,omitempty"`
	BufferLoadUtilization    *OptionalDouble `protobuf:"bytes,4,opt,name=bufferLoadUtilization,proto3" json:"bufferLoadUtilization,omitempty"`
	TextureSampleLimiter     *OptionalDouble `protobuf:"bytes,5,opt,name=textureSampleLimiter,proto3" json:"textureSampleLimiter,omitempty"`
	TextureSampleUtilization *OptionalDouble `protobuf:"bytes,6,opt,name=textureSampleUtilization,proto3" json:"textureSampleUtilization,omitempty"`
	GpuReadBandwidth         *OptionalDouble `protobuf:"bytes,7,opt,name=gpuReadBandwidth,proto3" json:"gpuReadBandwidth,omitempty"`
	GpuWriteBandwidth        *OptionalDouble `protobuf:"bytes,8,opt,name=gpuWriteBandwidth,proto3" json:"gpuWriteBandwidth,omitempty"`
}

func (x *IosGPUCounterMemory) Reset() {
	*x = IosGPUCounterMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosGPUCounterMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosGPUCounterMemory) ProtoMessage() {}

func (x *IosGPUCounterMemory) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosGPUCounterMemory.ProtoReflect.Descriptor instead.
func (*IosGPUCounterMemory) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{77}
}

func (x *IosGPUCounterMemory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosGPUCounterMemory) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosGPUCounterMemory) GetBufferReadLimiter() *OptionalDouble {
	if x != nil {
		return x.BufferReadLimiter
	}
	return nil
}

func (x *IosGPUCounterMemory) GetBufferLoadUtilization() *OptionalDouble {
	if x != nil {
		return x.BufferLoadUtilization
	}
	return nil
}

func (x *IosGPUCounterMemory) GetTextureSampleLimiter() *OptionalDouble {
	if x != nil {
		return x.TextureSampleLimiter
	}
	return nil
}

func (x *IosGPUCounterMemory) GetTextureSampleUtilization() *OptionalDouble {
	if x != nil {
		return x.TextureSampleUtilization
	}
	return nil
}

func (x *IosGPUCounterMemory) GetGpuReadBandwidth() *OptionalDouble {
	if x != nil {
		return x.GpuReadBandwidth
	}
	return nil
}

func (x *IosGPUCounterMemory) GetGpuWriteBandwidth() *OptionalDouble {
	if x != nil {
		return x.GpuWriteBandwidth
	}
	return nil
}

type IosGPUCounterShader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	AluLimiter     *OptionalDouble `protobuf:"bytes,3,opt,name=aluLimiter,proto3" json:"aluLimiter,omitempty"`
	AluUtilization *OptionalDouble `protobuf:"bytes,4,opt,name=aluUtilization,proto3" json:"aluUtilization,omitempty"`
	F32Utilization *OptionalDouble `protobuf:"bytes,5,opt,name=f32Utilization,proto3" json:"f32Utilization,omitempty"`
	F16Utilization *OptionalDouble `protobuf:"bytes,6,opt,name=f16Utilization,proto3" json:"f16Utilization,omitempty"`
}

func (x *IosGPUCounterShader) Reset() {
	*x = IosGPUCounterShader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosGPUCounterShader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosGPUCounterShader) ProtoMessage() {}

func (x *IosGPUCounterShader) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosGPUCounterShader.ProtoReflect.Descriptor instead.
func (*IosGPUCounterShader) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{78}
}

func (x *IosGPUCounterShader) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosGPUCounterShader) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosGPUCounterShader) GetAluLimiter() *OptionalDouble {
	if x != nil {
		return x.AluLimiter
	}
	return nil
}

func (x *IosGPUCounterShader) GetAluUtilization() *OptionalDouble {
	if x != nil {
		return x.AluUtilization
	}
	return nil
}

func (x *IosGPUCounterShader) GetF32Utilization() *OptionalDouble {
	if x != nil {
		return x.F32Utilization
	}
	return nil
}

func (x *IosGPUCounterShader) GetF16Utilization() *OptionalDouble {
	if x != nil {
		return x.F16Utilization
	}
	return nil
}

type IosGPUCounterSampleCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Value   int32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IosGPUCounterSampleCount) Reset() {
	*x = IosGPUCounterSampleCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosGPUCounterSampleCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosGPUCounterSampleCount) ProtoMessage() {}

func (x *IosGPUCounterSampleCount) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosGPUCounterSampleCount.ProtoReflect.Descriptor instead.
func (*IosGPUCounterSampleCount) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{79}
}

func (x *IosGPUCounterSampleCount) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosGPUCounterSampleCount) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosGPUCounterSampleCount) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type SwitchMemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                     int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                  int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	TotalAvailableMemorySize int32 `protobuf:"varint,3,opt,name=totalAvailableMemorySize,proto3" json:"totalAvailableMemorySize,omitempty"`
	TotalUsedMemorySize      int32 `protobuf:"varint,4,opt,name=totalUsedMemorySize,proto3" json:"totalUsedMemorySize,omitempty"`
	TotalMemoryHeapSize      int32 `protobuf:"varint,5,opt,name=totalMemoryHeapSize,proto3" json:"totalMemoryHeapSize,omitempty"`
	AllocatedMemoryHeapSize  int32 `protobuf:"varint,6,opt,name=allocatedMemoryHeapSize,proto3" json:"allocatedMemoryHeapSize,omitempty"`
	ProgramSize              int32 `protobuf:"varint,7,opt,name=programSize,proto3" json:"programSize,omitempty"`
	TotalThreadStackSize     int32 `protobuf:"varint,8,opt,name=totalThreadStackSize,proto3" json:"totalThreadStackSize,omitempty"`
	ThreadCount              int32 `protobuf:"varint,9,opt,name=threadCount,proto3" json:"threadCount,omitempty"`
}

func (x *SwitchMemData) Reset() {
	*x = SwitchMemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchMemData) ProtoMessage() {}

func (x *SwitchMemData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchMemData.ProtoReflect.Descriptor instead.
func (*SwitchMemData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{80}
}

func (x *SwitchMemData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SwitchMemData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *SwitchMemData) GetTotalAvailableMemorySize() int32 {
	if x != nil {
		return x.TotalAvailableMemorySize
	}
	return 0
}

func (x *SwitchMemData) GetTotalUsedMemorySize() int32 {
	if x != nil {
		return x.TotalUsedMemorySize
	}
	return 0
}

func (x *SwitchMemData) GetTotalMemoryHeapSize() int32 {
	if x != nil {
		return x.TotalMemoryHeapSize
	}
	return 0
}

func (x *SwitchMemData) GetAllocatedMemoryHeapSize() int32 {
	if x != nil {
		return x.AllocatedMemoryHeapSize
	}
	return 0
}

func (x *SwitchMemData) GetProgramSize() int32 {
	if x != nil {
		return x.ProgramSize
	}
	return 0
}

func (x *SwitchMemData) GetTotalThreadStackSize() int32 {
	if x != nil {
		return x.TotalThreadStackSize
	}
	return 0
}

func (x *SwitchMemData) GetThreadCount() int32 {
	if x != nil {
		return x.ThreadCount
	}
	return 0
}

type UnityMonoHeapData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                 int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime              int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	MonoHeapReservedSize int32 `protobuf:"varint,3,opt,name=monoHeapReservedSize,proto3" json:"monoHeapReservedSize,omitempty"`
	MonoHeapUsedSize     int32 `protobuf:"varint,4,opt,name=monoHeapUsedSize,proto3" json:"monoHeapUsedSize,omitempty"`
}

func (x *UnityMonoHeapData) Reset() {
	*x = UnityMonoHeapData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnityMonoHeapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnityMonoHeapData) ProtoMessage() {}

func (x *UnityMonoHeapData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnityMonoHeapData.ProtoReflect.Descriptor instead.
func (*UnityMonoHeapData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{81}
}

func (x *UnityMonoHeapData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UnityMonoHeapData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *UnityMonoHeapData) GetMonoHeapReservedSize() int32 {
	if x != nil {
		return x.MonoHeapReservedSize
	}
	return 0
}

func (x *UnityMonoHeapData) GetMonoHeapUsedSize() int32 {
	if x != nil {
		return x.MonoHeapUsedSize
	}
	return 0
}

type WindowsCpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	AppUsage       float32 `protobuf:"fixed32,3,opt,name=appUsage,proto3" json:"appUsage,omitempty"`
	AppUserUsage   float32 `protobuf:"fixed32,4,opt,name=appUserUsage,proto3" json:"appUserUsage,omitempty"`
	AppKernelUsage float32 `protobuf:"fixed32,5,opt,name=appKernelUsage,proto3" json:"appKernelUsage,omitempty"`
}

func (x *WindowsCpuUsage) Reset() {
	*x = WindowsCpuUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsCpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsCpuUsage) ProtoMessage() {}

func (x *WindowsCpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsCpuUsage.ProtoReflect.Descriptor instead.
func (*WindowsCpuUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{82}
}

func (x *WindowsCpuUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsCpuUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsCpuUsage) GetAppUsage() float32 {
	if x != nil {
		return x.AppUsage
	}
	return 0
}

func (x *WindowsCpuUsage) GetAppUserUsage() float32 {
	if x != nil {
		return x.AppUserUsage
	}
	return 0
}

func (x *WindowsCpuUsage) GetAppKernelUsage() float32 {
	if x != nil {
		return x.AppKernelUsage
	}
	return 0
}

type WindowsRender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	DrawCall       float64 `protobuf:"fixed64,3,opt,name=drawCall,proto3" json:"drawCall,omitempty"`
	PrimitiveCount float64 `protobuf:"fixed64,4,opt,name=primitiveCount,proto3" json:"primitiveCount,omitempty"`
}

func (x *WindowsRender) Reset() {
	*x = WindowsRender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsRender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsRender) ProtoMessage() {}

func (x *WindowsRender) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsRender.ProtoReflect.Descriptor instead.
func (*WindowsRender) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{83}
}

func (x *WindowsRender) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsRender) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsRender) GetDrawCall() float64 {
	if x != nil {
		return x.DrawCall
	}
	return 0
}

func (x *WindowsRender) GetPrimitiveCount() float64 {
	if x != nil {
		return x.PrimitiveCount
	}
	return 0
}

type WindowsRenderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Render []*WindowsRender `protobuf:"bytes,1,rep,name=render,proto3" json:"render,omitempty"`
}

func (x *WindowsRenderData) Reset() {
	*x = WindowsRenderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsRenderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsRenderData) ProtoMessage() {}

func (x *WindowsRenderData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsRenderData.ProtoReflect.Descriptor instead.
func (*WindowsRenderData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{84}
}

func (x *WindowsRenderData) GetRender() []*WindowsRender {
	if x != nil {
		return x.Render
	}
	return nil
}

type WindowsMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime               int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	WorkingSet            float64 `protobuf:"fixed64,3,opt,name=workingSet,proto3" json:"workingSet,omitempty"`
	PrivateBytes          float64 `protobuf:"fixed64,4,opt,name=privateBytes,proto3" json:"privateBytes,omitempty"`
	VirtualBytes          float64 `protobuf:"fixed64,5,opt,name=virtualBytes,proto3" json:"virtualBytes,omitempty"`
	SystemAvailableMemory float64 `protobuf:"fixed64,6,opt,name=systemAvailableMemory,proto3" json:"systemAvailableMemory,omitempty"`
	PageFaults            float64 `protobuf:"fixed64,7,opt,name=pageFaults,proto3" json:"pageFaults,omitempty"`
}

func (x *WindowsMemoryUsage) Reset() {
	*x = WindowsMemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsMemoryUsage) ProtoMessage() {}

func (x *WindowsMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsMemoryUsage.ProtoReflect.Descriptor instead.
func (*WindowsMemoryUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{85}
}

func (x *WindowsMemoryUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsMemoryUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsMemoryUsage) GetWorkingSet() float64 {
	if x != nil {
		return x.WorkingSet
	}
	return 0
}

func (x *WindowsMemoryUsage) GetPrivateBytes() float64 {
	if x != nil {
		return x.PrivateBytes
	}
	return 0
}

func (x *WindowsMemoryUsage) GetVirtualBytes() float64 {
	if x != nil {
		return x.VirtualBytes
	}
	return 0
}

func (x *WindowsMemoryUsage) GetSystemAvailableMemory() float64 {
	if x != nil {
		return x.SystemAvailableMemory
	}
	return 0
}

func (x *WindowsMemoryUsage) GetPageFaults() float64 {
	if x != nil {
		return x.PageFaults
	}
	return 0
}

type WindowsIOUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime             int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	ReadOperationCount  float64 `protobuf:"fixed64,3,opt,name=readOperationCount,proto3" json:"readOperationCount,omitempty"`
	ReadBytes           float64 `protobuf:"fixed64,4,opt,name=readBytes,proto3" json:"readBytes,omitempty"`
	WriteOperationCount float64 `protobuf:"fixed64,5,opt,name=writeOperationCount,proto3" json:"writeOperationCount,omitempty"`
	WriteBytes          float64 `protobuf:"fixed64,6,opt,name=writeBytes,proto3" json:"writeBytes,omitempty"`
}

func (x *WindowsIOUsage) Reset() {
	*x = WindowsIOUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsIOUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsIOUsage) ProtoMessage() {}

func (x *WindowsIOUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsIOUsage.ProtoReflect.Descriptor instead.
func (*WindowsIOUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{86}
}

func (x *WindowsIOUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsIOUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsIOUsage) GetReadOperationCount() float64 {
	if x != nil {
		return x.ReadOperationCount
	}
	return 0
}

func (x *WindowsIOUsage) GetReadBytes() float64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *WindowsIOUsage) GetWriteOperationCount() float64 {
	if x != nil {
		return x.WriteOperationCount
	}
	return 0
}

func (x *WindowsIOUsage) GetWriteBytes() float64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

type WindowsThread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	ThreadCount int32 `protobuf:"varint,3,opt,name=threadCount,proto3" json:"threadCount,omitempty"`
}

func (x *WindowsThread) Reset() {
	*x = WindowsThread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsThread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsThread) ProtoMessage() {}

func (x *WindowsThread) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsThread.ProtoReflect.Descriptor instead.
func (*WindowsThread) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{87}
}

func (x *WindowsThread) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsThread) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsThread) GetThreadCount() int32 {
	if x != nil {
		return x.ThreadCount
	}
	return 0
}

type WindowsHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	HandleCount int32 `protobuf:"varint,3,opt,name=handleCount,proto3" json:"handleCount,omitempty"`
}

func (x *WindowsHandle) Reset() {
	*x = WindowsHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsHandle) ProtoMessage() {}

func (x *WindowsHandle) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsHandle.ProtoReflect.Descriptor instead.
func (*WindowsHandle) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{88}
}

func (x *WindowsHandle) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsHandle) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsHandle) GetHandleCount() int32 {
	if x != nil {
		return x.HandleCount
	}
	return 0
}

type GpuGraphicsUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EngineName string          `protobuf:"bytes,1,opt,name=engineName,proto3" json:"engineName,omitempty"`
	UsageType  USAGE_TYPE      `protobuf:"varint,2,opt,name=usageType,proto3,enum=com.perfdog.proto.USAGE_TYPE" json:"usageType,omitempty"`
	Usage      *OptionalDouble `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *GpuGraphicsUsage) Reset() {
	*x = GpuGraphicsUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpuGraphicsUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpuGraphicsUsage) ProtoMessage() {}

func (x *GpuGraphicsUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpuGraphicsUsage.ProtoReflect.Descriptor instead.
func (*GpuGraphicsUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{89}
}

func (x *GpuGraphicsUsage) GetEngineName() string {
	if x != nil {
		return x.EngineName
	}
	return ""
}

func (x *GpuGraphicsUsage) GetUsageType() USAGE_TYPE {
	if x != nil {
		return x.UsageType
	}
	return USAGE_TYPE_PROCESS_USAGE
}

func (x *GpuGraphicsUsage) GetUsage() *OptionalDouble {
	if x != nil {
		return x.Usage
	}
	return nil
}

type WindowsGpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time             int64               `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime          int64               `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuIndex         int32               `protobuf:"varint,3,opt,name=gpuIndex,proto3" json:"gpuIndex,omitempty"`
	Temperature      *OptionalDouble     `protobuf:"bytes,4,opt,name=temperature,proto3" json:"temperature,omitempty"`
	AppGUsage3D      *OptionalDouble     `protobuf:"bytes,5,opt,name=appGUsage3D,proto3" json:"appGUsage3D,omitempty"`
	TotalGUsage3D    *OptionalDouble     `protobuf:"bytes,6,opt,name=totalGUsage3D,proto3" json:"totalGUsage3D,omitempty"`
	GpuGraphicsUsage []*GpuGraphicsUsage `protobuf:"bytes,7,rep,name=gpuGraphicsUsage,proto3" json:"gpuGraphicsUsage,omitempty"`
}

func (x *WindowsGpuUsage) Reset() {
	*x = WindowsGpuUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsGpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsGpuUsage) ProtoMessage() {}

func (x *WindowsGpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsGpuUsage.ProtoReflect.Descriptor instead.
func (*WindowsGpuUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{90}
}

func (x *WindowsGpuUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsGpuUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsGpuUsage) GetGpuIndex() int32 {
	if x != nil {
		return x.GpuIndex
	}
	return 0
}

func (x *WindowsGpuUsage) GetTemperature() *OptionalDouble {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *WindowsGpuUsage) GetAppGUsage3D() *OptionalDouble {
	if x != nil {
		return x.AppGUsage3D
	}
	return nil
}

func (x *WindowsGpuUsage) GetTotalGUsage3D() *OptionalDouble {
	if x != nil {
		return x.TotalGUsage3D
	}
	return nil
}

func (x *WindowsGpuUsage) GetGpuGraphicsUsage() []*GpuGraphicsUsage {
	if x != nil {
		return x.GpuGraphicsUsage
	}
	return nil
}

type WindowsPerfTypeNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType []PerfDataType `protobuf:"varint,1,rep,packed,name=dataType,proto3,enum=com.perfdog.proto.PerfDataType" json:"dataType,omitempty"`
}

func (x *WindowsPerfTypeNtf) Reset() {
	*x = WindowsPerfTypeNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsPerfTypeNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsPerfTypeNtf) ProtoMessage() {}

func (x *WindowsPerfTypeNtf) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsPerfTypeNtf.ProtoReflect.Descriptor instead.
func (*WindowsPerfTypeNtf) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{91}
}

func (x *WindowsPerfTypeNtf) GetDataType() []PerfDataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

type WindowsGpuMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime      int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuIndex     int32           `protobuf:"varint,3,opt,name=gpuIndex,proto3" json:"gpuIndex,omitempty"`
	AppDedicated *OptionalDouble `protobuf:"bytes,4,opt,name=appDedicated,proto3" json:"appDedicated,omitempty"`
	AppShared    *OptionalDouble `protobuf:"bytes,5,opt,name=appShared,proto3" json:"appShared,omitempty"`
	Dedicated    *OptionalDouble `protobuf:"bytes,6,opt,name=dedicated,proto3" json:"dedicated,omitempty"`
	Shared       *OptionalDouble `protobuf:"bytes,7,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *WindowsGpuMemoryUsage) Reset() {
	*x = WindowsGpuMemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsGpuMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsGpuMemoryUsage) ProtoMessage() {}

func (x *WindowsGpuMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsGpuMemoryUsage.ProtoReflect.Descriptor instead.
func (*WindowsGpuMemoryUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{92}
}

func (x *WindowsGpuMemoryUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsGpuMemoryUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsGpuMemoryUsage) GetGpuIndex() int32 {
	if x != nil {
		return x.GpuIndex
	}
	return 0
}

func (x *WindowsGpuMemoryUsage) GetAppDedicated() *OptionalDouble {
	if x != nil {
		return x.AppDedicated
	}
	return nil
}

func (x *WindowsGpuMemoryUsage) GetAppShared() *OptionalDouble {
	if x != nil {
		return x.AppShared
	}
	return nil
}

func (x *WindowsGpuMemoryUsage) GetDedicated() *OptionalDouble {
	if x != nil {
		return x.Dedicated
	}
	return nil
}

func (x *WindowsGpuMemoryUsage) GetShared() *OptionalDouble {
	if x != nil {
		return x.Shared
	}
	return nil
}

type NvidiaGpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64          `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64          `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuIndex   int32          `protobuf:"varint,3,opt,name=gpuIndex,proto3" json:"gpuIndex,omitempty"`
	UsedMemory *OptionalInt64 `protobuf:"bytes,4,opt,name=usedMemory,proto3" json:"usedMemory,omitempty"`
	Usage      *OptionalInt   `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	Temp       *OptionalInt   `protobuf:"bytes,6,opt,name=temp,proto3" json:"temp,omitempty"`
	Freq       *OptionalInt64 `protobuf:"bytes,7,opt,name=freq,proto3" json:"freq,omitempty"`
}

func (x *NvidiaGpuUsage) Reset() {
	*x = NvidiaGpuUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NvidiaGpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NvidiaGpuUsage) ProtoMessage() {}

func (x *NvidiaGpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NvidiaGpuUsage.ProtoReflect.Descriptor instead.
func (*NvidiaGpuUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{93}
}

func (x *NvidiaGpuUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NvidiaGpuUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *NvidiaGpuUsage) GetGpuIndex() int32 {
	if x != nil {
		return x.GpuIndex
	}
	return 0
}

func (x *NvidiaGpuUsage) GetUsedMemory() *OptionalInt64 {
	if x != nil {
		return x.UsedMemory
	}
	return nil
}

func (x *NvidiaGpuUsage) GetUsage() *OptionalInt {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *NvidiaGpuUsage) GetTemp() *OptionalInt {
	if x != nil {
		return x.Temp
	}
	return nil
}

func (x *NvidiaGpuUsage) GetFreq() *OptionalInt64 {
	if x != nil {
		return x.Freq
	}
	return nil
}

type AmdGpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	GpuIndex       int32           `protobuf:"varint,3,opt,name=gpuIndex,proto3" json:"gpuIndex,omitempty"`
	UsedMemory     *OptionalInt64  `protobuf:"bytes,4,opt,name=usedMemory,proto3" json:"usedMemory,omitempty"`
	Usage          *OptionalDouble `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	Temp           *OptionalDouble `protobuf:"bytes,6,opt,name=temp,proto3" json:"temp,omitempty"`
	Freq           *OptionalInt64  `protobuf:"bytes,7,opt,name=freq,proto3" json:"freq,omitempty"`
	UsedMemoryFreq *OptionalInt64  `protobuf:"bytes,8,opt,name=usedMemoryFreq,proto3" json:"usedMemoryFreq,omitempty"`
}

func (x *AmdGpuUsage) Reset() {
	*x = AmdGpuUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmdGpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmdGpuUsage) ProtoMessage() {}

func (x *AmdGpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmdGpuUsage.ProtoReflect.Descriptor instead.
func (*AmdGpuUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{94}
}

func (x *AmdGpuUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AmdGpuUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *AmdGpuUsage) GetGpuIndex() int32 {
	if x != nil {
		return x.GpuIndex
	}
	return 0
}

func (x *AmdGpuUsage) GetUsedMemory() *OptionalInt64 {
	if x != nil {
		return x.UsedMemory
	}
	return nil
}

func (x *AmdGpuUsage) GetUsage() *OptionalDouble {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *AmdGpuUsage) GetTemp() *OptionalDouble {
	if x != nil {
		return x.Temp
	}
	return nil
}

func (x *AmdGpuUsage) GetFreq() *OptionalInt64 {
	if x != nil {
		return x.Freq
	}
	return nil
}

func (x *AmdGpuUsage) GetUsedMemoryFreq() *OptionalInt64 {
	if x != nil {
		return x.UsedMemoryFreq
	}
	return nil
}

type WindowsCpuFreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Freq    float64 `protobuf:"fixed64,3,opt,name=freq,proto3" json:"freq,omitempty"`
}

func (x *WindowsCpuFreq) Reset() {
	*x = WindowsCpuFreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsCpuFreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsCpuFreq) ProtoMessage() {}

func (x *WindowsCpuFreq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsCpuFreq.ProtoReflect.Descriptor instead.
func (*WindowsCpuFreq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{95}
}

func (x *WindowsCpuFreq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsCpuFreq) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsCpuFreq) GetFreq() float64 {
	if x != nil {
		return x.Freq
	}
	return 0
}

type WindowsCpuCoreFreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64     `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	CpuFreq []float64 `protobuf:"fixed64,3,rep,packed,name=cpuFreq,proto3" json:"cpuFreq,omitempty"`
}

func (x *WindowsCpuCoreFreq) Reset() {
	*x = WindowsCpuCoreFreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsCpuCoreFreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsCpuCoreFreq) ProtoMessage() {}

func (x *WindowsCpuCoreFreq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsCpuCoreFreq.ProtoReflect.Descriptor instead.
func (*WindowsCpuCoreFreq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{96}
}

func (x *WindowsCpuCoreFreq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsCpuCoreFreq) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsCpuCoreFreq) GetCpuFreq() []float64 {
	if x != nil {
		return x.CpuFreq
	}
	return nil
}

type WindowsCpuCoreUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WindowsCpuCoreUsage) Reset() {
	*x = WindowsCpuCoreUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsCpuCoreUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsCpuCoreUsage) ProtoMessage() {}

func (x *WindowsCpuCoreUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsCpuCoreUsage.ProtoReflect.Descriptor instead.
func (*WindowsCpuCoreUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{97}
}

type WindowsDiskUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time              int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime           int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	DiskNumber        int32   `protobuf:"varint,3,opt,name=diskNumber,proto3" json:"diskNumber,omitempty"`
	ProcessReadSpeed  float64 `protobuf:"fixed64,4,opt,name=processReadSpeed,proto3" json:"processReadSpeed,omitempty"`
	ProcessWriteSpeed float64 `protobuf:"fixed64,5,opt,name=processWriteSpeed,proto3" json:"processWriteSpeed,omitempty"`
	QueueLength       int64   `protobuf:"varint,6,opt,name=queueLength,proto3" json:"queueLength,omitempty"`
}

func (x *WindowsDiskUsage) Reset() {
	*x = WindowsDiskUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsDiskUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsDiskUsage) ProtoMessage() {}

func (x *WindowsDiskUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsDiskUsage.ProtoReflect.Descriptor instead.
func (*WindowsDiskUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{98}
}

func (x *WindowsDiskUsage) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WindowsDiskUsage) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *WindowsDiskUsage) GetDiskNumber() int32 {
	if x != nil {
		return x.DiskNumber
	}
	return 0
}

func (x *WindowsDiskUsage) GetProcessReadSpeed() float64 {
	if x != nil {
		return x.ProcessReadSpeed
	}
	return 0
}

func (x *WindowsDiskUsage) GetProcessWriteSpeed() float64 {
	if x != nil {
		return x.ProcessWriteSpeed
	}
	return 0
}

func (x *WindowsDiskUsage) GetQueueLength() int64 {
	if x != nil {
		return x.QueueLength
	}
	return 0
}

type Frame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex  int32 `protobuf:"varint,1,opt,name=frameIndex,proto3" json:"frameIndex,omitempty"`
	StartTimeNS int64 `protobuf:"varint,2,opt,name=startTimeNS,proto3" json:"startTimeNS,omitempty"`
	Duration    int64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *Frame) Reset() {
	*x = Frame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Frame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Frame) ProtoMessage() {}

func (x *Frame) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Frame.ProtoReflect.Descriptor instead.
func (*Frame) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{99}
}

func (x *Frame) GetFrameIndex() int32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *Frame) GetStartTimeNS() int64 {
	if x != nil {
		return x.StartTimeNS
	}
	return 0
}

func (x *Frame) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Value_LongValue
	//	*Value_DoubleValue
	//	*Value_StringValue
	//	*Value_Blob
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{100}
}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Value) GetLongValue() int64 {
	if x, ok := x.GetKind().(*Value_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x, ok := x.GetKind().(*Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetBlob() []byte {
	if x, ok := x.GetKind().(*Value_Blob); ok {
		return x.Blob
	}
	return nil
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_LongValue struct {
	LongValue int64 `protobuf:"varint,1,opt,name=longValue,proto3,oneof"`
}

type Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=doubleValue,proto3,oneof"`
}

type Value_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=stringValue,proto3,oneof"`
}

type Value_Blob struct {
	Blob []byte `protobuf:"bytes,4,opt,name=blob,proto3,oneof"`
}

func (*Value_LongValue) isValue_Kind() {}

func (*Value_DoubleValue) isValue_Kind() {}

func (*Value_StringValue) isValue_Kind() {}

func (*Value_Blob) isValue_Kind() {}

type ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListValue) Reset() {
	*x = ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValue) ProtoMessage() {}

func (x *ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValue.ProtoReflect.Descriptor instead.
func (*ListValue) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{101}
}

func (x *ListValue) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type PerFrameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameIndex int32  `protobuf:"varint,1,opt,name=frameIndex,proto3" json:"frameIndex,omitempty"`
	Id         int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value      *Value `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PerFrameData) Reset() {
	*x = PerFrameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFrameData) ProtoMessage() {}

func (x *PerFrameData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFrameData.ProtoReflect.Descriptor instead.
func (*PerFrameData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{102}
}

func (x *PerFrameData) GetFrameIndex() int32 {
	if x != nil {
		return x.FrameIndex
	}
	return 0
}

func (x *PerFrameData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PerFrameData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerFrameData) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ThreadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid      int32  `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Priority int32  `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Pid      int32  `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ThreadInfo) Reset() {
	*x = ThreadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfo) ProtoMessage() {}

func (x *ThreadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfo.ProtoReflect.Descriptor instead.
func (*ThreadInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{103}
}

func (x *ThreadInfo) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ThreadInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThreadInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ThreadInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type DeepProfilingProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid      int32  `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`          //进程名, process name
	Cmdline  string `protobuf:"bytes,3,opt,name=cmdline,proto3" json:"cmdline,omitempty"`    //完整的启动参数, Complete startup parameters
	Priority int32  `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"` //显示优先级, priority of display
}

func (x *DeepProfilingProcessInfo) Reset() {
	*x = DeepProfilingProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepProfilingProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepProfilingProcessInfo) ProtoMessage() {}

func (x *DeepProfilingProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepProfilingProcessInfo.ProtoReflect.Descriptor instead.
func (*DeepProfilingProcessInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{104}
}

func (x *DeepProfilingProcessInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DeepProfilingProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeepProfilingProcessInfo) GetCmdline() string {
	if x != nil {
		return x.Cmdline
	}
	return ""
}

func (x *DeepProfilingProcessInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ThreadStateExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid int32 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Pid int32 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ThreadStateExtraInfo) Reset() {
	*x = ThreadStateExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadStateExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadStateExtraInfo) ProtoMessage() {}

func (x *ThreadStateExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadStateExtraInfo.ProtoReflect.Descriptor instead.
func (*ThreadStateExtraInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{105}
}

func (x *ThreadStateExtraInfo) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ThreadStateExtraInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RunningStateExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuId int32 `protobuf:"varint,1,opt,name=cpuId,proto3" json:"cpuId,omitempty"`
}

func (x *RunningStateExtraInfo) Reset() {
	*x = RunningStateExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunningStateExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunningStateExtraInfo) ProtoMessage() {}

func (x *RunningStateExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunningStateExtraInfo.ProtoReflect.Descriptor instead.
func (*RunningStateExtraInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{106}
}

func (x *RunningStateExtraInfo) GetCpuId() int32 {
	if x != nil {
		return x.CpuId
	}
	return 0
}

type BinderSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*BinderSession_Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *BinderSession) Reset() {
	*x = BinderSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderSession) ProtoMessage() {}

func (x *BinderSession) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderSession.ProtoReflect.Descriptor instead.
func (*BinderSession) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{107}
}

func (x *BinderSession) GetSessions() []*BinderSession_Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type BinderTransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int32                 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"` //对应BinderSession里的key, Corresponds to the key in BinderSession
	Type  BinderTransactionType `protobuf:"varint,2,opt,name=type,proto3,enum=com.perfdog.proto.BinderTransactionType" json:"type,omitempty"`
	Flags int32                 `protobuf:"varint,3,opt,name=flags,proto3" json:"flags,omitempty"` //如果(flags & 0x1)>0,表示这是个异步binder调用, If (flags & 0x1)>0, it means this is an asynchronous binder call
	Code  int32                 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BinderTransactionInfo) Reset() {
	*x = BinderTransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderTransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderTransactionInfo) ProtoMessage() {}

func (x *BinderTransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderTransactionInfo.ProtoReflect.Descriptor instead.
func (*BinderTransactionInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{108}
}

func (x *BinderTransactionInfo) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *BinderTransactionInfo) GetType() BinderTransactionType {
	if x != nil {
		return x.Type
	}
	return BinderTransactionType_BINDER_NONE
}

func (x *BinderTransactionInfo) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *BinderTransactionInfo) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{109}
}

func (x *Metadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Metadata) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type MetadataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Metadata `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MetadataList) Reset() {
	*x = MetadataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataList) ProtoMessage() {}

func (x *MetadataList) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataList.ProtoReflect.Descriptor instead.
func (*MetadataList) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{110}
}

func (x *MetadataList) GetValues() []*Metadata {
	if x != nil {
		return x.Values
	}
	return nil
}

type SliceExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadStateExtraInfo  *ThreadStateExtraInfo  `protobuf:"bytes,1,opt,name=threadStateExtraInfo,proto3" json:"threadStateExtraInfo,omitempty"`
	BinderTransactionInfo *BinderTransactionInfo `protobuf:"bytes,2,opt,name=binderTransactionInfo,proto3" json:"binderTransactionInfo,omitempty"`
	MetadataList          *MetadataList          `protobuf:"bytes,3,opt,name=metadataList,proto3" json:"metadataList,omitempty"`
	RunningStateExtraInfo *RunningStateExtraInfo `protobuf:"bytes,4,opt,name=runningStateExtraInfo,proto3" json:"runningStateExtraInfo,omitempty"`
}

func (x *SliceExtraInfo) Reset() {
	*x = SliceExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SliceExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceExtraInfo) ProtoMessage() {}

func (x *SliceExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceExtraInfo.ProtoReflect.Descriptor instead.
func (*SliceExtraInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{111}
}

func (x *SliceExtraInfo) GetThreadStateExtraInfo() *ThreadStateExtraInfo {
	if x != nil {
		return x.ThreadStateExtraInfo
	}
	return nil
}

func (x *SliceExtraInfo) GetBinderTransactionInfo() *BinderTransactionInfo {
	if x != nil {
		return x.BinderTransactionInfo
	}
	return nil
}

func (x *SliceExtraInfo) GetMetadataList() *MetadataList {
	if x != nil {
		return x.MetadataList
	}
	return nil
}

func (x *SliceExtraInfo) GetRunningStateExtraInfo() *RunningStateExtraInfo {
	if x != nil {
		return x.RunningStateExtraInfo
	}
	return nil
}

type Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeNS int64           `protobuf:"varint,1,opt,name=startTimeNS,proto3" json:"startTimeNS,omitempty"`
	Duration    int64           `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Name        string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Level       int32           `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	ExtraInfo   *SliceExtraInfo `protobuf:"bytes,5,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`
}

func (x *Slice) Reset() {
	*x = Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{112}
}

func (x *Slice) GetStartTimeNS() int64 {
	if x != nil {
		return x.StartTimeNS
	}
	return 0
}

func (x *Slice) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Slice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Slice) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Slice) GetExtraInfo() *SliceExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type ThreadFlameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   int32    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Slice []*Slice `protobuf:"bytes,2,rep,name=slice,proto3" json:"slice,omitempty"`
	Pid   int32    `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ThreadFlameData) Reset() {
	*x = ThreadFlameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadFlameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadFlameData) ProtoMessage() {}

func (x *ThreadFlameData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadFlameData.ProtoReflect.Descriptor instead.
func (*ThreadFlameData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{113}
}

func (x *ThreadFlameData) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ThreadFlameData) GetSlice() []*Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *ThreadFlameData) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type ThreadScheduleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid   int32    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Slice []*Slice `protobuf:"bytes,2,rep,name=slice,proto3" json:"slice,omitempty"`
	Pid   int32    `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ThreadScheduleData) Reset() {
	*x = ThreadScheduleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadScheduleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadScheduleData) ProtoMessage() {}

func (x *ThreadScheduleData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadScheduleData.ProtoReflect.Descriptor instead.
func (*ThreadScheduleData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{114}
}

func (x *ThreadScheduleData) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ThreadScheduleData) GetSlice() []*Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *ThreadScheduleData) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type CpuScheduleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuId int32    `protobuf:"varint,1,opt,name=cpuId,proto3" json:"cpuId,omitempty"`
	Slice []*Slice `protobuf:"bytes,2,rep,name=slice,proto3" json:"slice,omitempty"`
}

func (x *CpuScheduleData) Reset() {
	*x = CpuScheduleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuScheduleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuScheduleData) ProtoMessage() {}

func (x *CpuScheduleData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuScheduleData.ProtoReflect.Descriptor instead.
func (*CpuScheduleData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{115}
}

func (x *CpuScheduleData) GetCpuId() int32 {
	if x != nil {
		return x.CpuId
	}
	return 0
}

func (x *CpuScheduleData) GetSlice() []*Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

type CounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CounterValue) Reset() {
	*x = CounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterValue) ProtoMessage() {}

func (x *CounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterValue.ProtoReflect.Descriptor instead.
func (*CounterValue) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{116}
}

func (x *CounterValue) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CounterValue) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type DeepProfilingCounterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid         int32           `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	CounterName string          `protobuf:"bytes,2,opt,name=counterName,proto3" json:"counterName,omitempty"`
	Priority    int32           `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"` //显示优先级, priority of display
	Unit        string          `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Values      []*CounterValue `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	CounterType CounterType     `protobuf:"varint,6,opt,name=counterType,proto3,enum=com.perfdog.proto.CounterType" json:"counterType,omitempty"`
}

func (x *DeepProfilingCounterData) Reset() {
	*x = DeepProfilingCounterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepProfilingCounterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepProfilingCounterData) ProtoMessage() {}

func (x *DeepProfilingCounterData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepProfilingCounterData.ProtoReflect.Descriptor instead.
func (*DeepProfilingCounterData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{117}
}

func (x *DeepProfilingCounterData) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DeepProfilingCounterData) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

func (x *DeepProfilingCounterData) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DeepProfilingCounterData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *DeepProfilingCounterData) GetValues() []*CounterValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *DeepProfilingCounterData) GetCounterType() CounterType {
	if x != nil {
		return x.CounterType
	}
	return CounterType_FTRACE
}

//Asynchronous events that start and end in different threads
//开始和结束不在同一个线程的异步事件
type DeepProfilingAsyncEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	EventName string   `protobuf:"bytes,2,opt,name=eventName,proto3" json:"eventName,omitempty"`
	Priority  int32    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"` //显示优先级, priority of display
	Slice     []*Slice `protobuf:"bytes,4,rep,name=slice,proto3" json:"slice,omitempty"`
}

func (x *DeepProfilingAsyncEvent) Reset() {
	*x = DeepProfilingAsyncEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepProfilingAsyncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepProfilingAsyncEvent) ProtoMessage() {}

func (x *DeepProfilingAsyncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepProfilingAsyncEvent.ProtoReflect.Descriptor instead.
func (*DeepProfilingAsyncEvent) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{118}
}

func (x *DeepProfilingAsyncEvent) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DeepProfilingAsyncEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *DeepProfilingAsyncEvent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *DeepProfilingAsyncEvent) GetSlice() []*Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

type DeepProfilingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*DeepProfilingData_Frame
	//	*DeepProfilingData_PerFrameData
	//	*DeepProfilingData_ThreadInfo
	//	*DeepProfilingData_ThreadFlameData
	//	*DeepProfilingData_ThreadScheduleData
	//	*DeepProfilingData_CpuScheduleData
	//	*DeepProfilingData_ProcessInfo
	//	*DeepProfilingData_CounterData
	//	*DeepProfilingData_AsyncEvent
	//	*DeepProfilingData_BinderSession
	Value isDeepProfilingData_Value `protobuf_oneof:"value"`
}

func (x *DeepProfilingData) Reset() {
	*x = DeepProfilingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepProfilingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepProfilingData) ProtoMessage() {}

func (x *DeepProfilingData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepProfilingData.ProtoReflect.Descriptor instead.
func (*DeepProfilingData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{119}
}

func (m *DeepProfilingData) GetValue() isDeepProfilingData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DeepProfilingData) GetFrame() *Frame {
	if x, ok := x.GetValue().(*DeepProfilingData_Frame); ok {
		return x.Frame
	}
	return nil
}

func (x *DeepProfilingData) GetPerFrameData() *PerFrameData {
	if x, ok := x.GetValue().(*DeepProfilingData_PerFrameData); ok {
		return x.PerFrameData
	}
	return nil
}

func (x *DeepProfilingData) GetThreadInfo() *ThreadInfo {
	if x, ok := x.GetValue().(*DeepProfilingData_ThreadInfo); ok {
		return x.ThreadInfo
	}
	return nil
}

func (x *DeepProfilingData) GetThreadFlameData() *ThreadFlameData {
	if x, ok := x.GetValue().(*DeepProfilingData_ThreadFlameData); ok {
		return x.ThreadFlameData
	}
	return nil
}

func (x *DeepProfilingData) GetThreadScheduleData() *ThreadScheduleData {
	if x, ok := x.GetValue().(*DeepProfilingData_ThreadScheduleData); ok {
		return x.ThreadScheduleData
	}
	return nil
}

func (x *DeepProfilingData) GetCpuScheduleData() *CpuScheduleData {
	if x, ok := x.GetValue().(*DeepProfilingData_CpuScheduleData); ok {
		return x.CpuScheduleData
	}
	return nil
}

func (x *DeepProfilingData) GetProcessInfo() *DeepProfilingProcessInfo {
	if x, ok := x.GetValue().(*DeepProfilingData_ProcessInfo); ok {
		return x.ProcessInfo
	}
	return nil
}

func (x *DeepProfilingData) GetCounterData() *DeepProfilingCounterData {
	if x, ok := x.GetValue().(*DeepProfilingData_CounterData); ok {
		return x.CounterData
	}
	return nil
}

func (x *DeepProfilingData) GetAsyncEvent() *DeepProfilingAsyncEvent {
	if x, ok := x.GetValue().(*DeepProfilingData_AsyncEvent); ok {
		return x.AsyncEvent
	}
	return nil
}

func (x *DeepProfilingData) GetBinderSession() *BinderSession {
	if x, ok := x.GetValue().(*DeepProfilingData_BinderSession); ok {
		return x.BinderSession
	}
	return nil
}

type isDeepProfilingData_Value interface {
	isDeepProfilingData_Value()
}

type DeepProfilingData_Frame struct {
	Frame *Frame `protobuf:"bytes,1,opt,name=frame,proto3,oneof"`
}

type DeepProfilingData_PerFrameData struct {
	PerFrameData *PerFrameData `protobuf:"bytes,2,opt,name=perFrameData,proto3,oneof"`
}

type DeepProfilingData_ThreadInfo struct {
	ThreadInfo *ThreadInfo `protobuf:"bytes,3,opt,name=threadInfo,proto3,oneof"`
}

type DeepProfilingData_ThreadFlameData struct {
	ThreadFlameData *ThreadFlameData `protobuf:"bytes,4,opt,name=threadFlameData,proto3,oneof"`
}

type DeepProfilingData_ThreadScheduleData struct {
	ThreadScheduleData *ThreadScheduleData `protobuf:"bytes,5,opt,name=threadScheduleData,proto3,oneof"`
}

type DeepProfilingData_CpuScheduleData struct {
	CpuScheduleData *CpuScheduleData `protobuf:"bytes,6,opt,name=cpuScheduleData,proto3,oneof"`
}

type DeepProfilingData_ProcessInfo struct {
	ProcessInfo *DeepProfilingProcessInfo `protobuf:"bytes,7,opt,name=processInfo,proto3,oneof"`
}

type DeepProfilingData_CounterData struct {
	CounterData *DeepProfilingCounterData `protobuf:"bytes,8,opt,name=counterData,proto3,oneof"`
}

type DeepProfilingData_AsyncEvent struct {
	AsyncEvent *DeepProfilingAsyncEvent `protobuf:"bytes,9,opt,name=asyncEvent,proto3,oneof"`
}

type DeepProfilingData_BinderSession struct {
	BinderSession *BinderSession `protobuf:"bytes,10,opt,name=binderSession,proto3,oneof"`
}

func (*DeepProfilingData_Frame) isDeepProfilingData_Value() {}

func (*DeepProfilingData_PerFrameData) isDeepProfilingData_Value() {}

func (*DeepProfilingData_ThreadInfo) isDeepProfilingData_Value() {}

func (*DeepProfilingData_ThreadFlameData) isDeepProfilingData_Value() {}

func (*DeepProfilingData_ThreadScheduleData) isDeepProfilingData_Value() {}

func (*DeepProfilingData_CpuScheduleData) isDeepProfilingData_Value() {}

func (*DeepProfilingData_ProcessInfo) isDeepProfilingData_Value() {}

func (*DeepProfilingData_CounterData) isDeepProfilingData_Value() {}

func (*DeepProfilingData_AsyncEvent) isDeepProfilingData_Value() {}

func (*DeepProfilingData_BinderSession) isDeepProfilingData_Value() {}

type PerFramePowerConsumption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                        int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime                     int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	AvgPerFramePowerConsumption float64 `protobuf:"fixed64,3,opt,name=avgPerFramePowerConsumption,proto3" json:"avgPerFramePowerConsumption,omitempty"`
}

func (x *PerFramePowerConsumption) Reset() {
	*x = PerFramePowerConsumption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerFramePowerConsumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerFramePowerConsumption) ProtoMessage() {}

func (x *PerFramePowerConsumption) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerFramePowerConsumption.ProtoReflect.Descriptor instead.
func (*PerFramePowerConsumption) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{120}
}

func (x *PerFramePowerConsumption) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PerFramePowerConsumption) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *PerFramePowerConsumption) GetAvgPerFramePowerConsumption() float64 {
	if x != nil {
		return x.AvgPerFramePowerConsumption
	}
	return 0
}

type CustomData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64      `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64      `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Category   string     `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Key        string     `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	ListValues *ListValue `protobuf:"bytes,5,opt,name=listValues,proto3" json:"listValues,omitempty"`
}

func (x *CustomData) Reset() {
	*x = CustomData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomData) ProtoMessage() {}

func (x *CustomData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomData.ProtoReflect.Descriptor instead.
func (*CustomData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{121}
}

func (x *CustomData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CustomData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CustomData) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *CustomData) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CustomData) GetListValues() *ListValue {
	if x != nil {
		return x.ListValues
	}
	return nil
}

type AddNoteNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AddNoteNtf) Reset() {
	*x = AddNoteNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNoteNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNoteNtf) ProtoMessage() {}

func (x *AddNoteNtf) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNoteNtf.ProtoReflect.Descriptor instead.
func (*AddNoteNtf) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{122}
}

func (x *AddNoteNtf) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AddNoteNtf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetLabelNtf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SetLabelNtf) Reset() {
	*x = SetLabelNtf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLabelNtf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLabelNtf) ProtoMessage() {}

func (x *SetLabelNtf) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLabelNtf.ProtoReflect.Descriptor instead.
func (*SetLabelNtf) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{123}
}

func (x *SetLabelNtf) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SetLabelNtf) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CustomDataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values      []*CustomData `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	AddNoteNtf  *AddNoteNtf   `protobuf:"bytes,2,opt,name=addNoteNtf,proto3" json:"addNoteNtf,omitempty"`
	SetLabelNtf *SetLabelNtf  `protobuf:"bytes,3,opt,name=setLabelNtf,proto3" json:"setLabelNtf,omitempty"`
}

func (x *CustomDataList) Reset() {
	*x = CustomDataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDataList) ProtoMessage() {}

func (x *CustomDataList) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDataList.ProtoReflect.Descriptor instead.
func (*CustomDataList) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{124}
}

func (x *CustomDataList) GetValues() []*CustomData {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *CustomDataList) GetAddNoteNtf() *AddNoteNtf {
	if x != nil {
		return x.AddNoteNtf
	}
	return nil
}

func (x *CustomDataList) GetSetLabelNtf() *SetLabelNtf {
	if x != nil {
		return x.SetLabelNtf
	}
	return nil
}

type NetworkWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64              `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Type        NetworkWarningType `protobuf:"varint,3,opt,name=type,proto3,enum=com.perfdog.proto.NetworkWarningType" json:"type,omitempty"`
	Description string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NetworkWarning) Reset() {
	*x = NetworkWarning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkWarning) ProtoMessage() {}

func (x *NetworkWarning) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkWarning.ProtoReflect.Descriptor instead.
func (*NetworkWarning) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{125}
}

func (x *NetworkWarning) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *NetworkWarning) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *NetworkWarning) GetType() NetworkWarningType {
	if x != nil {
		return x.Type
	}
	return NetworkWarningType_WARNING_NONE
}

func (x *NetworkWarning) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TcpConnectionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Count   int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TcpConnectionCount) Reset() {
	*x = TcpConnectionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpConnectionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpConnectionCount) ProtoMessage() {}

func (x *TcpConnectionCount) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpConnectionCount.ProtoReflect.Descriptor instead.
func (*TcpConnectionCount) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{126}
}

func (x *TcpConnectionCount) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TcpConnectionCount) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TcpConnectionCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TrafficStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	UploadBytes     int32 `protobuf:"varint,3,opt,name=uploadBytes,proto3" json:"uploadBytes,omitempty"`
	DownloadBytes   int32 `protobuf:"varint,4,opt,name=downloadBytes,proto3" json:"downloadBytes,omitempty"`
	UploadPackets   int32 `protobuf:"varint,5,opt,name=uploadPackets,proto3" json:"uploadPackets,omitempty"`
	DownloadPackets int32 `protobuf:"varint,6,opt,name=downloadPackets,proto3" json:"downloadPackets,omitempty"`
}

func (x *TrafficStatistics) Reset() {
	*x = TrafficStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficStatistics) ProtoMessage() {}

func (x *TrafficStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficStatistics.ProtoReflect.Descriptor instead.
func (*TrafficStatistics) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{127}
}

func (x *TrafficStatistics) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TrafficStatistics) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TrafficStatistics) GetUploadBytes() int32 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

func (x *TrafficStatistics) GetDownloadBytes() int32 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *TrafficStatistics) GetUploadPackets() int32 {
	if x != nil {
		return x.UploadPackets
	}
	return 0
}

func (x *TrafficStatistics) GetDownloadPackets() int32 {
	if x != nil {
		return x.DownloadPackets
	}
	return 0
}

type ServerLatency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Latency  int32  `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
	HostName string `protobuf:"bytes,5,opt,name=hostName,proto3" json:"hostName,omitempty"`
}

func (x *ServerLatency) Reset() {
	*x = ServerLatency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerLatency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerLatency) ProtoMessage() {}

func (x *ServerLatency) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerLatency.ProtoReflect.Descriptor instead.
func (*ServerLatency) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{128}
}

func (x *ServerLatency) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ServerLatency) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *ServerLatency) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ServerLatency) GetLatency() int32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *ServerLatency) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

type TcpRetransmissionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalIp             string `protobuf:"bytes,1,opt,name=localIp,proto3" json:"localIp,omitempty"`
	LocalPort           int32  `protobuf:"varint,2,opt,name=localPort,proto3" json:"localPort,omitempty"`
	RemoteIp            string `protobuf:"bytes,3,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	RemotePort          int32  `protobuf:"varint,4,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	RetransmissionCount int32  `protobuf:"varint,5,opt,name=retransmissionCount,proto3" json:"retransmissionCount,omitempty"`
	RemoteHostName      string `protobuf:"bytes,6,opt,name=remoteHostName,proto3" json:"remoteHostName,omitempty"`
}

func (x *TcpRetransmissionItem) Reset() {
	*x = TcpRetransmissionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpRetransmissionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRetransmissionItem) ProtoMessage() {}

func (x *TcpRetransmissionItem) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRetransmissionItem.ProtoReflect.Descriptor instead.
func (*TcpRetransmissionItem) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{129}
}

func (x *TcpRetransmissionItem) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *TcpRetransmissionItem) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *TcpRetransmissionItem) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *TcpRetransmissionItem) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *TcpRetransmissionItem) GetRetransmissionCount() int32 {
	if x != nil {
		return x.RetransmissionCount
	}
	return 0
}

func (x *TcpRetransmissionItem) GetRemoteHostName() string {
	if x != nil {
		return x.RemoteHostName
	}
	return ""
}

type TcpRetransmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                  int64                    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime               int64                    `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	TcpRetransmissionItem []*TcpRetransmissionItem `protobuf:"bytes,3,rep,name=tcpRetransmissionItem,proto3" json:"tcpRetransmissionItem,omitempty"`
}

func (x *TcpRetransmission) Reset() {
	*x = TcpRetransmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpRetransmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRetransmission) ProtoMessage() {}

func (x *TcpRetransmission) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRetransmission.ProtoReflect.Descriptor instead.
func (*TcpRetransmission) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{130}
}

func (x *TcpRetransmission) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TcpRetransmission) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TcpRetransmission) GetTcpRetransmissionItem() []*TcpRetransmissionItem {
	if x != nil {
		return x.TcpRetransmissionItem
	}
	return nil
}

type TcpPacketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	LocalIp    string `protobuf:"bytes,3,opt,name=localIp,proto3" json:"localIp,omitempty"`
	LocalPort  int32  `protobuf:"varint,4,opt,name=localPort,proto3" json:"localPort,omitempty"`
	RemoteIp   string `protobuf:"bytes,5,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	RemotePort int32  `protobuf:"varint,6,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	Len        int32  `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *TcpPacketDetail) Reset() {
	*x = TcpPacketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpPacketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpPacketDetail) ProtoMessage() {}

func (x *TcpPacketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpPacketDetail.ProtoReflect.Descriptor instead.
func (*TcpPacketDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{131}
}

func (x *TcpPacketDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TcpPacketDetail) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TcpPacketDetail) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *TcpPacketDetail) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *TcpPacketDetail) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *TcpPacketDetail) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *TcpPacketDetail) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type UdpPacketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	LocalIp    string `protobuf:"bytes,3,opt,name=localIp,proto3" json:"localIp,omitempty"`
	LocalPort  int32  `protobuf:"varint,4,opt,name=localPort,proto3" json:"localPort,omitempty"`
	RemoteIp   string `protobuf:"bytes,5,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	RemotePort int32  `protobuf:"varint,6,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	Len        int32  `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *UdpPacketDetail) Reset() {
	*x = UdpPacketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdpPacketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdpPacketDetail) ProtoMessage() {}

func (x *UdpPacketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdpPacketDetail.ProtoReflect.Descriptor instead.
func (*UdpPacketDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{132}
}

func (x *UdpPacketDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UdpPacketDetail) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *UdpPacketDetail) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *UdpPacketDetail) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *UdpPacketDetail) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *UdpPacketDetail) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *UdpPacketDetail) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type DnsQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *DnsQuestion) Reset() {
	*x = DnsQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsQuestion) ProtoMessage() {}

func (x *DnsQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsQuestion.ProtoReflect.Descriptor instead.
func (*DnsQuestion) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{133}
}

func (x *DnsQuestion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DnsQuestion) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsQuestion) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type DnsAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Class string `protobuf:"bytes,3,opt,name=class,proto3" json:"class,omitempty"`
	Data  string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DnsAnswer) Reset() {
	*x = DnsAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAnswer) ProtoMessage() {}

func (x *DnsAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAnswer.ProtoReflect.Descriptor instead.
func (*DnsAnswer) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{134}
}

func (x *DnsAnswer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DnsAnswer) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DnsAnswer) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *DnsAnswer) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type DnsPacketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime       int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	LocalIp       string          `protobuf:"bytes,3,opt,name=localIp,proto3" json:"localIp,omitempty"`
	LocalPort     int32           `protobuf:"varint,4,opt,name=localPort,proto3" json:"localPort,omitempty"`
	RemoteIp      string          `protobuf:"bytes,5,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	RemotePort    int32           `protobuf:"varint,6,opt,name=remotePort,proto3" json:"remotePort,omitempty"`
	Protocol      NetworkProtocol `protobuf:"varint,7,opt,name=protocol,proto3,enum=com.perfdog.proto.NetworkProtocol" json:"protocol,omitempty"`
	Questions     []*DnsQuestion  `protobuf:"bytes,8,rep,name=questions,proto3" json:"questions,omitempty"`
	Answers       []*DnsAnswer    `protobuf:"bytes,9,rep,name=answers,proto3" json:"answers,omitempty"`
	ResponseCode  int32           `protobuf:"varint,10,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	Description   string          `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	DnsLookupTime int64           `protobuf:"varint,12,opt,name=dnsLookupTime,proto3" json:"dnsLookupTime,omitempty"`
}

func (x *DnsPacketDetail) Reset() {
	*x = DnsPacketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsPacketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsPacketDetail) ProtoMessage() {}

func (x *DnsPacketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsPacketDetail.ProtoReflect.Descriptor instead.
func (*DnsPacketDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{135}
}

func (x *DnsPacketDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *DnsPacketDetail) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *DnsPacketDetail) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *DnsPacketDetail) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *DnsPacketDetail) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *DnsPacketDetail) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *DnsPacketDetail) GetProtocol() NetworkProtocol {
	if x != nil {
		return x.Protocol
	}
	return NetworkProtocol_NONE
}

func (x *DnsPacketDetail) GetQuestions() []*DnsQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *DnsPacketDetail) GetAnswers() []*DnsAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *DnsPacketDetail) GetResponseCode() int32 {
	if x != nil {
		return x.ResponseCode
	}
	return 0
}

func (x *DnsPacketDetail) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DnsPacketDetail) GetDnsLookupTime() int64 {
	if x != nil {
		return x.DnsLookupTime
	}
	return 0
}

type IcmpPacketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	LocalIp  string `protobuf:"bytes,3,opt,name=localIp,proto3" json:"localIp,omitempty"`
	RemoteIp string `protobuf:"bytes,4,opt,name=remoteIp,proto3" json:"remoteIp,omitempty"`
	Type     int32  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Code     int32  `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`
	Len      int32  `protobuf:"varint,7,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *IcmpPacketDetail) Reset() {
	*x = IcmpPacketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcmpPacketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcmpPacketDetail) ProtoMessage() {}

func (x *IcmpPacketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcmpPacketDetail.ProtoReflect.Descriptor instead.
func (*IcmpPacketDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{136}
}

func (x *IcmpPacketDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IcmpPacketDetail) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IcmpPacketDetail) GetLocalIp() string {
	if x != nil {
		return x.LocalIp
	}
	return ""
}

func (x *IcmpPacketDetail) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *IcmpPacketDetail) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *IcmpPacketDetail) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IcmpPacketDetail) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

type PacketDetailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*PacketDetailItem_TcpPacketDetail
	//	*PacketDetailItem_UdpPacketDetail
	//	*PacketDetailItem_DnsPacketDetail
	//	*PacketDetailItem_IcmpPacketDetail
	Value isPacketDetailItem_Value `protobuf_oneof:"value"`
}

func (x *PacketDetailItem) Reset() {
	*x = PacketDetailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDetailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDetailItem) ProtoMessage() {}

func (x *PacketDetailItem) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDetailItem.ProtoReflect.Descriptor instead.
func (*PacketDetailItem) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{137}
}

func (m *PacketDetailItem) GetValue() isPacketDetailItem_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PacketDetailItem) GetTcpPacketDetail() *TcpPacketDetail {
	if x, ok := x.GetValue().(*PacketDetailItem_TcpPacketDetail); ok {
		return x.TcpPacketDetail
	}
	return nil
}

func (x *PacketDetailItem) GetUdpPacketDetail() *UdpPacketDetail {
	if x, ok := x.GetValue().(*PacketDetailItem_UdpPacketDetail); ok {
		return x.UdpPacketDetail
	}
	return nil
}

func (x *PacketDetailItem) GetDnsPacketDetail() *DnsPacketDetail {
	if x, ok := x.GetValue().(*PacketDetailItem_DnsPacketDetail); ok {
		return x.DnsPacketDetail
	}
	return nil
}

func (x *PacketDetailItem) GetIcmpPacketDetail() *IcmpPacketDetail {
	if x, ok := x.GetValue().(*PacketDetailItem_IcmpPacketDetail); ok {
		return x.IcmpPacketDetail
	}
	return nil
}

type isPacketDetailItem_Value interface {
	isPacketDetailItem_Value()
}

type PacketDetailItem_TcpPacketDetail struct {
	TcpPacketDetail *TcpPacketDetail `protobuf:"bytes,1,opt,name=tcpPacketDetail,proto3,oneof"`
}

type PacketDetailItem_UdpPacketDetail struct {
	UdpPacketDetail *UdpPacketDetail `protobuf:"bytes,2,opt,name=udpPacketDetail,proto3,oneof"`
}

type PacketDetailItem_DnsPacketDetail struct {
	DnsPacketDetail *DnsPacketDetail `protobuf:"bytes,3,opt,name=dnsPacketDetail,proto3,oneof"`
}

type PacketDetailItem_IcmpPacketDetail struct {
	IcmpPacketDetail *IcmpPacketDetail `protobuf:"bytes,4,opt,name=icmpPacketDetail,proto3,oneof"`
}

func (*PacketDetailItem_TcpPacketDetail) isPacketDetailItem_Value() {}

func (*PacketDetailItem_UdpPacketDetail) isPacketDetailItem_Value() {}

func (*PacketDetailItem_DnsPacketDetail) isPacketDetailItem_Value() {}

func (*PacketDetailItem_IcmpPacketDetail) isPacketDetailItem_Value() {}

type PacketDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketDetailItem []*PacketDetailItem `protobuf:"bytes,1,rep,name=packetDetailItem,proto3" json:"packetDetailItem,omitempty"`
}

func (x *PacketDetail) Reset() {
	*x = PacketDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketDetail) ProtoMessage() {}

func (x *PacketDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketDetail.ProtoReflect.Descriptor instead.
func (*PacketDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{138}
}

func (x *PacketDetail) GetPacketDetailItem() []*PacketDetailItem {
	if x != nil {
		return x.PacketDetailItem
	}
	return nil
}

type RawIpPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	IpPacket []byte `protobuf:"bytes,3,opt,name=ipPacket,proto3" json:"ipPacket,omitempty"`
}

func (x *RawIpPacket) Reset() {
	*x = RawIpPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawIpPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawIpPacket) ProtoMessage() {}

func (x *RawIpPacket) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawIpPacket.ProtoReflect.Descriptor instead.
func (*RawIpPacket) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{139}
}

func (x *RawIpPacket) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *RawIpPacket) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *RawIpPacket) GetIpPacket() []byte {
	if x != nil {
		return x.IpPacket
	}
	return nil
}

type TlsAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Ip         []byte `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain     string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	TlsVersion string `protobuf:"bytes,5,opt,name=tlsVersion,proto3" json:"tlsVersion,omitempty"`
	AlertLevel int32  `protobuf:"varint,6,opt,name=alertLevel,proto3" json:"alertLevel,omitempty"`
	AlertCode  int32  `protobuf:"varint,7,opt,name=alertCode,proto3" json:"alertCode,omitempty"`
}

func (x *TlsAlert) Reset() {
	*x = TlsAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsAlert) ProtoMessage() {}

func (x *TlsAlert) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsAlert.ProtoReflect.Descriptor instead.
func (*TlsAlert) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{140}
}

func (x *TlsAlert) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TlsAlert) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TlsAlert) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TlsAlert) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TlsAlert) GetTlsVersion() string {
	if x != nil {
		return x.TlsVersion
	}
	return ""
}

func (x *TlsAlert) GetAlertLevel() int32 {
	if x != nil {
		return x.AlertLevel
	}
	return 0
}

func (x *TlsAlert) GetAlertCode() int32 {
	if x != nil {
		return x.AlertCode
	}
	return 0
}

type TlsHandshakeComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Duration   int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Ip         []byte `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain     string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	TlsVersion string `protobuf:"bytes,6,opt,name=tlsVersion,proto3" json:"tlsVersion,omitempty"`
}

func (x *TlsHandshakeComplete) Reset() {
	*x = TlsHandshakeComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsHandshakeComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsHandshakeComplete) ProtoMessage() {}

func (x *TlsHandshakeComplete) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsHandshakeComplete.ProtoReflect.Descriptor instead.
func (*TlsHandshakeComplete) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{141}
}

func (x *TlsHandshakeComplete) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TlsHandshakeComplete) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *TlsHandshakeComplete) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TlsHandshakeComplete) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TlsHandshakeComplete) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *TlsHandshakeComplete) GetTlsVersion() string {
	if x != nil {
		return x.TlsVersion
	}
	return ""
}

type HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime       int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Duration      int64  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Ip            []byte `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain        string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	RequestHeader string `protobuf:"bytes,6,opt,name=requestHeader,proto3" json:"requestHeader,omitempty"`
	RespondHeader string `protobuf:"bytes,7,opt,name=respondHeader,proto3" json:"respondHeader,omitempty"`
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{142}
}

func (x *HttpRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HttpRequest) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *HttpRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *HttpRequest) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *HttpRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *HttpRequest) GetRequestHeader() string {
	if x != nil {
		return x.RequestHeader
	}
	return ""
}

func (x *HttpRequest) GetRespondHeader() string {
	if x != nil {
		return x.RespondHeader
	}
	return ""
}

type IpTraffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip              string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	UploadBytes     int32  `protobuf:"varint,2,opt,name=uploadBytes,proto3" json:"uploadBytes,omitempty"`
	DownloadBytes   int32  `protobuf:"varint,3,opt,name=downloadBytes,proto3" json:"downloadBytes,omitempty"`
	UploadPackets   int32  `protobuf:"varint,4,opt,name=uploadPackets,proto3" json:"uploadPackets,omitempty"`
	DownloadPackets int32  `protobuf:"varint,5,opt,name=downloadPackets,proto3" json:"downloadPackets,omitempty"`
}

func (x *IpTraffic) Reset() {
	*x = IpTraffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTraffic) ProtoMessage() {}

func (x *IpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTraffic.ProtoReflect.Descriptor instead.
func (*IpTraffic) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{143}
}

func (x *IpTraffic) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *IpTraffic) GetUploadBytes() int32 {
	if x != nil {
		return x.UploadBytes
	}
	return 0
}

func (x *IpTraffic) GetDownloadBytes() int32 {
	if x != nil {
		return x.DownloadBytes
	}
	return 0
}

func (x *IpTraffic) GetUploadPackets() int32 {
	if x != nil {
		return x.UploadPackets
	}
	return 0
}

func (x *IpTraffic) GetDownloadPackets() int32 {
	if x != nil {
		return x.DownloadPackets
	}
	return 0
}

type IpTrafficStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64        `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	IpTraffics []*IpTraffic `protobuf:"bytes,3,rep,name=ipTraffics,proto3" json:"ipTraffics,omitempty"`
}

func (x *IpTrafficStatistics) Reset() {
	*x = IpTrafficStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTrafficStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTrafficStatistics) ProtoMessage() {}

func (x *IpTrafficStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTrafficStatistics.ProtoReflect.Descriptor instead.
func (*IpTrafficStatistics) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{144}
}

func (x *IpTrafficStatistics) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IpTrafficStatistics) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IpTrafficStatistics) GetIpTraffics() []*IpTraffic {
	if x != nil {
		return x.IpTraffics
	}
	return nil
}

type NetworkProfilingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*NetworkProfilingData_NetworkWarning
	//	*NetworkProfilingData_TcpConnectionCount
	//	*NetworkProfilingData_TrafficStatistics
	//	*NetworkProfilingData_ServerLatency
	//	*NetworkProfilingData_TcpRetransmission
	//	*NetworkProfilingData_PacketDetail
	//	*NetworkProfilingData_RawIpPacket
	//	*NetworkProfilingData_TlsAlert
	//	*NetworkProfilingData_TlsHandshakeComplete
	//	*NetworkProfilingData_HttpRequest
	//	*NetworkProfilingData_IpTrafficStatistics
	Value isNetworkProfilingData_Value `protobuf_oneof:"value"`
}

func (x *NetworkProfilingData) Reset() {
	*x = NetworkProfilingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkProfilingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProfilingData) ProtoMessage() {}

func (x *NetworkProfilingData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProfilingData.ProtoReflect.Descriptor instead.
func (*NetworkProfilingData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{145}
}

func (m *NetworkProfilingData) GetValue() isNetworkProfilingData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *NetworkProfilingData) GetNetworkWarning() *NetworkWarning {
	if x, ok := x.GetValue().(*NetworkProfilingData_NetworkWarning); ok {
		return x.NetworkWarning
	}
	return nil
}

func (x *NetworkProfilingData) GetTcpConnectionCount() *TcpConnectionCount {
	if x, ok := x.GetValue().(*NetworkProfilingData_TcpConnectionCount); ok {
		return x.TcpConnectionCount
	}
	return nil
}

func (x *NetworkProfilingData) GetTrafficStatistics() *TrafficStatistics {
	if x, ok := x.GetValue().(*NetworkProfilingData_TrafficStatistics); ok {
		return x.TrafficStatistics
	}
	return nil
}

func (x *NetworkProfilingData) GetServerLatency() *ServerLatency {
	if x, ok := x.GetValue().(*NetworkProfilingData_ServerLatency); ok {
		return x.ServerLatency
	}
	return nil
}

func (x *NetworkProfilingData) GetTcpRetransmission() *TcpRetransmission {
	if x, ok := x.GetValue().(*NetworkProfilingData_TcpRetransmission); ok {
		return x.TcpRetransmission
	}
	return nil
}

func (x *NetworkProfilingData) GetPacketDetail() *PacketDetail {
	if x, ok := x.GetValue().(*NetworkProfilingData_PacketDetail); ok {
		return x.PacketDetail
	}
	return nil
}

func (x *NetworkProfilingData) GetRawIpPacket() *RawIpPacket {
	if x, ok := x.GetValue().(*NetworkProfilingData_RawIpPacket); ok {
		return x.RawIpPacket
	}
	return nil
}

func (x *NetworkProfilingData) GetTlsAlert() *TlsAlert {
	if x, ok := x.GetValue().(*NetworkProfilingData_TlsAlert); ok {
		return x.TlsAlert
	}
	return nil
}

func (x *NetworkProfilingData) GetTlsHandshakeComplete() *TlsHandshakeComplete {
	if x, ok := x.GetValue().(*NetworkProfilingData_TlsHandshakeComplete); ok {
		return x.TlsHandshakeComplete
	}
	return nil
}

func (x *NetworkProfilingData) GetHttpRequest() *HttpRequest {
	if x, ok := x.GetValue().(*NetworkProfilingData_HttpRequest); ok {
		return x.HttpRequest
	}
	return nil
}

func (x *NetworkProfilingData) GetIpTrafficStatistics() *IpTrafficStatistics {
	if x, ok := x.GetValue().(*NetworkProfilingData_IpTrafficStatistics); ok {
		return x.IpTrafficStatistics
	}
	return nil
}

type isNetworkProfilingData_Value interface {
	isNetworkProfilingData_Value()
}

type NetworkProfilingData_NetworkWarning struct {
	NetworkWarning *NetworkWarning `protobuf:"bytes,1,opt,name=networkWarning,proto3,oneof"`
}

type NetworkProfilingData_TcpConnectionCount struct {
	TcpConnectionCount *TcpConnectionCount `protobuf:"bytes,2,opt,name=tcpConnectionCount,proto3,oneof"`
}

type NetworkProfilingData_TrafficStatistics struct {
	TrafficStatistics *TrafficStatistics `protobuf:"bytes,3,opt,name=trafficStatistics,proto3,oneof"`
}

type NetworkProfilingData_ServerLatency struct {
	ServerLatency *ServerLatency `protobuf:"bytes,4,opt,name=serverLatency,proto3,oneof"`
}

type NetworkProfilingData_TcpRetransmission struct {
	TcpRetransmission *TcpRetransmission `protobuf:"bytes,5,opt,name=tcpRetransmission,proto3,oneof"`
}

type NetworkProfilingData_PacketDetail struct {
	PacketDetail *PacketDetail `protobuf:"bytes,6,opt,name=PacketDetail,proto3,oneof"`
}

type NetworkProfilingData_RawIpPacket struct {
	RawIpPacket *RawIpPacket `protobuf:"bytes,7,opt,name=RawIpPacket,proto3,oneof"`
}

type NetworkProfilingData_TlsAlert struct {
	TlsAlert *TlsAlert `protobuf:"bytes,8,opt,name=tlsAlert,proto3,oneof"`
}

type NetworkProfilingData_TlsHandshakeComplete struct {
	TlsHandshakeComplete *TlsHandshakeComplete `protobuf:"bytes,9,opt,name=tlsHandshakeComplete,proto3,oneof"`
}

type NetworkProfilingData_HttpRequest struct {
	HttpRequest *HttpRequest `protobuf:"bytes,10,opt,name=httpRequest,proto3,oneof"`
}

type NetworkProfilingData_IpTrafficStatistics struct {
	IpTrafficStatistics *IpTrafficStatistics `protobuf:"bytes,11,opt,name=ipTrafficStatistics,proto3,oneof"`
}

func (*NetworkProfilingData_NetworkWarning) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_TcpConnectionCount) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_TrafficStatistics) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_ServerLatency) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_TcpRetransmission) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_PacketDetail) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_RawIpPacket) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_TlsAlert) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_TlsHandshakeComplete) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_HttpRequest) isNetworkProfilingData_Value() {}

func (*NetworkProfilingData_IpTrafficStatistics) isNetworkProfilingData_Value() {}

type ThreadCpuUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tid        int32   `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	ThreadName string  `protobuf:"bytes,2,opt,name=threadName,proto3" json:"threadName,omitempty"`
	Usage      float64 `protobuf:"fixed64,3,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ThreadCpuUsage) Reset() {
	*x = ThreadCpuUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCpuUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCpuUsage) ProtoMessage() {}

func (x *ThreadCpuUsage) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCpuUsage.ProtoReflect.Descriptor instead.
func (*ThreadCpuUsage) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{146}
}

func (x *ThreadCpuUsage) GetTid() int32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *ThreadCpuUsage) GetThreadName() string {
	if x != nil {
		return x.ThreadName
	}
	return ""
}

func (x *ThreadCpuUsage) GetUsage() float64 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type ThreadCpuUsageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64             `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	ThreadUsage []*ThreadCpuUsage `protobuf:"bytes,3,rep,name=threadUsage,proto3" json:"threadUsage,omitempty"`
}

func (x *ThreadCpuUsageList) Reset() {
	*x = ThreadCpuUsageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadCpuUsageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadCpuUsageList) ProtoMessage() {}

func (x *ThreadCpuUsageList) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadCpuUsageList.ProtoReflect.Descriptor instead.
func (*ThreadCpuUsageList) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{147}
}

func (x *ThreadCpuUsageList) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ThreadCpuUsageList) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *ThreadCpuUsageList) GetThreadUsage() []*ThreadCpuUsage {
	if x != nil {
		return x.ThreadUsage
	}
	return nil
}

//The time of each clock at the same moment can be used to convert the absTime of the data into the time of other clocks
//同一时刻各个时钟的时间,可以用来将数据的absTime转成其他时钟的时间
type ClockSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockOfData    int64 `protobuf:"varint,1,opt,name=clockOfData,proto3" json:"clockOfData,omitempty"`       //absTime对应的时钟,ns, The clock corresponding to absTime, ns
	ClockMonotonic int64 `protobuf:"varint,2,opt,name=clockMonotonic,proto3" json:"clockMonotonic,omitempty"` //CLOCK_MONOTONIC,ns
}

func (x *ClockSnapshot) Reset() {
	*x = ClockSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockSnapshot) ProtoMessage() {}

func (x *ClockSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockSnapshot.ProtoReflect.Descriptor instead.
func (*ClockSnapshot) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{148}
}

func (x *ClockSnapshot) GetClockOfData() int64 {
	if x != nil {
		return x.ClockOfData
	}
	return 0
}

func (x *ClockSnapshot) GetClockMonotonic() int64 {
	if x != nil {
		return x.ClockMonotonic
	}
	return 0
}

//The time it takes for the APP to display the first frame
//APP启动到首屏的时间
type AppLaunchingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName string `protobuf:"bytes,1,opt,name=componentName,proto3" json:"componentName,omitempty"`
	TimeMs        int32  `protobuf:"varint,2,opt,name=timeMs,proto3" json:"timeMs,omitempty"`
}

func (x *AppLaunchingTime) Reset() {
	*x = AppLaunchingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppLaunchingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppLaunchingTime) ProtoMessage() {}

func (x *AppLaunchingTime) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppLaunchingTime.ProtoReflect.Descriptor instead.
func (*AppLaunchingTime) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{149}
}

func (x *AppLaunchingTime) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *AppLaunchingTime) GetTimeMs() int32 {
	if x != nil {
		return x.TimeMs
	}
	return 0
}

//The time from when the APP starts to when the user calls Activity.reportFullyDrawn()
//APP启动到用户调用Activity.reportFullyDrawn()的时间
type AppFullyDrawnTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentName string `protobuf:"bytes,1,opt,name=componentName,proto3" json:"componentName,omitempty"`
	TimeMs        int32  `protobuf:"varint,2,opt,name=timeMs,proto3" json:"timeMs,omitempty"`
}

func (x *AppFullyDrawnTime) Reset() {
	*x = AppFullyDrawnTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppFullyDrawnTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppFullyDrawnTime) ProtoMessage() {}

func (x *AppFullyDrawnTime) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppFullyDrawnTime.ProtoReflect.Descriptor instead.
func (*AppFullyDrawnTime) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{150}
}

func (x *AppFullyDrawnTime) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *AppFullyDrawnTime) GetTimeMs() int32 {
	if x != nil {
		return x.TimeMs
	}
	return 0
}

type ScreenBrightness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Value   int32 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ScreenBrightness) Reset() {
	*x = ScreenBrightness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenBrightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenBrightness) ProtoMessage() {}

func (x *ScreenBrightness) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenBrightness.ProtoReflect.Descriptor instead.
func (*ScreenBrightness) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{151}
}

func (x *ScreenBrightness) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ScreenBrightness) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *ScreenBrightness) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type BatteryLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time       int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime    int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Percentage int32 `protobuf:"varint,3,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *BatteryLevel) Reset() {
	*x = BatteryLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryLevel) ProtoMessage() {}

func (x *BatteryLevel) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryLevel.ProtoReflect.Descriptor instead.
func (*BatteryLevel) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{152}
}

func (x *BatteryLevel) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BatteryLevel) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *BatteryLevel) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type TestingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*TestingInfo_TaskName
	//	*TestingInfo_ProcessName
	Value isTestingInfo_Value `protobuf_oneof:"value"`
}

func (x *TestingInfo) Reset() {
	*x = TestingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestingInfo) ProtoMessage() {}

func (x *TestingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestingInfo.ProtoReflect.Descriptor instead.
func (*TestingInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{153}
}

func (m *TestingInfo) GetValue() isTestingInfo_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TestingInfo) GetTaskName() string {
	if x, ok := x.GetValue().(*TestingInfo_TaskName); ok {
		return x.TaskName
	}
	return ""
}

func (x *TestingInfo) GetProcessName() string {
	if x, ok := x.GetValue().(*TestingInfo_ProcessName); ok {
		return x.ProcessName
	}
	return ""
}

type isTestingInfo_Value interface {
	isTestingInfo_Value()
}

type TestingInfo_TaskName struct {
	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3,oneof"`
}

type TestingInfo_ProcessName struct {
	ProcessName string `protobuf:"bytes,2,opt,name=processName,proto3,oneof"`
}

func (*TestingInfo_TaskName) isTestingInfo_Value() {}

func (*TestingInfo_ProcessName) isTestingInfo_Value() {}

type CpuThrottlingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time           int64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime        int64   `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Core           int32   `protobuf:"varint,3,opt,name=core,proto3" json:"core,omitempty"`
	ScalingMaxFreq int32   `protobuf:"varint,4,opt,name=scalingMaxFreq,proto3" json:"scalingMaxFreq,omitempty"`
	Percentage     float64 `protobuf:"fixed64,5,opt,name=percentage,proto3" json:"percentage,omitempty"`
}

func (x *CpuThrottlingData) Reset() {
	*x = CpuThrottlingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuThrottlingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuThrottlingData) ProtoMessage() {}

func (x *CpuThrottlingData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuThrottlingData.ProtoReflect.Descriptor instead.
func (*CpuThrottlingData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{154}
}

func (x *CpuThrottlingData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CpuThrottlingData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *CpuThrottlingData) GetCore() int32 {
	if x != nil {
		return x.Core
	}
	return 0
}

func (x *CpuThrottlingData) GetScalingMaxFreq() int32 {
	if x != nil {
		return x.ScalingMaxFreq
	}
	return 0
}

func (x *CpuThrottlingData) GetPercentage() float64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

type FrameGeneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	DifferFrame int32 `protobuf:"varint,3,opt,name=differFrame,proto3" json:"differFrame,omitempty"`
	RepeatFrame int32 `protobuf:"varint,4,opt,name=repeatFrame,proto3" json:"repeatFrame,omitempty"`
}

func (x *FrameGeneration) Reset() {
	*x = FrameGeneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameGeneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameGeneration) ProtoMessage() {}

func (x *FrameGeneration) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameGeneration.ProtoReflect.Descriptor instead.
func (*FrameGeneration) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{155}
}

func (x *FrameGeneration) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FrameGeneration) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *FrameGeneration) GetDifferFrame() int32 {
	if x != nil {
		return x.DifferFrame
	}
	return 0
}

func (x *FrameGeneration) GetRepeatFrame() int32 {
	if x != nil {
		return x.RepeatFrame
	}
	return 0
}

type AndroidPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*AndroidPerfData_FpsData
	//	*AndroidPerfData_FrameTimeData
	//	*AndroidPerfData_JankData
	//	*AndroidPerfData_AndroidGpuUsageData
	//	*AndroidPerfData_GpuFreqData
	//	*AndroidPerfData_AndroidMemData
	//	*AndroidPerfData_CoreUsageData
	//	*AndroidPerfData_CpuFreqData
	//	*AndroidPerfData_CpuUsageData
	//	*AndroidPerfData_CpuTempData
	//	*AndroidPerfData_BatteryData
	//	*AndroidPerfData_NetworkData
	//	*AndroidPerfData_SyslogData
	//	*AndroidPerfData_ScreenShotData
	//	*AndroidPerfData_NormalizedCpuUsageData
	//	*AndroidPerfData_NormalizedCpuCoreUsageData
	//	*AndroidPerfData_MaliGpuCounterBasic
	//	*AndroidPerfData_MaliGpuCounterShader
	//	*AndroidPerfData_MaliGpuCounterMemory
	//	*AndroidPerfData_QcomGpuCounterBasic
	//	*AndroidPerfData_QcomGpuCounterMemory
	//	*AndroidPerfData_QcomGpuCounterShader
	//	*AndroidPerfData_PvrGpuCounterBasic
	//	*AndroidPerfData_PvrGpuCounterMemory
	//	*AndroidPerfData_PvrGpuCounterShader
	//	*AndroidPerfData_PerFramePowerConsumption
	//	*AndroidPerfData_BatteryTempData
	//	*AndroidPerfData_GpuTempData
	//	*AndroidPerfData_NpuTempData
	//	*AndroidPerfData_DeepProfilingData
	//	*AndroidPerfData_CustomDataList
	//	*AndroidPerfData_DynamicDataList
	//	*AndroidPerfData_AndroidMemDetailData
	//	*AndroidPerfData_NetworkProfilingData
	//	*AndroidPerfData_ThreadCpuUsageList
	//	*AndroidPerfData_ClockSnapshot
	//	*AndroidPerfData_AppLaunchingTime
	//	*AndroidPerfData_AppFullyDrawnTime
	//	*AndroidPerfData_ScreenBrightness
	//	*AndroidPerfData_BatteryLevel
	//	*AndroidPerfData_TestingInfo
	//	*AndroidPerfData_CpuThrottlingData
	//	*AndroidPerfData_FrameGeneration
	Value isAndroidPerfData_Value `protobuf_oneof:"value"`
}

func (x *AndroidPerfData) Reset() {
	*x = AndroidPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidPerfData) ProtoMessage() {}

func (x *AndroidPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidPerfData.ProtoReflect.Descriptor instead.
func (*AndroidPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{156}
}

func (m *AndroidPerfData) GetValue() isAndroidPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AndroidPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*AndroidPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *AndroidPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*AndroidPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *AndroidPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*AndroidPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *AndroidPerfData) GetAndroidGpuUsageData() *AndroidGpuUsageData {
	if x, ok := x.GetValue().(*AndroidPerfData_AndroidGpuUsageData); ok {
		return x.AndroidGpuUsageData
	}
	return nil
}

func (x *AndroidPerfData) GetGpuFreqData() *GpuFreqData {
	if x, ok := x.GetValue().(*AndroidPerfData_GpuFreqData); ok {
		return x.GpuFreqData
	}
	return nil
}

func (x *AndroidPerfData) GetAndroidMemData() *AndroidMemData {
	if x, ok := x.GetValue().(*AndroidPerfData_AndroidMemData); ok {
		return x.AndroidMemData
	}
	return nil
}

func (x *AndroidPerfData) GetCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*AndroidPerfData_CoreUsageData); ok {
		return x.CoreUsageData
	}
	return nil
}

func (x *AndroidPerfData) GetCpuFreqData() *CpuFreqData {
	if x, ok := x.GetValue().(*AndroidPerfData_CpuFreqData); ok {
		return x.CpuFreqData
	}
	return nil
}

func (x *AndroidPerfData) GetCpuUsageData() *CpuUsageData {
	if x, ok := x.GetValue().(*AndroidPerfData_CpuUsageData); ok {
		return x.CpuUsageData
	}
	return nil
}

func (x *AndroidPerfData) GetCpuTempData() *CpuTempData {
	if x, ok := x.GetValue().(*AndroidPerfData_CpuTempData); ok {
		return x.CpuTempData
	}
	return nil
}

func (x *AndroidPerfData) GetBatteryData() *BatteryData {
	if x, ok := x.GetValue().(*AndroidPerfData_BatteryData); ok {
		return x.BatteryData
	}
	return nil
}

func (x *AndroidPerfData) GetNetworkData() *NetworkData {
	if x, ok := x.GetValue().(*AndroidPerfData_NetworkData); ok {
		return x.NetworkData
	}
	return nil
}

func (x *AndroidPerfData) GetSyslogData() *SyslogData {
	if x, ok := x.GetValue().(*AndroidPerfData_SyslogData); ok {
		return x.SyslogData
	}
	return nil
}

func (x *AndroidPerfData) GetScreenShotData() *ScreenShotData {
	if x, ok := x.GetValue().(*AndroidPerfData_ScreenShotData); ok {
		return x.ScreenShotData
	}
	return nil
}

func (x *AndroidPerfData) GetNormalizedCpuUsageData() *CpuUsageData {
	if x, ok := x.GetValue().(*AndroidPerfData_NormalizedCpuUsageData); ok {
		return x.NormalizedCpuUsageData
	}
	return nil
}

func (x *AndroidPerfData) GetNormalizedCpuCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*AndroidPerfData_NormalizedCpuCoreUsageData); ok {
		return x.NormalizedCpuCoreUsageData
	}
	return nil
}

func (x *AndroidPerfData) GetMaliGpuCounterBasic() *MaliGpuCounterBasic {
	if x, ok := x.GetValue().(*AndroidPerfData_MaliGpuCounterBasic); ok {
		return x.MaliGpuCounterBasic
	}
	return nil
}

func (x *AndroidPerfData) GetMaliGpuCounterShader() *MaliGpuCounterShader {
	if x, ok := x.GetValue().(*AndroidPerfData_MaliGpuCounterShader); ok {
		return x.MaliGpuCounterShader
	}
	return nil
}

func (x *AndroidPerfData) GetMaliGpuCounterMemory() *MaliGpuCounterMemory {
	if x, ok := x.GetValue().(*AndroidPerfData_MaliGpuCounterMemory); ok {
		return x.MaliGpuCounterMemory
	}
	return nil
}

func (x *AndroidPerfData) GetQcomGpuCounterBasic() *QComGpuCounterBasic {
	if x, ok := x.GetValue().(*AndroidPerfData_QcomGpuCounterBasic); ok {
		return x.QcomGpuCounterBasic
	}
	return nil
}

func (x *AndroidPerfData) GetQcomGpuCounterMemory() *QComGpuCounterMemory {
	if x, ok := x.GetValue().(*AndroidPerfData_QcomGpuCounterMemory); ok {
		return x.QcomGpuCounterMemory
	}
	return nil
}

func (x *AndroidPerfData) GetQcomGpuCounterShader() *QComGpuCounterShader {
	if x, ok := x.GetValue().(*AndroidPerfData_QcomGpuCounterShader); ok {
		return x.QcomGpuCounterShader
	}
	return nil
}

func (x *AndroidPerfData) GetPvrGpuCounterBasic() *PVRGpuCounterBasic {
	if x, ok := x.GetValue().(*AndroidPerfData_PvrGpuCounterBasic); ok {
		return x.PvrGpuCounterBasic
	}
	return nil
}

func (x *AndroidPerfData) GetPvrGpuCounterMemory() *PVRGpuCounterMemory {
	if x, ok := x.GetValue().(*AndroidPerfData_PvrGpuCounterMemory); ok {
		return x.PvrGpuCounterMemory
	}
	return nil
}

func (x *AndroidPerfData) GetPvrGpuCounterShader() *PVRGpuCounterShader {
	if x, ok := x.GetValue().(*AndroidPerfData_PvrGpuCounterShader); ok {
		return x.PvrGpuCounterShader
	}
	return nil
}

func (x *AndroidPerfData) GetPerFramePowerConsumption() *PerFramePowerConsumption {
	if x, ok := x.GetValue().(*AndroidPerfData_PerFramePowerConsumption); ok {
		return x.PerFramePowerConsumption
	}
	return nil
}

func (x *AndroidPerfData) GetBatteryTempData() *BatteryTempData {
	if x, ok := x.GetValue().(*AndroidPerfData_BatteryTempData); ok {
		return x.BatteryTempData
	}
	return nil
}

func (x *AndroidPerfData) GetGpuTempData() *GpuTempData {
	if x, ok := x.GetValue().(*AndroidPerfData_GpuTempData); ok {
		return x.GpuTempData
	}
	return nil
}

func (x *AndroidPerfData) GetNpuTempData() *NpuTempData {
	if x, ok := x.GetValue().(*AndroidPerfData_NpuTempData); ok {
		return x.NpuTempData
	}
	return nil
}

func (x *AndroidPerfData) GetDeepProfilingData() *DeepProfilingData {
	if x, ok := x.GetValue().(*AndroidPerfData_DeepProfilingData); ok {
		return x.DeepProfilingData
	}
	return nil
}

func (x *AndroidPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*AndroidPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

func (x *AndroidPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*AndroidPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

func (x *AndroidPerfData) GetAndroidMemDetailData() *AndroidMemDetailData {
	if x, ok := x.GetValue().(*AndroidPerfData_AndroidMemDetailData); ok {
		return x.AndroidMemDetailData
	}
	return nil
}

func (x *AndroidPerfData) GetNetworkProfilingData() *NetworkProfilingData {
	if x, ok := x.GetValue().(*AndroidPerfData_NetworkProfilingData); ok {
		return x.NetworkProfilingData
	}
	return nil
}

func (x *AndroidPerfData) GetThreadCpuUsageList() *ThreadCpuUsageList {
	if x, ok := x.GetValue().(*AndroidPerfData_ThreadCpuUsageList); ok {
		return x.ThreadCpuUsageList
	}
	return nil
}

func (x *AndroidPerfData) GetClockSnapshot() *ClockSnapshot {
	if x, ok := x.GetValue().(*AndroidPerfData_ClockSnapshot); ok {
		return x.ClockSnapshot
	}
	return nil
}

func (x *AndroidPerfData) GetAppLaunchingTime() *AppLaunchingTime {
	if x, ok := x.GetValue().(*AndroidPerfData_AppLaunchingTime); ok {
		return x.AppLaunchingTime
	}
	return nil
}

func (x *AndroidPerfData) GetAppFullyDrawnTime() *AppFullyDrawnTime {
	if x, ok := x.GetValue().(*AndroidPerfData_AppFullyDrawnTime); ok {
		return x.AppFullyDrawnTime
	}
	return nil
}

func (x *AndroidPerfData) GetScreenBrightness() *ScreenBrightness {
	if x, ok := x.GetValue().(*AndroidPerfData_ScreenBrightness); ok {
		return x.ScreenBrightness
	}
	return nil
}

func (x *AndroidPerfData) GetBatteryLevel() *BatteryLevel {
	if x, ok := x.GetValue().(*AndroidPerfData_BatteryLevel); ok {
		return x.BatteryLevel
	}
	return nil
}

func (x *AndroidPerfData) GetTestingInfo() *TestingInfo {
	if x, ok := x.GetValue().(*AndroidPerfData_TestingInfo); ok {
		return x.TestingInfo
	}
	return nil
}

func (x *AndroidPerfData) GetCpuThrottlingData() *CpuThrottlingData {
	if x, ok := x.GetValue().(*AndroidPerfData_CpuThrottlingData); ok {
		return x.CpuThrottlingData
	}
	return nil
}

func (x *AndroidPerfData) GetFrameGeneration() *FrameGeneration {
	if x, ok := x.GetValue().(*AndroidPerfData_FrameGeneration); ok {
		return x.FrameGeneration
	}
	return nil
}

type isAndroidPerfData_Value interface {
	isAndroidPerfData_Value()
}

type AndroidPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type AndroidPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,2,opt,name=frameTimeData,proto3,oneof"`
}

type AndroidPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,3,opt,name=jankData,proto3,oneof"`
}

type AndroidPerfData_AndroidGpuUsageData struct {
	AndroidGpuUsageData *AndroidGpuUsageData `protobuf:"bytes,4,opt,name=androidGpuUsageData,proto3,oneof"`
}

type AndroidPerfData_GpuFreqData struct {
	GpuFreqData *GpuFreqData `protobuf:"bytes,5,opt,name=gpuFreqData,proto3,oneof"`
}

type AndroidPerfData_AndroidMemData struct {
	AndroidMemData *AndroidMemData `protobuf:"bytes,6,opt,name=androidMemData,proto3,oneof"`
}

type AndroidPerfData_CoreUsageData struct {
	//AndroidMemDetailData androidMemDetailData = 7;
	CoreUsageData *CoreUsageData `protobuf:"bytes,8,opt,name=coreUsageData,proto3,oneof"`
}

type AndroidPerfData_CpuFreqData struct {
	CpuFreqData *CpuFreqData `protobuf:"bytes,9,opt,name=cpuFreqData,proto3,oneof"`
}

type AndroidPerfData_CpuUsageData struct {
	CpuUsageData *CpuUsageData `protobuf:"bytes,10,opt,name=cpuUsageData,proto3,oneof"`
}

type AndroidPerfData_CpuTempData struct {
	CpuTempData *CpuTempData `protobuf:"bytes,11,opt,name=cpuTempData,proto3,oneof"`
}

type AndroidPerfData_BatteryData struct {
	BatteryData *BatteryData `protobuf:"bytes,12,opt,name=batteryData,proto3,oneof"`
}

type AndroidPerfData_NetworkData struct {
	NetworkData *NetworkData `protobuf:"bytes,13,opt,name=networkData,proto3,oneof"`
}

type AndroidPerfData_SyslogData struct {
	SyslogData *SyslogData `protobuf:"bytes,14,opt,name=syslogData,proto3,oneof"`
}

type AndroidPerfData_ScreenShotData struct {
	ScreenShotData *ScreenShotData `protobuf:"bytes,15,opt,name=screenShotData,proto3,oneof"`
}

type AndroidPerfData_NormalizedCpuUsageData struct {
	NormalizedCpuUsageData *CpuUsageData `protobuf:"bytes,16,opt,name=normalizedCpuUsageData,proto3,oneof"`
}

type AndroidPerfData_NormalizedCpuCoreUsageData struct {
	NormalizedCpuCoreUsageData *CoreUsageData `protobuf:"bytes,17,opt,name=normalizedCpuCoreUsageData,proto3,oneof"`
}

type AndroidPerfData_MaliGpuCounterBasic struct {
	MaliGpuCounterBasic *MaliGpuCounterBasic `protobuf:"bytes,18,opt,name=maliGpuCounterBasic,proto3,oneof"`
}

type AndroidPerfData_MaliGpuCounterShader struct {
	MaliGpuCounterShader *MaliGpuCounterShader `protobuf:"bytes,19,opt,name=maliGpuCounterShader,proto3,oneof"`
}

type AndroidPerfData_MaliGpuCounterMemory struct {
	MaliGpuCounterMemory *MaliGpuCounterMemory `protobuf:"bytes,20,opt,name=maliGpuCounterMemory,proto3,oneof"`
}

type AndroidPerfData_QcomGpuCounterBasic struct {
	QcomGpuCounterBasic *QComGpuCounterBasic `protobuf:"bytes,21,opt,name=qcomGpuCounterBasic,proto3,oneof"`
}

type AndroidPerfData_QcomGpuCounterMemory struct {
	QcomGpuCounterMemory *QComGpuCounterMemory `protobuf:"bytes,22,opt,name=qcomGpuCounterMemory,proto3,oneof"`
}

type AndroidPerfData_QcomGpuCounterShader struct {
	QcomGpuCounterShader *QComGpuCounterShader `protobuf:"bytes,23,opt,name=qcomGpuCounterShader,proto3,oneof"`
}

type AndroidPerfData_PvrGpuCounterBasic struct {
	PvrGpuCounterBasic *PVRGpuCounterBasic `protobuf:"bytes,24,opt,name=pvrGpuCounterBasic,proto3,oneof"`
}

type AndroidPerfData_PvrGpuCounterMemory struct {
	PvrGpuCounterMemory *PVRGpuCounterMemory `protobuf:"bytes,25,opt,name=pvrGpuCounterMemory,proto3,oneof"`
}

type AndroidPerfData_PvrGpuCounterShader struct {
	PvrGpuCounterShader *PVRGpuCounterShader `protobuf:"bytes,26,opt,name=pvrGpuCounterShader,proto3,oneof"`
}

type AndroidPerfData_PerFramePowerConsumption struct {
	PerFramePowerConsumption *PerFramePowerConsumption `protobuf:"bytes,28,opt,name=perFramePowerConsumption,proto3,oneof"`
}

type AndroidPerfData_BatteryTempData struct {
	BatteryTempData *BatteryTempData `protobuf:"bytes,29,opt,name=batteryTempData,proto3,oneof"`
}

type AndroidPerfData_GpuTempData struct {
	GpuTempData *GpuTempData `protobuf:"bytes,30,opt,name=gpuTempData,proto3,oneof"`
}

type AndroidPerfData_NpuTempData struct {
	NpuTempData *NpuTempData `protobuf:"bytes,31,opt,name=npuTempData,proto3,oneof"`
}

type AndroidPerfData_DeepProfilingData struct {
	DeepProfilingData *DeepProfilingData `protobuf:"bytes,32,opt,name=deepProfilingData,proto3,oneof"`
}

type AndroidPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,33,opt,name=customDataList,proto3,oneof"`
}

type AndroidPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,34,opt,name=dynamicDataList,proto3,oneof"`
}

type AndroidPerfData_AndroidMemDetailData struct {
	AndroidMemDetailData *AndroidMemDetailData `protobuf:"bytes,35,opt,name=androidMemDetailData,proto3,oneof"`
}

type AndroidPerfData_NetworkProfilingData struct {
	NetworkProfilingData *NetworkProfilingData `protobuf:"bytes,36,opt,name=NetworkProfilingData,proto3,oneof"`
}

type AndroidPerfData_ThreadCpuUsageList struct {
	ThreadCpuUsageList *ThreadCpuUsageList `protobuf:"bytes,37,opt,name=ThreadCpuUsageList,proto3,oneof"`
}

type AndroidPerfData_ClockSnapshot struct {
	ClockSnapshot *ClockSnapshot `protobuf:"bytes,38,opt,name=ClockSnapshot,proto3,oneof"`
}

type AndroidPerfData_AppLaunchingTime struct {
	AppLaunchingTime *AppLaunchingTime `protobuf:"bytes,39,opt,name=AppLaunchingTime,proto3,oneof"`
}

type AndroidPerfData_AppFullyDrawnTime struct {
	AppFullyDrawnTime *AppFullyDrawnTime `protobuf:"bytes,40,opt,name=AppFullyDrawnTime,proto3,oneof"`
}

type AndroidPerfData_ScreenBrightness struct {
	ScreenBrightness *ScreenBrightness `protobuf:"bytes,41,opt,name=ScreenBrightness,proto3,oneof"`
}

type AndroidPerfData_BatteryLevel struct {
	BatteryLevel *BatteryLevel `protobuf:"bytes,42,opt,name=BatteryLevel,proto3,oneof"`
}

type AndroidPerfData_TestingInfo struct {
	TestingInfo *TestingInfo `protobuf:"bytes,43,opt,name=testingInfo,proto3,oneof"`
}

type AndroidPerfData_CpuThrottlingData struct {
	CpuThrottlingData *CpuThrottlingData `protobuf:"bytes,44,opt,name=cpuThrottlingData,proto3,oneof"`
}

type AndroidPerfData_FrameGeneration struct {
	FrameGeneration *FrameGeneration `protobuf:"bytes,45,opt,name=frameGeneration,proto3,oneof"`
}

func (*AndroidPerfData_FpsData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_FrameTimeData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_JankData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_AndroidGpuUsageData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_GpuFreqData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_AndroidMemData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CoreUsageData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CpuFreqData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CpuUsageData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CpuTempData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_BatteryData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_NetworkData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_SyslogData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_ScreenShotData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_NormalizedCpuUsageData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_NormalizedCpuCoreUsageData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_MaliGpuCounterBasic) isAndroidPerfData_Value() {}

func (*AndroidPerfData_MaliGpuCounterShader) isAndroidPerfData_Value() {}

func (*AndroidPerfData_MaliGpuCounterMemory) isAndroidPerfData_Value() {}

func (*AndroidPerfData_QcomGpuCounterBasic) isAndroidPerfData_Value() {}

func (*AndroidPerfData_QcomGpuCounterMemory) isAndroidPerfData_Value() {}

func (*AndroidPerfData_QcomGpuCounterShader) isAndroidPerfData_Value() {}

func (*AndroidPerfData_PvrGpuCounterBasic) isAndroidPerfData_Value() {}

func (*AndroidPerfData_PvrGpuCounterMemory) isAndroidPerfData_Value() {}

func (*AndroidPerfData_PvrGpuCounterShader) isAndroidPerfData_Value() {}

func (*AndroidPerfData_PerFramePowerConsumption) isAndroidPerfData_Value() {}

func (*AndroidPerfData_BatteryTempData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_GpuTempData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_NpuTempData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_DeepProfilingData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CustomDataList) isAndroidPerfData_Value() {}

func (*AndroidPerfData_DynamicDataList) isAndroidPerfData_Value() {}

func (*AndroidPerfData_AndroidMemDetailData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_NetworkProfilingData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_ThreadCpuUsageList) isAndroidPerfData_Value() {}

func (*AndroidPerfData_ClockSnapshot) isAndroidPerfData_Value() {}

func (*AndroidPerfData_AppLaunchingTime) isAndroidPerfData_Value() {}

func (*AndroidPerfData_AppFullyDrawnTime) isAndroidPerfData_Value() {}

func (*AndroidPerfData_ScreenBrightness) isAndroidPerfData_Value() {}

func (*AndroidPerfData_BatteryLevel) isAndroidPerfData_Value() {}

func (*AndroidPerfData_TestingInfo) isAndroidPerfData_Value() {}

func (*AndroidPerfData_CpuThrottlingData) isAndroidPerfData_Value() {}

func (*AndroidPerfData_FrameGeneration) isAndroidPerfData_Value() {}

type IosPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*IosPerfData_FpsData
	//	*IosPerfData_FrameTimeData
	//	*IosPerfData_JankData
	//	*IosPerfData_IosGpuUsageData
	//	*IosPerfData_Ios10MemData
	//	*IosPerfData_Ios11MemData
	//	*IosPerfData_CpuUsageData
	//	*IosPerfData_CtxSwitchData
	//	*IosPerfData_WakeupsData
	//	*IosPerfData_BatteryData
	//	*IosPerfData_NetworkData
	//	*IosPerfData_SyslogData
	//	*IosPerfData_ScreenShotData
	//	*IosPerfData_IosEnergyUsageData
	//	*IosPerfData_BatteryTempData
	//	*IosPerfData_IosGPUCounterBasic
	//	*IosPerfData_IosGPUCounterMemory
	//	*IosPerfData_IosGPUCounterShader
	//	*IosPerfData_IosSampleCount
	//	*IosPerfData_DeviceNetworkData
	//	*IosPerfData_PerFramePowerConsumption
	//	*IosPerfData_DeepProfilingData
	//	*IosPerfData_CustomDataList
	//	*IosPerfData_DynamicDataList
	Value isIosPerfData_Value `protobuf_oneof:"value"`
}

func (x *IosPerfData) Reset() {
	*x = IosPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosPerfData) ProtoMessage() {}

func (x *IosPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosPerfData.ProtoReflect.Descriptor instead.
func (*IosPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{157}
}

func (m *IosPerfData) GetValue() isIosPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *IosPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*IosPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *IosPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*IosPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *IosPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*IosPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *IosPerfData) GetIosGpuUsageData() *IosGpuUsageData {
	if x, ok := x.GetValue().(*IosPerfData_IosGpuUsageData); ok {
		return x.IosGpuUsageData
	}
	return nil
}

func (x *IosPerfData) GetIos10MemData() *Ios10MemData {
	if x, ok := x.GetValue().(*IosPerfData_Ios10MemData); ok {
		return x.Ios10MemData
	}
	return nil
}

func (x *IosPerfData) GetIos11MemData() *Ios11MemData {
	if x, ok := x.GetValue().(*IosPerfData_Ios11MemData); ok {
		return x.Ios11MemData
	}
	return nil
}

func (x *IosPerfData) GetCpuUsageData() *CpuUsageData {
	if x, ok := x.GetValue().(*IosPerfData_CpuUsageData); ok {
		return x.CpuUsageData
	}
	return nil
}

func (x *IosPerfData) GetCtxSwitchData() *CtxSwitchData {
	if x, ok := x.GetValue().(*IosPerfData_CtxSwitchData); ok {
		return x.CtxSwitchData
	}
	return nil
}

func (x *IosPerfData) GetWakeupsData() *WakeupsData {
	if x, ok := x.GetValue().(*IosPerfData_WakeupsData); ok {
		return x.WakeupsData
	}
	return nil
}

func (x *IosPerfData) GetBatteryData() *BatteryData {
	if x, ok := x.GetValue().(*IosPerfData_BatteryData); ok {
		return x.BatteryData
	}
	return nil
}

func (x *IosPerfData) GetNetworkData() *NetworkData {
	if x, ok := x.GetValue().(*IosPerfData_NetworkData); ok {
		return x.NetworkData
	}
	return nil
}

func (x *IosPerfData) GetSyslogData() *SyslogData {
	if x, ok := x.GetValue().(*IosPerfData_SyslogData); ok {
		return x.SyslogData
	}
	return nil
}

func (x *IosPerfData) GetScreenShotData() *ScreenShotData {
	if x, ok := x.GetValue().(*IosPerfData_ScreenShotData); ok {
		return x.ScreenShotData
	}
	return nil
}

func (x *IosPerfData) GetIosEnergyUsageData() *IosEnergyUsageData {
	if x, ok := x.GetValue().(*IosPerfData_IosEnergyUsageData); ok {
		return x.IosEnergyUsageData
	}
	return nil
}

func (x *IosPerfData) GetBatteryTempData() *BatteryTempData {
	if x, ok := x.GetValue().(*IosPerfData_BatteryTempData); ok {
		return x.BatteryTempData
	}
	return nil
}

func (x *IosPerfData) GetIosGPUCounterBasic() *IosGPUCounterBasics {
	if x, ok := x.GetValue().(*IosPerfData_IosGPUCounterBasic); ok {
		return x.IosGPUCounterBasic
	}
	return nil
}

func (x *IosPerfData) GetIosGPUCounterMemory() *IosGPUCounterMemory {
	if x, ok := x.GetValue().(*IosPerfData_IosGPUCounterMemory); ok {
		return x.IosGPUCounterMemory
	}
	return nil
}

func (x *IosPerfData) GetIosGPUCounterShader() *IosGPUCounterShader {
	if x, ok := x.GetValue().(*IosPerfData_IosGPUCounterShader); ok {
		return x.IosGPUCounterShader
	}
	return nil
}

func (x *IosPerfData) GetIosSampleCount() *IosGPUCounterSampleCount {
	if x, ok := x.GetValue().(*IosPerfData_IosSampleCount); ok {
		return x.IosSampleCount
	}
	return nil
}

func (x *IosPerfData) GetDeviceNetworkData() *NetworkData {
	if x, ok := x.GetValue().(*IosPerfData_DeviceNetworkData); ok {
		return x.DeviceNetworkData
	}
	return nil
}

func (x *IosPerfData) GetPerFramePowerConsumption() *PerFramePowerConsumption {
	if x, ok := x.GetValue().(*IosPerfData_PerFramePowerConsumption); ok {
		return x.PerFramePowerConsumption
	}
	return nil
}

func (x *IosPerfData) GetDeepProfilingData() *DeepProfilingData {
	if x, ok := x.GetValue().(*IosPerfData_DeepProfilingData); ok {
		return x.DeepProfilingData
	}
	return nil
}

func (x *IosPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*IosPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

func (x *IosPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*IosPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

type isIosPerfData_Value interface {
	isIosPerfData_Value()
}

type IosPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type IosPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,2,opt,name=frameTimeData,proto3,oneof"`
}

type IosPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,3,opt,name=jankData,proto3,oneof"`
}

type IosPerfData_IosGpuUsageData struct {
	IosGpuUsageData *IosGpuUsageData `protobuf:"bytes,4,opt,name=iosGpuUsageData,proto3,oneof"`
}

type IosPerfData_Ios10MemData struct {
	Ios10MemData *Ios10MemData `protobuf:"bytes,5,opt,name=ios10MemData,proto3,oneof"` // 系统版本为iOS10及iOS10之前的设备返回的内存信息, Memory information returned by devices whose system version is iOS10 and before iOS10
}

type IosPerfData_Ios11MemData struct {
	Ios11MemData *Ios11MemData `protobuf:"bytes,6,opt,name=ios11MemData,proto3,oneof"` // 系统版本为iOS11及iOS11之后的设备返回的内存信息, Memory information returned by devices whose system version is iOS11 and after iOS11
}

type IosPerfData_CpuUsageData struct {
	CpuUsageData *CpuUsageData `protobuf:"bytes,7,opt,name=cpuUsageData,proto3,oneof"`
}

type IosPerfData_CtxSwitchData struct {
	CtxSwitchData *CtxSwitchData `protobuf:"bytes,8,opt,name=ctxSwitchData,proto3,oneof"`
}

type IosPerfData_WakeupsData struct {
	WakeupsData *WakeupsData `protobuf:"bytes,9,opt,name=wakeupsData,proto3,oneof"`
}

type IosPerfData_BatteryData struct {
	BatteryData *BatteryData `protobuf:"bytes,10,opt,name=batteryData,proto3,oneof"`
}

type IosPerfData_NetworkData struct {
	NetworkData *NetworkData `protobuf:"bytes,11,opt,name=networkData,proto3,oneof"`
}

type IosPerfData_SyslogData struct {
	SyslogData *SyslogData `protobuf:"bytes,12,opt,name=syslogData,proto3,oneof"`
}

type IosPerfData_ScreenShotData struct {
	ScreenShotData *ScreenShotData `protobuf:"bytes,13,opt,name=screenShotData,proto3,oneof"`
}

type IosPerfData_IosEnergyUsageData struct {
	IosEnergyUsageData *IosEnergyUsageData `protobuf:"bytes,14,opt,name=iosEnergyUsageData,proto3,oneof"`
}

type IosPerfData_BatteryTempData struct {
	BatteryTempData *BatteryTempData `protobuf:"bytes,15,opt,name=batteryTempData,proto3,oneof"`
}

type IosPerfData_IosGPUCounterBasic struct {
	IosGPUCounterBasic *IosGPUCounterBasics `protobuf:"bytes,16,opt,name=iosGPUCounterBasic,proto3,oneof"`
}

type IosPerfData_IosGPUCounterMemory struct {
	IosGPUCounterMemory *IosGPUCounterMemory `protobuf:"bytes,17,opt,name=iosGPUCounterMemory,proto3,oneof"`
}

type IosPerfData_IosGPUCounterShader struct {
	IosGPUCounterShader *IosGPUCounterShader `protobuf:"bytes,18,opt,name=iosGPUCounterShader,proto3,oneof"`
}

type IosPerfData_IosSampleCount struct {
	IosSampleCount *IosGPUCounterSampleCount `protobuf:"bytes,19,opt,name=iosSampleCount,proto3,oneof"`
}

type IosPerfData_DeviceNetworkData struct {
	DeviceNetworkData *NetworkData `protobuf:"bytes,20,opt,name=deviceNetworkData,proto3,oneof"`
}

type IosPerfData_PerFramePowerConsumption struct {
	PerFramePowerConsumption *PerFramePowerConsumption `protobuf:"bytes,21,opt,name=perFramePowerConsumption,proto3,oneof"`
}

type IosPerfData_DeepProfilingData struct {
	DeepProfilingData *DeepProfilingData `protobuf:"bytes,22,opt,name=deepProfilingData,proto3,oneof"`
}

type IosPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,23,opt,name=customDataList,proto3,oneof"`
}

type IosPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,24,opt,name=dynamicDataList,proto3,oneof"`
}

func (*IosPerfData_FpsData) isIosPerfData_Value() {}

func (*IosPerfData_FrameTimeData) isIosPerfData_Value() {}

func (*IosPerfData_JankData) isIosPerfData_Value() {}

func (*IosPerfData_IosGpuUsageData) isIosPerfData_Value() {}

func (*IosPerfData_Ios10MemData) isIosPerfData_Value() {}

func (*IosPerfData_Ios11MemData) isIosPerfData_Value() {}

func (*IosPerfData_CpuUsageData) isIosPerfData_Value() {}

func (*IosPerfData_CtxSwitchData) isIosPerfData_Value() {}

func (*IosPerfData_WakeupsData) isIosPerfData_Value() {}

func (*IosPerfData_BatteryData) isIosPerfData_Value() {}

func (*IosPerfData_NetworkData) isIosPerfData_Value() {}

func (*IosPerfData_SyslogData) isIosPerfData_Value() {}

func (*IosPerfData_ScreenShotData) isIosPerfData_Value() {}

func (*IosPerfData_IosEnergyUsageData) isIosPerfData_Value() {}

func (*IosPerfData_BatteryTempData) isIosPerfData_Value() {}

func (*IosPerfData_IosGPUCounterBasic) isIosPerfData_Value() {}

func (*IosPerfData_IosGPUCounterMemory) isIosPerfData_Value() {}

func (*IosPerfData_IosGPUCounterShader) isIosPerfData_Value() {}

func (*IosPerfData_IosSampleCount) isIosPerfData_Value() {}

func (*IosPerfData_DeviceNetworkData) isIosPerfData_Value() {}

func (*IosPerfData_PerFramePowerConsumption) isIosPerfData_Value() {}

func (*IosPerfData_DeepProfilingData) isIosPerfData_Value() {}

func (*IosPerfData_CustomDataList) isIosPerfData_Value() {}

func (*IosPerfData_DynamicDataList) isIosPerfData_Value() {}

type SwitchPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*SwitchPerfData_FpsData
	//	*SwitchPerfData_FrameTimeData
	//	*SwitchPerfData_JankData
	//	*SwitchPerfData_SwitchMemData
	//	*SwitchPerfData_UnityMonoHeapData
	//	*SwitchPerfData_CoreUsageData
	Value isSwitchPerfData_Value `protobuf_oneof:"value"`
}

func (x *SwitchPerfData) Reset() {
	*x = SwitchPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchPerfData) ProtoMessage() {}

func (x *SwitchPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchPerfData.ProtoReflect.Descriptor instead.
func (*SwitchPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{158}
}

func (m *SwitchPerfData) GetValue() isSwitchPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SwitchPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*SwitchPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *SwitchPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*SwitchPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *SwitchPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*SwitchPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *SwitchPerfData) GetSwitchMemData() *SwitchMemData {
	if x, ok := x.GetValue().(*SwitchPerfData_SwitchMemData); ok {
		return x.SwitchMemData
	}
	return nil
}

func (x *SwitchPerfData) GetUnityMonoHeapData() *UnityMonoHeapData {
	if x, ok := x.GetValue().(*SwitchPerfData_UnityMonoHeapData); ok {
		return x.UnityMonoHeapData
	}
	return nil
}

func (x *SwitchPerfData) GetCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*SwitchPerfData_CoreUsageData); ok {
		return x.CoreUsageData
	}
	return nil
}

type isSwitchPerfData_Value interface {
	isSwitchPerfData_Value()
}

type SwitchPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type SwitchPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,2,opt,name=frameTimeData,proto3,oneof"`
}

type SwitchPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,3,opt,name=jankData,proto3,oneof"`
}

type SwitchPerfData_SwitchMemData struct {
	SwitchMemData *SwitchMemData `protobuf:"bytes,4,opt,name=switchMemData,proto3,oneof"`
}

type SwitchPerfData_UnityMonoHeapData struct {
	UnityMonoHeapData *UnityMonoHeapData `protobuf:"bytes,5,opt,name=unityMonoHeapData,proto3,oneof"`
}

type SwitchPerfData_CoreUsageData struct {
	CoreUsageData *CoreUsageData `protobuf:"bytes,6,opt,name=coreUsageData,proto3,oneof"`
}

func (*SwitchPerfData_FpsData) isSwitchPerfData_Value() {}

func (*SwitchPerfData_FrameTimeData) isSwitchPerfData_Value() {}

func (*SwitchPerfData_JankData) isSwitchPerfData_Value() {}

func (*SwitchPerfData_SwitchMemData) isSwitchPerfData_Value() {}

func (*SwitchPerfData_UnityMonoHeapData) isSwitchPerfData_Value() {}

func (*SwitchPerfData_CoreUsageData) isSwitchPerfData_Value() {}

type WindowsPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*WindowsPerfData_FpsData
	//	*WindowsPerfData_FrameTimeData
	//	*WindowsPerfData_JankData
	//	*WindowsPerfData_CpuUsage
	//	*WindowsPerfData_RenderData
	//	*WindowsPerfData_MemoryUsage
	//	*WindowsPerfData_IoUsage
	//	*WindowsPerfData_Thread
	//	*WindowsPerfData_Handle
	//	*WindowsPerfData_GpuUsage
	//	*WindowsPerfData_Screenshot
	//	*WindowsPerfData_PerfTypeNtf
	//	*WindowsPerfData_GpuMemoryUsage
	//	*WindowsPerfData_CustomDataList
	//	*WindowsPerfData_DynamicDataList
	//	*WindowsPerfData_NvidiaGpuUsage
	//	*WindowsPerfData_CpuFreq
	//	*WindowsPerfData_CoreUsageData
	//	*WindowsPerfData_ThreadCpuUsageList
	//	*WindowsPerfData_DiskUsage
	//	*WindowsPerfData_NetworkData
	//	*WindowsPerfData_AmdGpuUsage
	//	*WindowsPerfData_DeepProfilingData
	//	*WindowsPerfData_TreeCpuUsage
	//	*WindowsPerfData_CpuCoreFreqData
	Value isWindowsPerfData_Value `protobuf_oneof:"value"`
}

func (x *WindowsPerfData) Reset() {
	*x = WindowsPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowsPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowsPerfData) ProtoMessage() {}

func (x *WindowsPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowsPerfData.ProtoReflect.Descriptor instead.
func (*WindowsPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{159}
}

func (m *WindowsPerfData) GetValue() isWindowsPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *WindowsPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*WindowsPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *WindowsPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*WindowsPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *WindowsPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*WindowsPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *WindowsPerfData) GetCpuUsage() *WindowsCpuUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_CpuUsage); ok {
		return x.CpuUsage
	}
	return nil
}

func (x *WindowsPerfData) GetRenderData() *WindowsRenderData {
	if x, ok := x.GetValue().(*WindowsPerfData_RenderData); ok {
		return x.RenderData
	}
	return nil
}

func (x *WindowsPerfData) GetMemoryUsage() *WindowsMemoryUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_MemoryUsage); ok {
		return x.MemoryUsage
	}
	return nil
}

func (x *WindowsPerfData) GetIoUsage() *WindowsIOUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_IoUsage); ok {
		return x.IoUsage
	}
	return nil
}

func (x *WindowsPerfData) GetThread() *WindowsThread {
	if x, ok := x.GetValue().(*WindowsPerfData_Thread); ok {
		return x.Thread
	}
	return nil
}

func (x *WindowsPerfData) GetHandle() *WindowsHandle {
	if x, ok := x.GetValue().(*WindowsPerfData_Handle); ok {
		return x.Handle
	}
	return nil
}

func (x *WindowsPerfData) GetGpuUsage() *WindowsGpuUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_GpuUsage); ok {
		return x.GpuUsage
	}
	return nil
}

func (x *WindowsPerfData) GetScreenshot() *ScreenShotData {
	if x, ok := x.GetValue().(*WindowsPerfData_Screenshot); ok {
		return x.Screenshot
	}
	return nil
}

func (x *WindowsPerfData) GetPerfTypeNtf() *WindowsPerfTypeNtf {
	if x, ok := x.GetValue().(*WindowsPerfData_PerfTypeNtf); ok {
		return x.PerfTypeNtf
	}
	return nil
}

func (x *WindowsPerfData) GetGpuMemoryUsage() *WindowsGpuMemoryUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_GpuMemoryUsage); ok {
		return x.GpuMemoryUsage
	}
	return nil
}

func (x *WindowsPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*WindowsPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

func (x *WindowsPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*WindowsPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

func (x *WindowsPerfData) GetNvidiaGpuUsage() *NvidiaGpuUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_NvidiaGpuUsage); ok {
		return x.NvidiaGpuUsage
	}
	return nil
}

func (x *WindowsPerfData) GetCpuFreq() *WindowsCpuFreq {
	if x, ok := x.GetValue().(*WindowsPerfData_CpuFreq); ok {
		return x.CpuFreq
	}
	return nil
}

func (x *WindowsPerfData) GetCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*WindowsPerfData_CoreUsageData); ok {
		return x.CoreUsageData
	}
	return nil
}

func (x *WindowsPerfData) GetThreadCpuUsageList() *ThreadCpuUsageList {
	if x, ok := x.GetValue().(*WindowsPerfData_ThreadCpuUsageList); ok {
		return x.ThreadCpuUsageList
	}
	return nil
}

func (x *WindowsPerfData) GetDiskUsage() *WindowsDiskUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_DiskUsage); ok {
		return x.DiskUsage
	}
	return nil
}

func (x *WindowsPerfData) GetNetworkData() *NetworkData {
	if x, ok := x.GetValue().(*WindowsPerfData_NetworkData); ok {
		return x.NetworkData
	}
	return nil
}

func (x *WindowsPerfData) GetAmdGpuUsage() *AmdGpuUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_AmdGpuUsage); ok {
		return x.AmdGpuUsage
	}
	return nil
}

func (x *WindowsPerfData) GetDeepProfilingData() *DeepProfilingData {
	if x, ok := x.GetValue().(*WindowsPerfData_DeepProfilingData); ok {
		return x.DeepProfilingData
	}
	return nil
}

func (x *WindowsPerfData) GetTreeCpuUsage() *WindowsCpuUsage {
	if x, ok := x.GetValue().(*WindowsPerfData_TreeCpuUsage); ok {
		return x.TreeCpuUsage
	}
	return nil
}

func (x *WindowsPerfData) GetCpuCoreFreqData() *WindowsCpuCoreFreq {
	if x, ok := x.GetValue().(*WindowsPerfData_CpuCoreFreqData); ok {
		return x.CpuCoreFreqData
	}
	return nil
}

type isWindowsPerfData_Value interface {
	isWindowsPerfData_Value()
}

type WindowsPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type WindowsPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,2,opt,name=frameTimeData,proto3,oneof"`
}

type WindowsPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,3,opt,name=jankData,proto3,oneof"`
}

type WindowsPerfData_CpuUsage struct {
	CpuUsage *WindowsCpuUsage `protobuf:"bytes,4,opt,name=cpuUsage,proto3,oneof"`
}

type WindowsPerfData_RenderData struct {
	RenderData *WindowsRenderData `protobuf:"bytes,5,opt,name=renderData,proto3,oneof"`
}

type WindowsPerfData_MemoryUsage struct {
	MemoryUsage *WindowsMemoryUsage `protobuf:"bytes,6,opt,name=memoryUsage,proto3,oneof"`
}

type WindowsPerfData_IoUsage struct {
	IoUsage *WindowsIOUsage `protobuf:"bytes,7,opt,name=ioUsage,proto3,oneof"`
}

type WindowsPerfData_Thread struct {
	Thread *WindowsThread `protobuf:"bytes,8,opt,name=thread,proto3,oneof"`
}

type WindowsPerfData_Handle struct {
	Handle *WindowsHandle `protobuf:"bytes,9,opt,name=handle,proto3,oneof"`
}

type WindowsPerfData_GpuUsage struct {
	GpuUsage *WindowsGpuUsage `protobuf:"bytes,10,opt,name=gpuUsage,proto3,oneof"`
}

type WindowsPerfData_Screenshot struct {
	Screenshot *ScreenShotData `protobuf:"bytes,11,opt,name=screenshot,proto3,oneof"`
}

type WindowsPerfData_PerfTypeNtf struct {
	PerfTypeNtf *WindowsPerfTypeNtf `protobuf:"bytes,12,opt,name=perfTypeNtf,proto3,oneof"`
}

type WindowsPerfData_GpuMemoryUsage struct {
	GpuMemoryUsage *WindowsGpuMemoryUsage `protobuf:"bytes,13,opt,name=gpuMemoryUsage,proto3,oneof"`
}

type WindowsPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,14,opt,name=customDataList,proto3,oneof"`
}

type WindowsPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,15,opt,name=dynamicDataList,proto3,oneof"`
}

type WindowsPerfData_NvidiaGpuUsage struct {
	NvidiaGpuUsage *NvidiaGpuUsage `protobuf:"bytes,16,opt,name=nvidiaGpuUsage,proto3,oneof"`
}

type WindowsPerfData_CpuFreq struct {
	CpuFreq *WindowsCpuFreq `protobuf:"bytes,17,opt,name=cpuFreq,proto3,oneof"`
}

type WindowsPerfData_CoreUsageData struct {
	CoreUsageData *CoreUsageData `protobuf:"bytes,18,opt,name=coreUsageData,proto3,oneof"`
}

type WindowsPerfData_ThreadCpuUsageList struct {
	ThreadCpuUsageList *ThreadCpuUsageList `protobuf:"bytes,19,opt,name=threadCpuUsageList,proto3,oneof"`
}

type WindowsPerfData_DiskUsage struct {
	DiskUsage *WindowsDiskUsage `protobuf:"bytes,20,opt,name=diskUsage,proto3,oneof"`
}

type WindowsPerfData_NetworkData struct {
	NetworkData *NetworkData `protobuf:"bytes,21,opt,name=networkData,proto3,oneof"`
}

type WindowsPerfData_AmdGpuUsage struct {
	AmdGpuUsage *AmdGpuUsage `protobuf:"bytes,22,opt,name=amdGpuUsage,proto3,oneof"`
}

type WindowsPerfData_DeepProfilingData struct {
	DeepProfilingData *DeepProfilingData `protobuf:"bytes,23,opt,name=deepProfilingData,proto3,oneof"`
}

type WindowsPerfData_TreeCpuUsage struct {
	TreeCpuUsage *WindowsCpuUsage `protobuf:"bytes,24,opt,name=treeCpuUsage,proto3,oneof"`
}

type WindowsPerfData_CpuCoreFreqData struct {
	CpuCoreFreqData *WindowsCpuCoreFreq `protobuf:"bytes,25,opt,name=cpuCoreFreqData,proto3,oneof"`
}

func (*WindowsPerfData_FpsData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_FrameTimeData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_JankData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_CpuUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_RenderData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_MemoryUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_IoUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_Thread) isWindowsPerfData_Value() {}

func (*WindowsPerfData_Handle) isWindowsPerfData_Value() {}

func (*WindowsPerfData_GpuUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_Screenshot) isWindowsPerfData_Value() {}

func (*WindowsPerfData_PerfTypeNtf) isWindowsPerfData_Value() {}

func (*WindowsPerfData_GpuMemoryUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_CustomDataList) isWindowsPerfData_Value() {}

func (*WindowsPerfData_DynamicDataList) isWindowsPerfData_Value() {}

func (*WindowsPerfData_NvidiaGpuUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_CpuFreq) isWindowsPerfData_Value() {}

func (*WindowsPerfData_CoreUsageData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_ThreadCpuUsageList) isWindowsPerfData_Value() {}

func (*WindowsPerfData_DiskUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_NetworkData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_AmdGpuUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_DeepProfilingData) isWindowsPerfData_Value() {}

func (*WindowsPerfData_TreeCpuUsage) isWindowsPerfData_Value() {}

func (*WindowsPerfData_CpuCoreFreqData) isWindowsPerfData_Value() {}

type PlayStationPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*PlayStationPerfData_FpsData
	//	*PlayStationPerfData_Screenshot
	//	*PlayStationPerfData_FrameTimeData
	//	*PlayStationPerfData_JankData
	//	*PlayStationPerfData_DynamicDataList
	//	*PlayStationPerfData_CustomDataList
	//	*PlayStationPerfData_ThreadCpuUsageList
	Value isPlayStationPerfData_Value `protobuf_oneof:"value"`
}

func (x *PlayStationPerfData) Reset() {
	*x = PlayStationPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayStationPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayStationPerfData) ProtoMessage() {}

func (x *PlayStationPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayStationPerfData.ProtoReflect.Descriptor instead.
func (*PlayStationPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{160}
}

func (m *PlayStationPerfData) GetValue() isPlayStationPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PlayStationPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*PlayStationPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *PlayStationPerfData) GetScreenshot() *ScreenShotData {
	if x, ok := x.GetValue().(*PlayStationPerfData_Screenshot); ok {
		return x.Screenshot
	}
	return nil
}

func (x *PlayStationPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*PlayStationPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *PlayStationPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*PlayStationPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *PlayStationPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*PlayStationPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

func (x *PlayStationPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*PlayStationPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

func (x *PlayStationPerfData) GetThreadCpuUsageList() *ThreadCpuUsageList {
	if x, ok := x.GetValue().(*PlayStationPerfData_ThreadCpuUsageList); ok {
		return x.ThreadCpuUsageList
	}
	return nil
}

type isPlayStationPerfData_Value interface {
	isPlayStationPerfData_Value()
}

type PlayStationPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type PlayStationPerfData_Screenshot struct {
	Screenshot *ScreenShotData `protobuf:"bytes,2,opt,name=screenshot,proto3,oneof"`
}

type PlayStationPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,3,opt,name=frameTimeData,proto3,oneof"`
}

type PlayStationPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,4,opt,name=jankData,proto3,oneof"`
}

type PlayStationPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,5,opt,name=dynamicDataList,proto3,oneof"`
}

type PlayStationPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,6,opt,name=customDataList,proto3,oneof"`
}

type PlayStationPerfData_ThreadCpuUsageList struct {
	ThreadCpuUsageList *ThreadCpuUsageList `protobuf:"bytes,7,opt,name=threadCpuUsageList,proto3,oneof"`
}

func (*PlayStationPerfData_FpsData) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_Screenshot) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_FrameTimeData) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_JankData) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_DynamicDataList) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_CustomDataList) isPlayStationPerfData_Value() {}

func (*PlayStationPerfData_ThreadCpuUsageList) isPlayStationPerfData_Value() {}

type XboxPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*XboxPerfData_FpsData
	//	*XboxPerfData_Screenshot
	//	*XboxPerfData_FrameTimeData
	//	*XboxPerfData_JankData
	//	*XboxPerfData_DynamicDataList
	//	*XboxPerfData_CustomDataList
	Value isXboxPerfData_Value `protobuf_oneof:"value"`
}

func (x *XboxPerfData) Reset() {
	*x = XboxPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XboxPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XboxPerfData) ProtoMessage() {}

func (x *XboxPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XboxPerfData.ProtoReflect.Descriptor instead.
func (*XboxPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{161}
}

func (m *XboxPerfData) GetValue() isXboxPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *XboxPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*XboxPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *XboxPerfData) GetScreenshot() *ScreenShotData {
	if x, ok := x.GetValue().(*XboxPerfData_Screenshot); ok {
		return x.Screenshot
	}
	return nil
}

func (x *XboxPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*XboxPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *XboxPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*XboxPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *XboxPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*XboxPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

func (x *XboxPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*XboxPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

type isXboxPerfData_Value interface {
	isXboxPerfData_Value()
}

type XboxPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type XboxPerfData_Screenshot struct {
	Screenshot *ScreenShotData `protobuf:"bytes,2,opt,name=screenshot,proto3,oneof"`
}

type XboxPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,3,opt,name=frameTimeData,proto3,oneof"`
}

type XboxPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,4,opt,name=jankData,proto3,oneof"`
}

type XboxPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,5,opt,name=dynamicDataList,proto3,oneof"`
}

type XboxPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,6,opt,name=customDataList,proto3,oneof"`
}

func (*XboxPerfData_FpsData) isXboxPerfData_Value() {}

func (*XboxPerfData_Screenshot) isXboxPerfData_Value() {}

func (*XboxPerfData_FrameTimeData) isXboxPerfData_Value() {}

func (*XboxPerfData_JankData) isXboxPerfData_Value() {}

func (*XboxPerfData_DynamicDataList) isXboxPerfData_Value() {}

func (*XboxPerfData_CustomDataList) isXboxPerfData_Value() {}

type HarmonyMemoryDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int64           `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime       int64           `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Gl            *OptionalDouble `protobuf:"bytes,3,opt,name=gl,proto3" json:"gl,omitempty"`
	Graph         *OptionalDouble `protobuf:"bytes,4,opt,name=graph,proto3" json:"graph,omitempty"`
	Hap           *OptionalDouble `protobuf:"bytes,5,opt,name=hap,proto3" json:"hap,omitempty"`
	Dev           *OptionalDouble `protobuf:"bytes,6,opt,name=dev,proto3" json:"dev,omitempty"`
	Dmabuf        *OptionalDouble `protobuf:"bytes,7,opt,name=dmabuf,proto3" json:"dmabuf,omitempty"`
	ArkTsHeap     *OptionalDouble `protobuf:"bytes,8,opt,name=arkTsHeap,proto3" json:"arkTsHeap,omitempty"`
	NativeHeap    *OptionalDouble `protobuf:"bytes,9,opt,name=nativeHeap,proto3" json:"nativeHeap,omitempty"`
	Guard         *OptionalDouble `protobuf:"bytes,10,opt,name=guard,proto3" json:"guard,omitempty"`
	Stack         *OptionalDouble `protobuf:"bytes,11,opt,name=stack,proto3" json:"stack,omitempty"`
	Db            *OptionalDouble `protobuf:"bytes,12,opt,name=db,proto3" json:"db,omitempty"`
	So            *OptionalDouble `protobuf:"bytes,13,opt,name=so,proto3" json:"so,omitempty"`
	Ttf           *OptionalDouble `protobuf:"bytes,14,opt,name=ttf,proto3" json:"ttf,omitempty"`
	FilePageOther *OptionalDouble `protobuf:"bytes,15,opt,name=filePageOther,proto3" json:"filePageOther,omitempty"`
	AnonPageOther *OptionalDouble `protobuf:"bytes,16,opt,name=anonPageOther,proto3" json:"anonPageOther,omitempty"`
}

func (x *HarmonyMemoryDetail) Reset() {
	*x = HarmonyMemoryDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmonyMemoryDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonyMemoryDetail) ProtoMessage() {}

func (x *HarmonyMemoryDetail) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonyMemoryDetail.ProtoReflect.Descriptor instead.
func (*HarmonyMemoryDetail) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{162}
}

func (x *HarmonyMemoryDetail) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HarmonyMemoryDetail) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *HarmonyMemoryDetail) GetGl() *OptionalDouble {
	if x != nil {
		return x.Gl
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetGraph() *OptionalDouble {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetHap() *OptionalDouble {
	if x != nil {
		return x.Hap
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetDev() *OptionalDouble {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetDmabuf() *OptionalDouble {
	if x != nil {
		return x.Dmabuf
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetArkTsHeap() *OptionalDouble {
	if x != nil {
		return x.ArkTsHeap
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetNativeHeap() *OptionalDouble {
	if x != nil {
		return x.NativeHeap
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetGuard() *OptionalDouble {
	if x != nil {
		return x.Guard
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetStack() *OptionalDouble {
	if x != nil {
		return x.Stack
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetDb() *OptionalDouble {
	if x != nil {
		return x.Db
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetSo() *OptionalDouble {
	if x != nil {
		return x.So
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetTtf() *OptionalDouble {
	if x != nil {
		return x.Ttf
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetFilePageOther() *OptionalDouble {
	if x != nil {
		return x.FilePageOther
	}
	return nil
}

func (x *HarmonyMemoryDetail) GetAnonPageOther() *OptionalDouble {
	if x != nil {
		return x.AnonPageOther
	}
	return nil
}

type HarmonyMemData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int64        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime         int64        `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Pss             int32        `protobuf:"varint,3,opt,name=pss,proto3" json:"pss,omitempty"`
	AvailableMemory *OptionalInt `protobuf:"bytes,4,opt,name=availableMemory,proto3" json:"availableMemory,omitempty"`
}

func (x *HarmonyMemData) Reset() {
	*x = HarmonyMemData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmonyMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonyMemData) ProtoMessage() {}

func (x *HarmonyMemData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonyMemData.ProtoReflect.Descriptor instead.
func (*HarmonyMemData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{163}
}

func (x *HarmonyMemData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *HarmonyMemData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *HarmonyMemData) GetPss() int32 {
	if x != nil {
		return x.Pss
	}
	return 0
}

func (x *HarmonyMemData) GetAvailableMemory() *OptionalInt {
	if x != nil {
		return x.AvailableMemory
	}
	return nil
}

type HarmonyPerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*HarmonyPerfData_FpsData
	//	*HarmonyPerfData_FrameTimeData
	//	*HarmonyPerfData_JankData
	//	*HarmonyPerfData_GpuUsageData
	//	*HarmonyPerfData_GpuFreqData
	//	*HarmonyPerfData_MemoryData
	//	*HarmonyPerfData_CoreUsageData
	//	*HarmonyPerfData_CpuFreqData
	//	*HarmonyPerfData_CpuUsageData
	//	*HarmonyPerfData_CpuTempData
	//	*HarmonyPerfData_BatteryData
	//	*HarmonyPerfData_NetworkData
	//	*HarmonyPerfData_SyslogData
	//	*HarmonyPerfData_ScreenShotData
	//	*HarmonyPerfData_NormalizedCpuUsageData
	//	*HarmonyPerfData_NormalizedCpuCoreUsageData
	//	*HarmonyPerfData_PerFramePowerConsumption
	//	*HarmonyPerfData_BatteryTempData
	//	*HarmonyPerfData_GpuTempData
	//	*HarmonyPerfData_NpuTempData
	//	*HarmonyPerfData_DeepProfilingData
	//	*HarmonyPerfData_CustomDataList
	//	*HarmonyPerfData_DynamicDataList
	//	*HarmonyPerfData_MemoryDetail
	//	*HarmonyPerfData_NetworkProfilingData
	//	*HarmonyPerfData_ThreadCpuUsageList
	//	*HarmonyPerfData_ClockSnapshot
	//	*HarmonyPerfData_AppLaunchingTime
	//	*HarmonyPerfData_AppFullyDrawnTime
	//	*HarmonyPerfData_ScreenBrightness
	//	*HarmonyPerfData_BatteryLevel
	Value isHarmonyPerfData_Value `protobuf_oneof:"value"`
}

func (x *HarmonyPerfData) Reset() {
	*x = HarmonyPerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmonyPerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmonyPerfData) ProtoMessage() {}

func (x *HarmonyPerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmonyPerfData.ProtoReflect.Descriptor instead.
func (*HarmonyPerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{164}
}

func (m *HarmonyPerfData) GetValue() isHarmonyPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *HarmonyPerfData) GetFpsData() *FpsData {
	if x, ok := x.GetValue().(*HarmonyPerfData_FpsData); ok {
		return x.FpsData
	}
	return nil
}

func (x *HarmonyPerfData) GetFrameTimeData() *FrameTimeData {
	if x, ok := x.GetValue().(*HarmonyPerfData_FrameTimeData); ok {
		return x.FrameTimeData
	}
	return nil
}

func (x *HarmonyPerfData) GetJankData() *JankData {
	if x, ok := x.GetValue().(*HarmonyPerfData_JankData); ok {
		return x.JankData
	}
	return nil
}

func (x *HarmonyPerfData) GetGpuUsageData() *AndroidGpuUsageData {
	if x, ok := x.GetValue().(*HarmonyPerfData_GpuUsageData); ok {
		return x.GpuUsageData
	}
	return nil
}

func (x *HarmonyPerfData) GetGpuFreqData() *GpuFreqData {
	if x, ok := x.GetValue().(*HarmonyPerfData_GpuFreqData); ok {
		return x.GpuFreqData
	}
	return nil
}

func (x *HarmonyPerfData) GetMemoryData() *HarmonyMemData {
	if x, ok := x.GetValue().(*HarmonyPerfData_MemoryData); ok {
		return x.MemoryData
	}
	return nil
}

func (x *HarmonyPerfData) GetCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*HarmonyPerfData_CoreUsageData); ok {
		return x.CoreUsageData
	}
	return nil
}

func (x *HarmonyPerfData) GetCpuFreqData() *CpuFreqData {
	if x, ok := x.GetValue().(*HarmonyPerfData_CpuFreqData); ok {
		return x.CpuFreqData
	}
	return nil
}

func (x *HarmonyPerfData) GetCpuUsageData() *CpuUsageData {
	if x, ok := x.GetValue().(*HarmonyPerfData_CpuUsageData); ok {
		return x.CpuUsageData
	}
	return nil
}

func (x *HarmonyPerfData) GetCpuTempData() *CpuTempData {
	if x, ok := x.GetValue().(*HarmonyPerfData_CpuTempData); ok {
		return x.CpuTempData
	}
	return nil
}

func (x *HarmonyPerfData) GetBatteryData() *BatteryData {
	if x, ok := x.GetValue().(*HarmonyPerfData_BatteryData); ok {
		return x.BatteryData
	}
	return nil
}

func (x *HarmonyPerfData) GetNetworkData() *NetworkData {
	if x, ok := x.GetValue().(*HarmonyPerfData_NetworkData); ok {
		return x.NetworkData
	}
	return nil
}

func (x *HarmonyPerfData) GetSyslogData() *SyslogData {
	if x, ok := x.GetValue().(*HarmonyPerfData_SyslogData); ok {
		return x.SyslogData
	}
	return nil
}

func (x *HarmonyPerfData) GetScreenShotData() *ScreenShotData {
	if x, ok := x.GetValue().(*HarmonyPerfData_ScreenShotData); ok {
		return x.ScreenShotData
	}
	return nil
}

func (x *HarmonyPerfData) GetNormalizedCpuUsageData() *CpuUsageData {
	if x, ok := x.GetValue().(*HarmonyPerfData_NormalizedCpuUsageData); ok {
		return x.NormalizedCpuUsageData
	}
	return nil
}

func (x *HarmonyPerfData) GetNormalizedCpuCoreUsageData() *CoreUsageData {
	if x, ok := x.GetValue().(*HarmonyPerfData_NormalizedCpuCoreUsageData); ok {
		return x.NormalizedCpuCoreUsageData
	}
	return nil
}

func (x *HarmonyPerfData) GetPerFramePowerConsumption() *PerFramePowerConsumption {
	if x, ok := x.GetValue().(*HarmonyPerfData_PerFramePowerConsumption); ok {
		return x.PerFramePowerConsumption
	}
	return nil
}

func (x *HarmonyPerfData) GetBatteryTempData() *BatteryTempData {
	if x, ok := x.GetValue().(*HarmonyPerfData_BatteryTempData); ok {
		return x.BatteryTempData
	}
	return nil
}

func (x *HarmonyPerfData) GetGpuTempData() *GpuTempData {
	if x, ok := x.GetValue().(*HarmonyPerfData_GpuTempData); ok {
		return x.GpuTempData
	}
	return nil
}

func (x *HarmonyPerfData) GetNpuTempData() *NpuTempData {
	if x, ok := x.GetValue().(*HarmonyPerfData_NpuTempData); ok {
		return x.NpuTempData
	}
	return nil
}

func (x *HarmonyPerfData) GetDeepProfilingData() *DeepProfilingData {
	if x, ok := x.GetValue().(*HarmonyPerfData_DeepProfilingData); ok {
		return x.DeepProfilingData
	}
	return nil
}

func (x *HarmonyPerfData) GetCustomDataList() *CustomDataList {
	if x, ok := x.GetValue().(*HarmonyPerfData_CustomDataList); ok {
		return x.CustomDataList
	}
	return nil
}

func (x *HarmonyPerfData) GetDynamicDataList() *DynamicDataList {
	if x, ok := x.GetValue().(*HarmonyPerfData_DynamicDataList); ok {
		return x.DynamicDataList
	}
	return nil
}

func (x *HarmonyPerfData) GetMemoryDetail() *HarmonyMemoryDetail {
	if x, ok := x.GetValue().(*HarmonyPerfData_MemoryDetail); ok {
		return x.MemoryDetail
	}
	return nil
}

func (x *HarmonyPerfData) GetNetworkProfilingData() *NetworkProfilingData {
	if x, ok := x.GetValue().(*HarmonyPerfData_NetworkProfilingData); ok {
		return x.NetworkProfilingData
	}
	return nil
}

func (x *HarmonyPerfData) GetThreadCpuUsageList() *ThreadCpuUsageList {
	if x, ok := x.GetValue().(*HarmonyPerfData_ThreadCpuUsageList); ok {
		return x.ThreadCpuUsageList
	}
	return nil
}

func (x *HarmonyPerfData) GetClockSnapshot() *ClockSnapshot {
	if x, ok := x.GetValue().(*HarmonyPerfData_ClockSnapshot); ok {
		return x.ClockSnapshot
	}
	return nil
}

func (x *HarmonyPerfData) GetAppLaunchingTime() *AppLaunchingTime {
	if x, ok := x.GetValue().(*HarmonyPerfData_AppLaunchingTime); ok {
		return x.AppLaunchingTime
	}
	return nil
}

func (x *HarmonyPerfData) GetAppFullyDrawnTime() *AppFullyDrawnTime {
	if x, ok := x.GetValue().(*HarmonyPerfData_AppFullyDrawnTime); ok {
		return x.AppFullyDrawnTime
	}
	return nil
}

func (x *HarmonyPerfData) GetScreenBrightness() *ScreenBrightness {
	if x, ok := x.GetValue().(*HarmonyPerfData_ScreenBrightness); ok {
		return x.ScreenBrightness
	}
	return nil
}

func (x *HarmonyPerfData) GetBatteryLevel() *BatteryLevel {
	if x, ok := x.GetValue().(*HarmonyPerfData_BatteryLevel); ok {
		return x.BatteryLevel
	}
	return nil
}

type isHarmonyPerfData_Value interface {
	isHarmonyPerfData_Value()
}

type HarmonyPerfData_FpsData struct {
	FpsData *FpsData `protobuf:"bytes,1,opt,name=fpsData,proto3,oneof"`
}

type HarmonyPerfData_FrameTimeData struct {
	FrameTimeData *FrameTimeData `protobuf:"bytes,2,opt,name=frameTimeData,proto3,oneof"`
}

type HarmonyPerfData_JankData struct {
	JankData *JankData `protobuf:"bytes,3,opt,name=jankData,proto3,oneof"`
}

type HarmonyPerfData_GpuUsageData struct {
	GpuUsageData *AndroidGpuUsageData `protobuf:"bytes,4,opt,name=gpuUsageData,proto3,oneof"`
}

type HarmonyPerfData_GpuFreqData struct {
	GpuFreqData *GpuFreqData `protobuf:"bytes,5,opt,name=gpuFreqData,proto3,oneof"`
}

type HarmonyPerfData_MemoryData struct {
	MemoryData *HarmonyMemData `protobuf:"bytes,6,opt,name=memoryData,proto3,oneof"`
}

type HarmonyPerfData_CoreUsageData struct {
	CoreUsageData *CoreUsageData `protobuf:"bytes,8,opt,name=coreUsageData,proto3,oneof"`
}

type HarmonyPerfData_CpuFreqData struct {
	CpuFreqData *CpuFreqData `protobuf:"bytes,9,opt,name=cpuFreqData,proto3,oneof"`
}

type HarmonyPerfData_CpuUsageData struct {
	CpuUsageData *CpuUsageData `protobuf:"bytes,10,opt,name=cpuUsageData,proto3,oneof"`
}

type HarmonyPerfData_CpuTempData struct {
	CpuTempData *CpuTempData `protobuf:"bytes,11,opt,name=cpuTempData,proto3,oneof"`
}

type HarmonyPerfData_BatteryData struct {
	BatteryData *BatteryData `protobuf:"bytes,12,opt,name=batteryData,proto3,oneof"`
}

type HarmonyPerfData_NetworkData struct {
	NetworkData *NetworkData `protobuf:"bytes,13,opt,name=networkData,proto3,oneof"`
}

type HarmonyPerfData_SyslogData struct {
	SyslogData *SyslogData `protobuf:"bytes,14,opt,name=syslogData,proto3,oneof"`
}

type HarmonyPerfData_ScreenShotData struct {
	ScreenShotData *ScreenShotData `protobuf:"bytes,15,opt,name=screenShotData,proto3,oneof"`
}

type HarmonyPerfData_NormalizedCpuUsageData struct {
	NormalizedCpuUsageData *CpuUsageData `protobuf:"bytes,16,opt,name=normalizedCpuUsageData,proto3,oneof"`
}

type HarmonyPerfData_NormalizedCpuCoreUsageData struct {
	NormalizedCpuCoreUsageData *CoreUsageData `protobuf:"bytes,17,opt,name=normalizedCpuCoreUsageData,proto3,oneof"`
}

type HarmonyPerfData_PerFramePowerConsumption struct {
	PerFramePowerConsumption *PerFramePowerConsumption `protobuf:"bytes,28,opt,name=perFramePowerConsumption,proto3,oneof"`
}

type HarmonyPerfData_BatteryTempData struct {
	BatteryTempData *BatteryTempData `protobuf:"bytes,29,opt,name=batteryTempData,proto3,oneof"`
}

type HarmonyPerfData_GpuTempData struct {
	GpuTempData *GpuTempData `protobuf:"bytes,30,opt,name=gpuTempData,proto3,oneof"`
}

type HarmonyPerfData_NpuTempData struct {
	NpuTempData *NpuTempData `protobuf:"bytes,31,opt,name=npuTempData,proto3,oneof"`
}

type HarmonyPerfData_DeepProfilingData struct {
	DeepProfilingData *DeepProfilingData `protobuf:"bytes,32,opt,name=deepProfilingData,proto3,oneof"`
}

type HarmonyPerfData_CustomDataList struct {
	CustomDataList *CustomDataList `protobuf:"bytes,33,opt,name=customDataList,proto3,oneof"`
}

type HarmonyPerfData_DynamicDataList struct {
	DynamicDataList *DynamicDataList `protobuf:"bytes,34,opt,name=dynamicDataList,proto3,oneof"`
}

type HarmonyPerfData_MemoryDetail struct {
	MemoryDetail *HarmonyMemoryDetail `protobuf:"bytes,35,opt,name=memoryDetail,proto3,oneof"`
}

type HarmonyPerfData_NetworkProfilingData struct {
	NetworkProfilingData *NetworkProfilingData `protobuf:"bytes,36,opt,name=networkProfilingData,proto3,oneof"`
}

type HarmonyPerfData_ThreadCpuUsageList struct {
	ThreadCpuUsageList *ThreadCpuUsageList `protobuf:"bytes,37,opt,name=threadCpuUsageList,proto3,oneof"`
}

type HarmonyPerfData_ClockSnapshot struct {
	ClockSnapshot *ClockSnapshot `protobuf:"bytes,38,opt,name=clockSnapshot,proto3,oneof"`
}

type HarmonyPerfData_AppLaunchingTime struct {
	AppLaunchingTime *AppLaunchingTime `protobuf:"bytes,39,opt,name=appLaunchingTime,proto3,oneof"`
}

type HarmonyPerfData_AppFullyDrawnTime struct {
	AppFullyDrawnTime *AppFullyDrawnTime `protobuf:"bytes,40,opt,name=appFullyDrawnTime,proto3,oneof"`
}

type HarmonyPerfData_ScreenBrightness struct {
	ScreenBrightness *ScreenBrightness `protobuf:"bytes,41,opt,name=screenBrightness,proto3,oneof"`
}

type HarmonyPerfData_BatteryLevel struct {
	BatteryLevel *BatteryLevel `protobuf:"bytes,42,opt,name=batteryLevel,proto3,oneof"`
}

func (*HarmonyPerfData_FpsData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_FrameTimeData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_JankData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_GpuUsageData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_GpuFreqData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_MemoryData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_CoreUsageData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_CpuFreqData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_CpuUsageData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_CpuTempData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_BatteryData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_NetworkData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_SyslogData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_ScreenShotData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_NormalizedCpuUsageData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_NormalizedCpuCoreUsageData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_PerFramePowerConsumption) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_BatteryTempData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_GpuTempData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_NpuTempData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_DeepProfilingData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_CustomDataList) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_DynamicDataList) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_MemoryDetail) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_NetworkProfilingData) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_ThreadCpuUsageList) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_ClockSnapshot) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_AppLaunchingTime) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_AppFullyDrawnTime) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_ScreenBrightness) isHarmonyPerfData_Value() {}

func (*HarmonyPerfData_BatteryLevel) isHarmonyPerfData_Value() {}

// Performance data
// 性能数据
type PerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*PerfData_WarningData
	//	*PerfData_ErrorData
	//	*PerfData_AndroidPerfData
	//	*PerfData_IosPerfData
	//	*PerfData_StartTestRet
	//	*PerfData_SwitchPerfData
	//	*PerfData_WindowsPerfData
	//	*PerfData_PlayStationPerfData
	//	*PerfData_XboxPerfData
	//	*PerfData_HarmonyPerfData
	Value isPerfData_Value `protobuf_oneof:"value"`
}

func (x *PerfData) Reset() {
	*x = PerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfData) ProtoMessage() {}

func (x *PerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfData.ProtoReflect.Descriptor instead.
func (*PerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{165}
}

func (m *PerfData) GetValue() isPerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PerfData) GetWarningData() *WarningData {
	if x, ok := x.GetValue().(*PerfData_WarningData); ok {
		return x.WarningData
	}
	return nil
}

func (x *PerfData) GetErrorData() *ErrorData {
	if x, ok := x.GetValue().(*PerfData_ErrorData); ok {
		return x.ErrorData
	}
	return nil
}

func (x *PerfData) GetAndroidPerfData() *AndroidPerfData {
	if x, ok := x.GetValue().(*PerfData_AndroidPerfData); ok {
		return x.AndroidPerfData
	}
	return nil
}

func (x *PerfData) GetIosPerfData() *IosPerfData {
	if x, ok := x.GetValue().(*PerfData_IosPerfData); ok {
		return x.IosPerfData
	}
	return nil
}

func (x *PerfData) GetStartTestRet() *StartTestRet {
	if x, ok := x.GetValue().(*PerfData_StartTestRet); ok {
		return x.StartTestRet
	}
	return nil
}

func (x *PerfData) GetSwitchPerfData() *SwitchPerfData {
	if x, ok := x.GetValue().(*PerfData_SwitchPerfData); ok {
		return x.SwitchPerfData
	}
	return nil
}

func (x *PerfData) GetWindowsPerfData() *WindowsPerfData {
	if x, ok := x.GetValue().(*PerfData_WindowsPerfData); ok {
		return x.WindowsPerfData
	}
	return nil
}

func (x *PerfData) GetPlayStationPerfData() *PlayStationPerfData {
	if x, ok := x.GetValue().(*PerfData_PlayStationPerfData); ok {
		return x.PlayStationPerfData
	}
	return nil
}

func (x *PerfData) GetXboxPerfData() *XboxPerfData {
	if x, ok := x.GetValue().(*PerfData_XboxPerfData); ok {
		return x.XboxPerfData
	}
	return nil
}

func (x *PerfData) GetHarmonyPerfData() *HarmonyPerfData {
	if x, ok := x.GetValue().(*PerfData_HarmonyPerfData); ok {
		return x.HarmonyPerfData
	}
	return nil
}

type isPerfData_Value interface {
	isPerfData_Value()
}

type PerfData_WarningData struct {
	WarningData *WarningData `protobuf:"bytes,1,opt,name=warningData,proto3,oneof"`
}

type PerfData_ErrorData struct {
	ErrorData *ErrorData `protobuf:"bytes,2,opt,name=errorData,proto3,oneof"`
}

type PerfData_AndroidPerfData struct {
	AndroidPerfData *AndroidPerfData `protobuf:"bytes,3,opt,name=androidPerfData,proto3,oneof"`
}

type PerfData_IosPerfData struct {
	IosPerfData *IosPerfData `protobuf:"bytes,4,opt,name=iosPerfData,proto3,oneof"`
}

type PerfData_StartTestRet struct {
	StartTestRet *StartTestRet `protobuf:"bytes,5,opt,name=startTestRet,proto3,oneof"` //成功开始返回0, Returns 0 if successful
}

type PerfData_SwitchPerfData struct {
	SwitchPerfData *SwitchPerfData `protobuf:"bytes,6,opt,name=switchPerfData,proto3,oneof"`
}

type PerfData_WindowsPerfData struct {
	WindowsPerfData *WindowsPerfData `protobuf:"bytes,7,opt,name=windowsPerfData,proto3,oneof"`
}

type PerfData_PlayStationPerfData struct {
	PlayStationPerfData *PlayStationPerfData `protobuf:"bytes,8,opt,name=playStationPerfData,proto3,oneof"`
}

type PerfData_XboxPerfData struct {
	XboxPerfData *XboxPerfData `protobuf:"bytes,9,opt,name=xboxPerfData,proto3,oneof"`
}

type PerfData_HarmonyPerfData struct {
	HarmonyPerfData *HarmonyPerfData `protobuf:"bytes,10,opt,name=harmonyPerfData,proto3,oneof"`
}

func (*PerfData_WarningData) isPerfData_Value() {}

func (*PerfData_ErrorData) isPerfData_Value() {}

func (*PerfData_AndroidPerfData) isPerfData_Value() {}

func (*PerfData_IosPerfData) isPerfData_Value() {}

func (*PerfData_StartTestRet) isPerfData_Value() {}

func (*PerfData_SwitchPerfData) isPerfData_Value() {}

func (*PerfData_WindowsPerfData) isPerfData_Value() {}

func (*PerfData_PlayStationPerfData) isPerfData_Value() {}

func (*PerfData_XboxPerfData) isPerfData_Value() {}

func (*PerfData_HarmonyPerfData) isPerfData_Value() {}

// Cached performance data
// 缓存性能数据
type CachePerfData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*CachePerfData_AppInfo
	//	*CachePerfData_AndroidPerfData
	//	*CachePerfData_IosPerfData
	//	*CachePerfData_DeviceInfo
	//	*CachePerfData_SwitchPerfData
	//	*CachePerfData_WindowsPerfData
	//	*CachePerfData_IgnoreFps
	//	*CachePerfData_MemoryReportData
	//	*CachePerfData_PlayStationPerfData
	//	*CachePerfData_XboxPerfData
	//	*CachePerfData_HarmonyPerfData
	Value isCachePerfData_Value `protobuf_oneof:"value"`
}

func (x *CachePerfData) Reset() {
	*x = CachePerfData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachePerfData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePerfData) ProtoMessage() {}

func (x *CachePerfData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachePerfData.ProtoReflect.Descriptor instead.
func (*CachePerfData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{166}
}

func (m *CachePerfData) GetValue() isCachePerfData_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CachePerfData) GetAppInfo() *AppInfo {
	if x, ok := x.GetValue().(*CachePerfData_AppInfo); ok {
		return x.AppInfo
	}
	return nil
}

func (x *CachePerfData) GetAndroidPerfData() *AndroidPerfData {
	if x, ok := x.GetValue().(*CachePerfData_AndroidPerfData); ok {
		return x.AndroidPerfData
	}
	return nil
}

func (x *CachePerfData) GetIosPerfData() *IosPerfData {
	if x, ok := x.GetValue().(*CachePerfData_IosPerfData); ok {
		return x.IosPerfData
	}
	return nil
}

func (x *CachePerfData) GetDeviceInfo() *DeviceInfo {
	if x, ok := x.GetValue().(*CachePerfData_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *CachePerfData) GetSwitchPerfData() *SwitchPerfData {
	if x, ok := x.GetValue().(*CachePerfData_SwitchPerfData); ok {
		return x.SwitchPerfData
	}
	return nil
}

func (x *CachePerfData) GetWindowsPerfData() *WindowsPerfData {
	if x, ok := x.GetValue().(*CachePerfData_WindowsPerfData); ok {
		return x.WindowsPerfData
	}
	return nil
}

func (x *CachePerfData) GetIgnoreFps() bool {
	if x, ok := x.GetValue().(*CachePerfData_IgnoreFps); ok {
		return x.IgnoreFps
	}
	return false
}

func (x *CachePerfData) GetMemoryReportData() *MemoryReportData {
	if x, ok := x.GetValue().(*CachePerfData_MemoryReportData); ok {
		return x.MemoryReportData
	}
	return nil
}

func (x *CachePerfData) GetPlayStationPerfData() *PlayStationPerfData {
	if x, ok := x.GetValue().(*CachePerfData_PlayStationPerfData); ok {
		return x.PlayStationPerfData
	}
	return nil
}

func (x *CachePerfData) GetXboxPerfData() *XboxPerfData {
	if x, ok := x.GetValue().(*CachePerfData_XboxPerfData); ok {
		return x.XboxPerfData
	}
	return nil
}

func (x *CachePerfData) GetHarmonyPerfData() *HarmonyPerfData {
	if x, ok := x.GetValue().(*CachePerfData_HarmonyPerfData); ok {
		return x.HarmonyPerfData
	}
	return nil
}

type isCachePerfData_Value interface {
	isCachePerfData_Value()
}

type CachePerfData_AppInfo struct {
	AppInfo *AppInfo `protobuf:"bytes,1,opt,name=appInfo,proto3,oneof"`
}

type CachePerfData_AndroidPerfData struct {
	AndroidPerfData *AndroidPerfData `protobuf:"bytes,2,opt,name=AndroidPerfData,proto3,oneof"`
}

type CachePerfData_IosPerfData struct {
	IosPerfData *IosPerfData `protobuf:"bytes,3,opt,name=IosPerfData,proto3,oneof"`
}

type CachePerfData_DeviceInfo struct {
	DeviceInfo *DeviceInfo `protobuf:"bytes,4,opt,name=DeviceInfo,proto3,oneof"`
}

type CachePerfData_SwitchPerfData struct {
	SwitchPerfData *SwitchPerfData `protobuf:"bytes,5,opt,name=SwitchPerfData,proto3,oneof"`
}

type CachePerfData_WindowsPerfData struct {
	WindowsPerfData *WindowsPerfData `protobuf:"bytes,6,opt,name=windowsPerfData,proto3,oneof"`
}

type CachePerfData_IgnoreFps struct {
	IgnoreFps bool `protobuf:"varint,7,opt,name=ignoreFps,proto3,oneof"`
}

type CachePerfData_MemoryReportData struct {
	MemoryReportData *MemoryReportData `protobuf:"bytes,8,opt,name=memoryReportData,proto3,oneof"`
}

type CachePerfData_PlayStationPerfData struct {
	PlayStationPerfData *PlayStationPerfData `protobuf:"bytes,9,opt,name=playStationPerfData,proto3,oneof"`
}

type CachePerfData_XboxPerfData struct {
	XboxPerfData *XboxPerfData `protobuf:"bytes,10,opt,name=xboxPerfData,proto3,oneof"`
}

type CachePerfData_HarmonyPerfData struct {
	HarmonyPerfData *HarmonyPerfData `protobuf:"bytes,11,opt,name=harmonyPerfData,proto3,oneof"`
}

func (*CachePerfData_AppInfo) isCachePerfData_Value() {}

func (*CachePerfData_AndroidPerfData) isCachePerfData_Value() {}

func (*CachePerfData_IosPerfData) isCachePerfData_Value() {}

func (*CachePerfData_DeviceInfo) isCachePerfData_Value() {}

func (*CachePerfData_SwitchPerfData) isCachePerfData_Value() {}

func (*CachePerfData_WindowsPerfData) isCachePerfData_Value() {}

func (*CachePerfData_IgnoreFps) isCachePerfData_Value() {}

func (*CachePerfData_MemoryReportData) isCachePerfData_Value() {}

func (*CachePerfData_PlayStationPerfData) isCachePerfData_Value() {}

func (*CachePerfData_XboxPerfData) isCachePerfData_Value() {}

func (*CachePerfData_HarmonyPerfData) isCachePerfData_Value() {}

type ScreenshotFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName    string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`       // 截图文件的名字,与json和protobuf中的截图名字对应, The name of the screenshot file corresponds to the screenshot name in json and protobuf
	FileContent []byte `protobuf:"bytes,2,opt,name=fileContent,proto3" json:"fileContent,omitempty"` // 截图文件的内容, Contents of screenshot file
}

func (x *ScreenshotFile) Reset() {
	*x = ScreenshotFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotFile) ProtoMessage() {}

func (x *ScreenshotFile) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotFile.ProtoReflect.Descriptor instead.
func (*ScreenshotFile) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{167}
}

func (x *ScreenshotFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ScreenshotFile) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type MemoryReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime     int64  `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	TagName     string `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"`         // memreport 标签名, memreport tag name
	FileName    string `protobuf:"bytes,4,opt,name=fileName,proto3" json:"fileName,omitempty"`       // memreport 文件名, memreport file name
	FileContent []byte `protobuf:"bytes,5,opt,name=fileContent,proto3" json:"fileContent,omitempty"` // memreport 文件内容, memreport file content
}

func (x *MemoryReportData) Reset() {
	*x = MemoryReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryReportData) ProtoMessage() {}

func (x *MemoryReportData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryReportData.ProtoReflect.Descriptor instead.
func (*MemoryReportData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{168}
}

func (x *MemoryReportData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MemoryReportData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *MemoryReportData) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *MemoryReportData) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MemoryReportData) GetFileContent() []byte {
	if x != nil {
		return x.FileContent
	}
	return nil
}

type CachePerfDataPacked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*CachePerfDataPacked_PerfData
	//	*CachePerfDataPacked_Icon
	//	*CachePerfDataPacked_ScreenshotFile
	Value isCachePerfDataPacked_Value `protobuf_oneof:"value"`
}

func (x *CachePerfDataPacked) Reset() {
	*x = CachePerfDataPacked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachePerfDataPacked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachePerfDataPacked) ProtoMessage() {}

func (x *CachePerfDataPacked) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachePerfDataPacked.ProtoReflect.Descriptor instead.
func (*CachePerfDataPacked) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{169}
}

func (m *CachePerfDataPacked) GetValue() isCachePerfDataPacked_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CachePerfDataPacked) GetPerfData() []byte {
	if x, ok := x.GetValue().(*CachePerfDataPacked_PerfData); ok {
		return x.PerfData
	}
	return nil
}

func (x *CachePerfDataPacked) GetIcon() []byte {
	if x, ok := x.GetValue().(*CachePerfDataPacked_Icon); ok {
		return x.Icon
	}
	return nil
}

func (x *CachePerfDataPacked) GetScreenshotFile() *ScreenshotFile {
	if x, ok := x.GetValue().(*CachePerfDataPacked_ScreenshotFile); ok {
		return x.ScreenshotFile
	}
	return nil
}

type isCachePerfDataPacked_Value interface {
	isCachePerfDataPacked_Value()
}

type CachePerfDataPacked_PerfData struct {
	PerfData []byte `protobuf:"bytes,1,opt,name=perfData,proto3,oneof"` // json或protobuf格式的性能数据,返回一次, Performance data in json or protobuf format, returned once
}

type CachePerfDataPacked_Icon struct {
	Icon []byte `protobuf:"bytes,2,opt,name=icon,proto3,oneof"` // APP Icon, PNG format
}

type CachePerfDataPacked_ScreenshotFile struct {
	ScreenshotFile *ScreenshotFile `protobuf:"bytes,3,opt,name=screenshotFile,proto3,oneof"` // Screenshot file in jpg format, returned multiple times
}

func (*CachePerfDataPacked_PerfData) isCachePerfDataPacked_Value() {}

func (*CachePerfDataPacked_Icon) isCachePerfDataPacked_Value() {}

func (*CachePerfDataPacked_ScreenshotFile) isCachePerfDataPacked_Value() {}

type SetLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Label  string  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SetLabelReq) Reset() {
	*x = SetLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLabelReq) ProtoMessage() {}

func (x *SetLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLabelReq.ProtoReflect.Descriptor instead.
func (*SetLabelReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{170}
}

func (x *SetLabelReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetLabelReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type SetLabelRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"` // 设置的label的起始时间,可用于修改label, The starting time of the set label can be used to modify the label
}

func (x *SetLabelRet) Reset() {
	*x = SetLabelRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLabelRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLabelRet) ProtoMessage() {}

func (x *SetLabelRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLabelRet.ProtoReflect.Descriptor instead.
func (*SetLabelRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{171}
}

func (x *SetLabelRet) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type UpdateLabelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Time   int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`  // label的起始时间, label start time
	Label  string  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"` // 新的label, new label
}

func (x *UpdateLabelReq) Reset() {
	*x = UpdateLabelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLabelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabelReq) ProtoMessage() {}

func (x *UpdateLabelReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabelReq.ProtoReflect.Descriptor instead.
func (*UpdateLabelReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{172}
}

func (x *UpdateLabelReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateLabelReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UpdateLabelReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type AddNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Time   int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"` // 添加note的时间，此时间必须是有对应的性能指标，否则添加无效, The time to add the note. This time must have corresponding performance indicators, otherwise the addition will be invalid.
	Note   string  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *AddNoteReq) Reset() {
	*x = AddNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNoteReq) ProtoMessage() {}

func (x *AddNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNoteReq.ProtoReflect.Descriptor instead.
func (*AddNoteReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{173}
}

func (x *AddNoteReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *AddNoteReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AddNoteReq) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type RemoveNoteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Time   int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RemoveNoteReq) Reset() {
	*x = RemoveNoteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNoteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNoteReq) ProtoMessage() {}

func (x *RemoveNoteReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNoteReq.ProtoReflect.Descriptor instead.
func (*RemoveNoteReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{174}
}

func (x *RemoveNoteReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RemoveNoteReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type SetDataUploadServerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl        string                `protobuf:"bytes,1,opt,name=serverUrl,proto3" json:"serverUrl,omitempty"`                                                             // 数据上传服务器的地址, The address of the data upload server
	DataUploadFormat DataInterchangeFormat `protobuf:"varint,2,opt,name=dataUploadFormat,proto3,enum=com.perfdog.proto.DataInterchangeFormat" json:"dataUploadFormat,omitempty"` //上传到服务器的数据格式, Data format uploaded to server
}

func (x *SetDataUploadServerReq) Reset() {
	*x = SetDataUploadServerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDataUploadServerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDataUploadServerReq) ProtoMessage() {}

func (x *SetDataUploadServerReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDataUploadServerReq.ProtoReflect.Descriptor instead.
func (*SetDataUploadServerReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{175}
}

func (x *SetDataUploadServerReq) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *SetDataUploadServerReq) GetDataUploadFormat() DataInterchangeFormat {
	if x != nil {
		return x.DataUploadFormat
	}
	return DataInterchangeFormat_JSON
}

type SetDataUploadServerRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDataUploadServerRsp) Reset() {
	*x = SetDataUploadServerRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDataUploadServerRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDataUploadServerRsp) ProtoMessage() {}

func (x *SetDataUploadServerRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDataUploadServerRsp.ProtoReflect.Descriptor instead.
func (*SetDataUploadServerRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{176}
}

type SaveDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device           *Device          `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                              // 设备标识, device
	BeginTime        int64            `protobuf:"varint,2,opt,name=beginTime,proto3" json:"beginTime,omitempty"`                                                       // 开始时间, 毫秒, begin time,ms
	EndTime          int64            `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`                                                           // 结束时间, 毫秒, end time,ms
	CaseName         string           `protobuf:"bytes,4,opt,name=caseName,proto3" json:"caseName,omitempty"`                                                          // case名字, case name
	UploadToServer   bool             `protobuf:"varint,5,opt,name=uploadToServer,proto3" json:"uploadToServer,omitempty"`                                             // 上传云平台(默认上传到PerfDog云平台,可通过setGlobalDataUploadServer接口自定义), Upload to the cloud platform (default uploaded to the PerfDog cloud platform, can be customized through the setGlobalDataUploadServer interface)
	ExportToFile     bool             `protobuf:"varint,6,opt,name=exportToFile,proto3" json:"exportToFile,omitempty"`                                                 // 保存到文件,输出目录为outputDirectory, Save to file, the output directory is outputDirectory
	OutputDirectory  string           `protobuf:"bytes,7,opt,name=outputDirectory,proto3" json:"outputDirectory,omitempty"`                                            // 文件输出路径, output directory
	DataExportFormat DataExportFormat `protobuf:"varint,8,opt,name=dataExportFormat,proto3,enum=com.perfdog.proto.DataExportFormat" json:"dataExportFormat,omitempty"` // 文件保存格式, file saving format
	ExtraInfo        *ExtraInfo       `protobuf:"bytes,100,opt,name=extraInfo,proto3" json:"extraInfo,omitempty"`                                                      //扩展信息map, map of extra info
}

func (x *SaveDataReq) Reset() {
	*x = SaveDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDataReq) ProtoMessage() {}

func (x *SaveDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDataReq.ProtoReflect.Descriptor instead.
func (*SaveDataReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{177}
}

func (x *SaveDataReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SaveDataReq) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *SaveDataReq) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *SaveDataReq) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

func (x *SaveDataReq) GetUploadToServer() bool {
	if x != nil {
		return x.UploadToServer
	}
	return false
}

func (x *SaveDataReq) GetExportToFile() bool {
	if x != nil {
		return x.ExportToFile
	}
	return false
}

func (x *SaveDataReq) GetOutputDirectory() string {
	if x != nil {
		return x.OutputDirectory
	}
	return ""
}

func (x *SaveDataReq) GetDataExportFormat() DataExportFormat {
	if x != nil {
		return x.DataExportFormat
	}
	return DataExportFormat_EXPORT_TO_EXCEL
}

func (x *SaveDataReq) GetExtraInfo() *ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoMap map[string]string `protobuf:"bytes,1,rep,name=infoMap,proto3" json:"infoMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{178}
}

func (x *ExtraInfo) GetInfoMap() map[string]string {
	if x != nil {
		return x.InfoMap
	}
	return nil
}

type UploadToServerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // upload是否成功, upload successfully
	CaseId  string `protobuf:"bytes,2,opt,name=caseId,proto3" json:"caseId,omitempty"`    // 上传数据成功后的case id, Case id after uploading data successfully
}

func (x *UploadToServerResult) Reset() {
	*x = UploadToServerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadToServerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadToServerResult) ProtoMessage() {}

func (x *UploadToServerResult) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadToServerResult.ProtoReflect.Descriptor instead.
func (*UploadToServerResult) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{179}
}

func (x *UploadToServerResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadToServerResult) GetCaseId() string {
	if x != nil {
		return x.CaseId
	}
	return ""
}

type ExportToFileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`  // 导出Excel文件是否成功, Export excel file successfully
	FilePath string `protobuf:"bytes,2,opt,name=filePath,proto3" json:"filePath,omitempty"` // 保存成功后的文件路径, File path after successful saving
}

func (x *ExportToFileResult) Reset() {
	*x = ExportToFileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportToFileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportToFileResult) ProtoMessage() {}

func (x *ExportToFileResult) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportToFileResult.ProtoReflect.Descriptor instead.
func (*ExportToFileResult) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{180}
}

func (x *ExportToFileResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExportToFileResult) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type SaveDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadResult *UploadToServerResult `protobuf:"bytes,1,opt,name=uploadResult,proto3" json:"uploadResult,omitempty"`
	ExportResult *ExportToFileResult   `protobuf:"bytes,2,opt,name=exportResult,proto3" json:"exportResult,omitempty"`
}

func (x *SaveDataRsp) Reset() {
	*x = SaveDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDataRsp) ProtoMessage() {}

func (x *SaveDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDataRsp.ProtoReflect.Descriptor instead.
func (*SaveDataRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{181}
}

func (x *SaveDataRsp) GetUploadResult() *UploadToServerResult {
	if x != nil {
		return x.UploadResult
	}
	return nil
}

func (x *SaveDataRsp) GetExportResult() *ExportToFileResult {
	if x != nil {
		return x.ExportResult
	}
	return nil
}

type GetAppRunningProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // device
	App    *AppInfo `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`       // 需要查询的app, queried app
}

func (x *GetAppRunningProcessReq) Reset() {
	*x = GetAppRunningProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRunningProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRunningProcessReq) ProtoMessage() {}

func (x *GetAppRunningProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRunningProcessReq.ProtoReflect.Descriptor instead.
func (*GetAppRunningProcessReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{182}
}

func (x *GetAppRunningProcessReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetAppRunningProcessReq) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

type GetAppWindowsMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // 设备标识, device
	App    *AppInfo `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`       // 需要查询的app, queried app
}

func (x *GetAppWindowsMapReq) Reset() {
	*x = GetAppWindowsMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppWindowsMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppWindowsMapReq) ProtoMessage() {}

func (x *GetAppWindowsMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppWindowsMapReq.ProtoReflect.Descriptor instead.
func (*GetAppWindowsMapReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{183}
}

func (x *GetAppWindowsMapReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetAppWindowsMapReq) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

type ProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`    //进程的名字, process name
	IsTop bool   `protobuf:"varint,2,opt,name=isTop,proto3" json:"isTop,omitempty"` //进程是否在前台, process in the foreground
	Pid   int32  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`     //进程id,仅在android上返回, process id, only android
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{184}
}

func (x *ProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessInfo) GetIsTop() bool {
	if x != nil {
		return x.IsTop
	}
	return false
}

func (x *ProcessInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type GetAppRunningProcessRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessInfo []*ProcessInfo `protobuf:"bytes,1,rep,name=processInfo,proto3" json:"processInfo,omitempty"`
}

func (x *GetAppRunningProcessRet) Reset() {
	*x = GetAppRunningProcessRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppRunningProcessRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppRunningProcessRet) ProtoMessage() {}

func (x *GetAppRunningProcessRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppRunningProcessRet.ProtoReflect.Descriptor instead.
func (*GetAppRunningProcessRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{185}
}

func (x *GetAppRunningProcessRet) GetProcessInfo() []*ProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

type AppWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []string `protobuf:"bytes,1,rep,name=name,proto3" json:"name,omitempty"`
}

func (x *AppWindow) Reset() {
	*x = AppWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppWindow) ProtoMessage() {}

func (x *AppWindow) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppWindow.ProtoReflect.Descriptor instead.
func (*AppWindow) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{186}
}

func (x *AppWindow) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type GetAppWindowsMapRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid2WindowMap map[int32]*AppWindow `protobuf:"bytes,1,rep,name=pid2WindowMap,proto3" json:"pid2WindowMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAppWindowsMapRet) Reset() {
	*x = GetAppWindowsMapRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppWindowsMapRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppWindowsMapRet) ProtoMessage() {}

func (x *GetAppWindowsMapRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppWindowsMapRet.ProtoReflect.Descriptor instead.
func (*GetAppWindowsMapRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{187}
}

func (x *GetAppWindowsMapRet) GetPid2WindowMap() map[int32]*AppWindow {
	if x != nil {
		return x.Pid2WindowMap
	}
	return nil
}

type SysProcessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // 进程名字, process name
	Pid     int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`        // 进程id, process pid
	Icon    []byte `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`       // 进程图标，PNG格式, process icon, png format
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` // 版本名
}

func (x *SysProcessInfo) Reset() {
	*x = SysProcessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysProcessInfo) ProtoMessage() {}

func (x *SysProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysProcessInfo.ProtoReflect.Descriptor instead.
func (*SysProcessInfo) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{188}
}

func (x *SysProcessInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SysProcessInfo) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *SysProcessInfo) GetIcon() []byte {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *SysProcessInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetRunningSysProcessRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessInfo []*SysProcessInfo `protobuf:"bytes,1,rep,name=processInfo,proto3" json:"processInfo,omitempty"`
}

func (x *GetRunningSysProcessRet) Reset() {
	*x = GetRunningSysProcessRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunningSysProcessRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunningSysProcessRet) ProtoMessage() {}

func (x *GetRunningSysProcessRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunningSysProcessRet.ProtoReflect.Descriptor instead.
func (*GetRunningSysProcessRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{189}
}

func (x *GetRunningSysProcessRet) GetProcessInfo() []*SysProcessInfo {
	if x != nil {
		return x.ProcessInfo
	}
	return nil
}

type IosEnergyUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	AbsTime  int64 `protobuf:"varint,2,opt,name=absTime,proto3" json:"absTime,omitempty"`
	Cpu      int32 `protobuf:"varint,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Gpu      int32 `protobuf:"varint,4,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Network  int32 `protobuf:"varint,5,opt,name=network,proto3" json:"network,omitempty"`
	Location int32 `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
	Display  int32 `protobuf:"varint,7,opt,name=display,proto3" json:"display,omitempty"`
	Overhead int32 `protobuf:"varint,8,opt,name=overhead,proto3" json:"overhead,omitempty"`
}

func (x *IosEnergyUsageData) Reset() {
	*x = IosEnergyUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IosEnergyUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IosEnergyUsageData) ProtoMessage() {}

func (x *IosEnergyUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IosEnergyUsageData.ProtoReflect.Descriptor instead.
func (*IosEnergyUsageData) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{190}
}

func (x *IosEnergyUsageData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IosEnergyUsageData) GetAbsTime() int64 {
	if x != nil {
		return x.AbsTime
	}
	return 0
}

func (x *IosEnergyUsageData) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *IosEnergyUsageData) GetGpu() int32 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *IosEnergyUsageData) GetNetwork() int32 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *IosEnergyUsageData) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *IosEnergyUsageData) GetDisplay() int32 {
	if x != nil {
		return x.Display
	}
	return 0
}

func (x *IosEnergyUsageData) GetOverhead() int32 {
	if x != nil {
		return x.Overhead
	}
	return 0
}

type UpdateAppInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // 设备标识, device
	App    *AppInfo `protobuf:"bytes,2,opt,name=app,proto3" json:"app,omitempty"`       // 需要更新的app, updated app
}

func (x *UpdateAppInfoReq) Reset() {
	*x = UpdateAppInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppInfoReq) ProtoMessage() {}

func (x *UpdateAppInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateAppInfoReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{191}
}

func (x *UpdateAppInfoReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateAppInfoReq) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

type UpdateAppInfoRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App *AppInfo `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"` // 更新后的app信息, app after updating
}

func (x *UpdateAppInfoRet) Reset() {
	*x = UpdateAppInfoRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppInfoRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppInfoRet) ProtoMessage() {}

func (x *UpdateAppInfoRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppInfoRet.ProtoReflect.Descriptor instead.
func (*UpdateAppInfoRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{192}
}

func (x *UpdateAppInfoRet) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

type GetDeviceCacheDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"` // 设备标识, device
}

func (x *GetDeviceCacheDataReq) Reset() {
	*x = GetDeviceCacheDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceCacheDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCacheDataReq) ProtoMessage() {}

func (x *GetDeviceCacheDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCacheDataReq.ProtoReflect.Descriptor instead.
func (*GetDeviceCacheDataReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{193}
}

func (x *GetDeviceCacheDataReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetDeviceCacheDataPackedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device     *Device               `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                       // 设备标识, device
	DataFormat DataInterchangeFormat `protobuf:"varint,2,opt,name=dataFormat,proto3,enum=com.perfdog.proto.DataInterchangeFormat" json:"dataFormat,omitempty"` // 返回的数据格式, data format
}

func (x *GetDeviceCacheDataPackedReq) Reset() {
	*x = GetDeviceCacheDataPackedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceCacheDataPackedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCacheDataPackedReq) ProtoMessage() {}

func (x *GetDeviceCacheDataPackedReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCacheDataPackedReq.ProtoReflect.Descriptor instead.
func (*GetDeviceCacheDataPackedReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{194}
}

func (x *GetDeviceCacheDataPackedReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetDeviceCacheDataPackedReq) GetDataFormat() DataInterchangeFormat {
	if x != nil {
		return x.DataFormat
	}
	return DataInterchangeFormat_JSON
}

type CreateTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskName string `protobuf:"bytes,1,opt,name=taskName,proto3" json:"taskName,omitempty"` // task的名字,不能超过50个字符, task name, length less than 50
}

func (x *CreateTaskReq) Reset() {
	*x = CreateTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskReq) ProtoMessage() {}

func (x *CreateTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskReq.ProtoReflect.Descriptor instead.
func (*CreateTaskReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{195}
}

func (x *CreateTaskReq) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

type CreateTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"` // task id
}

func (x *CreateTaskRsp) Reset() {
	*x = CreateTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskRsp) ProtoMessage() {}

func (x *CreateTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskRsp.ProtoReflect.Descriptor instead.
func (*CreateTaskRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{196}
}

func (x *CreateTaskRsp) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ArchiveCaseToTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseId string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"` // 上传case后返回的case id, The case id returned after uploading the case
	TaskId string `protobuf:"bytes,2,opt,name=taskId,proto3" json:"taskId,omitempty"` // task id
}

func (x *ArchiveCaseToTaskReq) Reset() {
	*x = ArchiveCaseToTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveCaseToTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveCaseToTaskReq) ProtoMessage() {}

func (x *ArchiveCaseToTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveCaseToTaskReq.ProtoReflect.Descriptor instead.
func (*ArchiveCaseToTaskReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{197}
}

func (x *ArchiveCaseToTaskReq) GetCaseId() string {
	if x != nil {
		return x.CaseId
	}
	return ""
}

func (x *ArchiveCaseToTaskReq) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ArchiveCaseToTaskRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArchiveCaseToTaskRsp) Reset() {
	*x = ArchiveCaseToTaskRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveCaseToTaskRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveCaseToTaskRsp) ProtoMessage() {}

func (x *ArchiveCaseToTaskRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveCaseToTaskRsp.ProtoReflect.Descriptor instead.
func (*ArchiveCaseToTaskRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{198}
}

type ShareCaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseId      string `protobuf:"bytes,1,opt,name=caseId,proto3" json:"caseId,omitempty"`            // 上传case后返回的case id, The case id returned after uploading the case
	ExpireTime  int32  `protobuf:"varint,2,opt,name=expireTime,proto3" json:"expireTime,omitempty"`   // 多久后分享失效,单位分钟,0代表永不过期, How long does it take for the share to expire, in minutes, 0 means never expires
	NonPassword bool   `protobuf:"varint,3,opt,name=nonPassword,proto3" json:"nonPassword,omitempty"` // 是否设置分享密码, Whether to set a sharing password
}

func (x *ShareCaseReq) Reset() {
	*x = ShareCaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCaseReq) ProtoMessage() {}

func (x *ShareCaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCaseReq.ProtoReflect.Descriptor instead.
func (*ShareCaseReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{199}
}

func (x *ShareCaseReq) GetCaseId() string {
	if x != nil {
		return x.CaseId
	}
	return ""
}

func (x *ShareCaseReq) GetExpireTime() int32 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ShareCaseReq) GetNonPassword() bool {
	if x != nil {
		return x.NonPassword
	}
	return false
}

type ShareCaseRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseUrl  string `protobuf:"bytes,1,opt,name=caseUrl,proto3" json:"caseUrl,omitempty"`   // case的链接, url of case
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // case的密码, password
}

func (x *ShareCaseRsp) Reset() {
	*x = ShareCaseRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCaseRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCaseRsp) ProtoMessage() {}

func (x *ShareCaseRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCaseRsp.ProtoReflect.Descriptor instead.
func (*ShareCaseRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{200}
}

func (x *ShareCaseRsp) GetCaseUrl() string {
	if x != nil {
		return x.CaseUrl
	}
	return ""
}

func (x *ShareCaseRsp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type DeviceListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *DeviceListRsp) Reset() {
	*x = DeviceListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceListRsp) ProtoMessage() {}

func (x *DeviceListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceListRsp.ProtoReflect.Descriptor instead.
func (*DeviceListRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{201}
}

func (x *DeviceListRsp) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type Preferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoNotInstallPerfDogApp bool `protobuf:"varint,1,opt,name=doNotInstallPerfDogApp,proto3" json:"doNotInstallPerfDogApp,omitempty"` //仅适用于android,如果设备上已经安装了PerfDogApp,此选项不生效.如果没安装,为true时不会自动安装, Applicable to android only. If PerfDogApp is already installed on the device, this option will not take effect. If it is not installed, it will not be installed automatically when set to true.
}

func (x *Preferences) Reset() {
	*x = Preferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Preferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Preferences) ProtoMessage() {}

func (x *Preferences) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Preferences.ProtoReflect.Descriptor instead.
func (*Preferences) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{202}
}

func (x *Preferences) GetDoNotInstallPerfDogApp() bool {
	if x != nil {
		return x.DoNotInstallPerfDogApp
	}
	return false
}

type SetPreferencesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Preferences *Preferences `protobuf:"bytes,1,opt,name=preferences,proto3" json:"preferences,omitempty"`
}

func (x *SetPreferencesReq) Reset() {
	*x = SetPreferencesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferencesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferencesReq) ProtoMessage() {}

func (x *SetPreferencesReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferencesReq.ProtoReflect.Descriptor instead.
func (*SetPreferencesReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{203}
}

func (x *SetPreferencesReq) GetPreferences() *Preferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type SetPreferencesRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPreferencesRsp) Reset() {
	*x = SetPreferencesRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferencesRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferencesRsp) ProtoMessage() {}

func (x *SetPreferencesRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferencesRsp.ProtoReflect.Descriptor instead.
func (*SetPreferencesRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{204}
}

type GetRenderResolutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetRenderResolutionReq) Reset() {
	*x = GetRenderResolutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRenderResolutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRenderResolutionReq) ProtoMessage() {}

func (x *GetRenderResolutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRenderResolutionReq.ProtoReflect.Descriptor instead.
func (*GetRenderResolutionReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{205}
}

func (x *GetRenderResolutionReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetRenderResolutionRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetRenderResolutionRet) Reset() {
	*x = GetRenderResolutionRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRenderResolutionRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRenderResolutionRet) ProtoMessage() {}

func (x *GetRenderResolutionRet) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRenderResolutionRet.ProtoReflect.Descriptor instead.
func (*GetRenderResolutionRet) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{206}
}

func (x *GetRenderResolutionRet) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetRenderResolutionRet) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetCpuInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *GetCpuInfoReq) Reset() {
	*x = GetCpuInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCpuInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCpuInfoReq) ProtoMessage() {}

func (x *GetCpuInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCpuInfoReq.ProtoReflect.Descriptor instead.
func (*GetCpuInfoReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{207}
}

func (x *GetCpuInfoReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetCpuInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreNum     int32   `protobuf:"varint,1,opt,name=coreNum,proto3" json:"coreNum,omitempty"`
	CoreMaxFreq []int32 `protobuf:"varint,2,rep,packed,name=coreMaxFreq,proto3" json:"coreMaxFreq,omitempty"` //个数和coreNum一致,0代表不支持, The number is consistent with coreNum, 0 means not supported
}

func (x *GetCpuInfoRsp) Reset() {
	*x = GetCpuInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCpuInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCpuInfoRsp) ProtoMessage() {}

func (x *GetCpuInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCpuInfoRsp.ProtoReflect.Descriptor instead.
func (*GetCpuInfoRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{208}
}

func (x *GetCpuInfoRsp) GetCoreNum() int32 {
	if x != nil {
		return x.CoreNum
	}
	return 0
}

func (x *GetCpuInfoRsp) GetCoreMaxFreq() []int32 {
	if x != nil {
		return x.CoreMaxFreq
	}
	return nil
}

type SetMemorySamplingFrequencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Freq   int32   `protobuf:"varint,2,opt,name=freq,proto3" json:"freq,omitempty"` //多少秒获取一次, frequency
}

func (x *SetMemorySamplingFrequencyReq) Reset() {
	*x = SetMemorySamplingFrequencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMemorySamplingFrequencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMemorySamplingFrequencyReq) ProtoMessage() {}

func (x *SetMemorySamplingFrequencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMemorySamplingFrequencyReq.ProtoReflect.Descriptor instead.
func (*SetMemorySamplingFrequencyReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{209}
}

func (x *SetMemorySamplingFrequencyReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetMemorySamplingFrequencyReq) GetFreq() int32 {
	if x != nil {
		return x.Freq
	}
	return 0
}

type TransferFloatingWindowMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device    *Device               `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Message   FloatingWindowMessage `protobuf:"varint,2,opt,name=message,proto3,enum=com.perfdog.proto.FloatingWindowMessage" json:"message,omitempty"`
	LabelName string                `protobuf:"bytes,3,opt,name=labelName,proto3" json:"labelName,omitempty"`
}

func (x *TransferFloatingWindowMessageReq) Reset() {
	*x = TransferFloatingWindowMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFloatingWindowMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFloatingWindowMessageReq) ProtoMessage() {}

func (x *TransferFloatingWindowMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFloatingWindowMessageReq.ProtoReflect.Descriptor instead.
func (*TransferFloatingWindowMessageReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{210}
}

func (x *TransferFloatingWindowMessageReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *TransferFloatingWindowMessageReq) GetMessage() FloatingWindowMessage {
	if x != nil {
		return x.Message
	}
	return FloatingWindowMessage_START_RECORD
}

func (x *TransferFloatingWindowMessageReq) GetLabelName() string {
	if x != nil {
		return x.LabelName
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   float64 `protobuf:"fixed64,1,opt,name=red,proto3" json:"red,omitempty"`
	Green float64 `protobuf:"fixed64,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue  float64 `protobuf:"fixed64,3,opt,name=blue,proto3" json:"blue,omitempty"`
	Alpha float64 `protobuf:"fixed64,4,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{211}
}

func (x *Color) GetRed() float64 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *Color) GetGreen() float64 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *Color) GetBlue() float64 {
	if x != nil {
		return x.Blue
	}
	return 0
}

func (x *Color) GetAlpha() float64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

type SetFloatingWindowPreferencesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device           *Device                `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Position         FloatingWindowPosition `protobuf:"varint,2,opt,name=position,proto3,enum=com.perfdog.proto.FloatingWindowPosition" json:"position,omitempty"`
	FontColor        *Color                 `protobuf:"bytes,3,opt,name=fontColor,proto3" json:"fontColor,omitempty"`
	RecordHotKey     string                 `protobuf:"bytes,4,opt,name=recordHotKey,proto3" json:"recordHotKey,omitempty"`
	AddLabelHotKey   string                 `protobuf:"bytes,5,opt,name=addLabelHotKey,proto3" json:"addLabelHotKey,omitempty"`
	ResolutionHotKey string                 `protobuf:"bytes,6,opt,name=resolutionHotKey,proto3" json:"resolutionHotKey,omitempty"`
}

func (x *SetFloatingWindowPreferencesReq) Reset() {
	*x = SetFloatingWindowPreferencesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFloatingWindowPreferencesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFloatingWindowPreferencesReq) ProtoMessage() {}

func (x *SetFloatingWindowPreferencesReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFloatingWindowPreferencesReq.ProtoReflect.Descriptor instead.
func (*SetFloatingWindowPreferencesReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{212}
}

func (x *SetFloatingWindowPreferencesReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetFloatingWindowPreferencesReq) GetPosition() FloatingWindowPosition {
	if x != nil {
		return x.Position
	}
	return FloatingWindowPosition_TOP_LEFT
}

func (x *SetFloatingWindowPreferencesReq) GetFontColor() *Color {
	if x != nil {
		return x.FontColor
	}
	return nil
}

func (x *SetFloatingWindowPreferencesReq) GetRecordHotKey() string {
	if x != nil {
		return x.RecordHotKey
	}
	return ""
}

func (x *SetFloatingWindowPreferencesReq) GetAddLabelHotKey() string {
	if x != nil {
		return x.AddLabelHotKey
	}
	return ""
}

func (x *SetFloatingWindowPreferencesReq) GetResolutionHotKey() string {
	if x != nil {
		return x.ResolutionHotKey
	}
	return ""
}

type UnrealMemoryReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	TagName string  `protobuf:"bytes,2,opt,name=tagName,proto3" json:"tagName,omitempty"`
}

func (x *UnrealMemoryReportReq) Reset() {
	*x = UnrealMemoryReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnrealMemoryReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnrealMemoryReportReq) ProtoMessage() {}

func (x *UnrealMemoryReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnrealMemoryReportReq.ProtoReflect.Descriptor instead.
func (*UnrealMemoryReportReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{213}
}

func (x *UnrealMemoryReportReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UnrealMemoryReportReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type UpdateMemoryReportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Time    int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	TagName string  `protobuf:"bytes,3,opt,name=tagName,proto3" json:"tagName,omitempty"` // 新的tagName, new tag name
}

func (x *UpdateMemoryReportReq) Reset() {
	*x = UpdateMemoryReportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMemoryReportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemoryReportReq) ProtoMessage() {}

func (x *UpdateMemoryReportReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemoryReportReq.ProtoReflect.Descriptor instead.
func (*UpdateMemoryReportReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{214}
}

func (x *UpdateMemoryReportReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UpdateMemoryReportReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *UpdateMemoryReportReq) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

type GetPresetNetworkProfilingTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPresetNetworkProfilingTemplateReq) Reset() {
	*x = GetPresetNetworkProfilingTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresetNetworkProfilingTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetNetworkProfilingTemplateReq) ProtoMessage() {}

func (x *GetPresetNetworkProfilingTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetNetworkProfilingTemplateReq.ProtoReflect.Descriptor instead.
func (*GetPresetNetworkProfilingTemplateReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{215}
}

type GetPresetNetworkProfilingTemplateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Templates []*NetworkProfilingTemplate `protobuf:"bytes,1,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *GetPresetNetworkProfilingTemplateRsp) Reset() {
	*x = GetPresetNetworkProfilingTemplateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresetNetworkProfilingTemplateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresetNetworkProfilingTemplateRsp) ProtoMessage() {}

func (x *GetPresetNetworkProfilingTemplateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresetNetworkProfilingTemplateRsp.ProtoReflect.Descriptor instead.
func (*GetPresetNetworkProfilingTemplateRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{216}
}

func (x *GetPresetNetworkProfilingTemplateRsp) GetTemplates() []*NetworkProfilingTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type SubmitUserNetworkProfilingTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *NetworkProfilingTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *SubmitUserNetworkProfilingTemplateReq) Reset() {
	*x = SubmitUserNetworkProfilingTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitUserNetworkProfilingTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitUserNetworkProfilingTemplateReq) ProtoMessage() {}

func (x *SubmitUserNetworkProfilingTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitUserNetworkProfilingTemplateReq.ProtoReflect.Descriptor instead.
func (*SubmitUserNetworkProfilingTemplateReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{217}
}

func (x *SubmitUserNetworkProfilingTemplateReq) GetTemplate() *NetworkProfilingTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type SubmitUserNetworkProfilingTemplateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubmitUserNetworkProfilingTemplateRsp) Reset() {
	*x = SubmitUserNetworkProfilingTemplateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitUserNetworkProfilingTemplateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitUserNetworkProfilingTemplateRsp) ProtoMessage() {}

func (x *SubmitUserNetworkProfilingTemplateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitUserNetworkProfilingTemplateRsp.ProtoReflect.Descriptor instead.
func (*SubmitUserNetworkProfilingTemplateRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{218}
}

func (x *SubmitUserNetworkProfilingTemplateRsp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateUserNetworkProfilingTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *NetworkProfilingTemplate `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *UpdateUserNetworkProfilingTemplateReq) Reset() {
	*x = UpdateUserNetworkProfilingTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserNetworkProfilingTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNetworkProfilingTemplateReq) ProtoMessage() {}

func (x *UpdateUserNetworkProfilingTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNetworkProfilingTemplateReq.ProtoReflect.Descriptor instead.
func (*UpdateUserNetworkProfilingTemplateReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{219}
}

func (x *UpdateUserNetworkProfilingTemplateReq) GetTemplate() *NetworkProfilingTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type DeleteUserNetworkProfilingTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateId int32 `protobuf:"varint,1,opt,name=templateId,proto3" json:"templateId,omitempty"`
}

func (x *DeleteUserNetworkProfilingTemplateReq) Reset() {
	*x = DeleteUserNetworkProfilingTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserNetworkProfilingTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserNetworkProfilingTemplateReq) ProtoMessage() {}

func (x *DeleteUserNetworkProfilingTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserNetworkProfilingTemplateReq.ProtoReflect.Descriptor instead.
func (*DeleteUserNetworkProfilingTemplateReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{220}
}

func (x *DeleteUserNetworkProfilingTemplateReq) GetTemplateId() int32 {
	if x != nil {
		return x.TemplateId
	}
	return 0
}

type ChangeNetworkTemplateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device   *Device                   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Template *NetworkProfilingTemplate `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *ChangeNetworkTemplateReq) Reset() {
	*x = ChangeNetworkTemplateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNetworkTemplateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNetworkTemplateReq) ProtoMessage() {}

func (x *ChangeNetworkTemplateReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNetworkTemplateReq.ProtoReflect.Descriptor instead.
func (*ChangeNetworkTemplateReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{221}
}

func (x *ChangeNetworkTemplateReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ChangeNetworkTemplateReq) GetTemplate() *NetworkProfilingTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type ChangeNetworkTemplateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeNetworkTemplateRsp) Reset() {
	*x = ChangeNetworkTemplateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNetworkTemplateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNetworkTemplateRsp) ProtoMessage() {}

func (x *ChangeNetworkTemplateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNetworkTemplateRsp.ProtoReflect.Descriptor instead.
func (*ChangeNetworkTemplateRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{222}
}

type AddRemoteHostDeviceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     DEVICE_OSTYPE `protobuf:"varint,1,opt,name=type,proto3,enum=com.perfdog.proto.DEVICE_OSTYPE" json:"type,omitempty"`
	Ip       string        `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Password string        `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AddRemoteHostDeviceReq) Reset() {
	*x = AddRemoteHostDeviceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRemoteHostDeviceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRemoteHostDeviceReq) ProtoMessage() {}

func (x *AddRemoteHostDeviceReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRemoteHostDeviceReq.ProtoReflect.Descriptor instead.
func (*AddRemoteHostDeviceReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{223}
}

func (x *AddRemoteHostDeviceReq) GetType() DEVICE_OSTYPE {
	if x != nil {
		return x.Type
	}
	return DEVICE_OSTYPE_ANDROID
}

func (x *AddRemoteHostDeviceReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddRemoteHostDeviceReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CheckDeviceOccupiedByOtherUsersReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CheckDeviceOccupiedByOtherUsersReq) Reset() {
	*x = CheckDeviceOccupiedByOtherUsersReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceOccupiedByOtherUsersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceOccupiedByOtherUsersReq) ProtoMessage() {}

func (x *CheckDeviceOccupiedByOtherUsersReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceOccupiedByOtherUsersReq.ProtoReflect.Descriptor instead.
func (*CheckDeviceOccupiedByOtherUsersReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{224}
}

func (x *CheckDeviceOccupiedByOtherUsersReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type SetPairedPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device   *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Password string  `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetPairedPasswordReq) Reset() {
	*x = SetPairedPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPairedPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPairedPasswordReq) ProtoMessage() {}

func (x *SetPairedPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPairedPasswordReq.ProtoReflect.Descriptor instead.
func (*SetPairedPasswordReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{225}
}

func (x *SetPairedPasswordReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetPairedPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CheckDeviceOccupiedByOtherUsersRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtherUser string `protobuf:"bytes,1,opt,name=otherUser,proto3" json:"otherUser,omitempty"`
}

func (x *CheckDeviceOccupiedByOtherUsersRsp) Reset() {
	*x = CheckDeviceOccupiedByOtherUsersRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDeviceOccupiedByOtherUsersRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDeviceOccupiedByOtherUsersRsp) ProtoMessage() {}

func (x *CheckDeviceOccupiedByOtherUsersRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDeviceOccupiedByOtherUsersRsp.ProtoReflect.Descriptor instead.
func (*CheckDeviceOccupiedByOtherUsersRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{226}
}

func (x *CheckDeviceOccupiedByOtherUsersRsp) GetOtherUser() string {
	if x != nil {
		return x.OtherUser
	}
	return ""
}

type LaunchAsRemoteCollectorRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *OptionBool `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *LaunchAsRemoteCollectorRsp) Reset() {
	*x = LaunchAsRemoteCollectorRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchAsRemoteCollectorRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchAsRemoteCollectorRsp) ProtoMessage() {}

func (x *LaunchAsRemoteCollectorRsp) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchAsRemoteCollectorRsp.ProtoReflect.Descriptor instead.
func (*LaunchAsRemoteCollectorRsp) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{227}
}

func (x *LaunchAsRemoteCollectorRsp) GetResult() *OptionBool {
	if x != nil {
		return x.Result
	}
	return nil
}

type SetEnableDevAppTestReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Enable bool    `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *SetEnableDevAppTestReq) Reset() {
	*x = SetEnableDevAppTestReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEnableDevAppTestReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEnableDevAppTestReq) ProtoMessage() {}

func (x *SetEnableDevAppTestReq) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEnableDevAppTestReq.ProtoReflect.Descriptor instead.
func (*SetEnableDevAppTestReq) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{228}
}

func (x *SetEnableDevAppTestReq) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *SetEnableDevAppTestReq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type BinderSession_Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                   int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	SendPid               int32 `protobuf:"varint,2,opt,name=sendPid,proto3" json:"sendPid,omitempty"`
	SendTid               int32 `protobuf:"varint,3,opt,name=sendTid,proto3" json:"sendTid,omitempty"`
	SendSliceStartTime    int64 `protobuf:"varint,4,opt,name=sendSliceStartTime,proto3" json:"sendSliceStartTime,omitempty"`
	SendSliceEndTime      int64 `protobuf:"varint,5,opt,name=sendSliceEndTime,proto3" json:"sendSliceEndTime,omitempty"`
	ReceivePid            int32 `protobuf:"varint,6,opt,name=receivePid,proto3" json:"receivePid,omitempty"`
	ReceiveTid            int32 `protobuf:"varint,7,opt,name=receiveTid,proto3" json:"receiveTid,omitempty"`
	ReceiveSliceStartTime int64 `protobuf:"varint,8,opt,name=receiveSliceStartTime,proto3" json:"receiveSliceStartTime,omitempty"`
	ReceiveSliceEndTime   int64 `protobuf:"varint,9,opt,name=receiveSliceEndTime,proto3" json:"receiveSliceEndTime,omitempty"`
}

func (x *BinderSession_Session) Reset() {
	*x = BinderSession_Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinderSession_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinderSession_Session) ProtoMessage() {}

func (x *BinderSession_Session) ProtoReflect() protoreflect.Message {
	mi := &file_perfdog_perfdog_perfdog_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinderSession_Session.ProtoReflect.Descriptor instead.
func (*BinderSession_Session) Descriptor() ([]byte, []int) {
	return file_perfdog_perfdog_perfdog_proto_rawDescGZIP(), []int{107, 0}
}

func (x *BinderSession_Session) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *BinderSession_Session) GetSendPid() int32 {
	if x != nil {
		return x.SendPid
	}
	return 0
}

func (x *BinderSession_Session) GetSendTid() int32 {
	if x != nil {
		return x.SendTid
	}
	return 0
}

func (x *BinderSession_Session) GetSendSliceStartTime() int64 {
	if x != nil {
		return x.SendSliceStartTime
	}
	return 0
}

func (x *BinderSession_Session) GetSendSliceEndTime() int64 {
	if x != nil {
		return x.SendSliceEndTime
	}
	return 0
}

func (x *BinderSession_Session) GetReceivePid() int32 {
	if x != nil {
		return x.ReceivePid
	}
	return 0
}

func (x *BinderSession_Session) GetReceiveTid() int32 {
	if x != nil {
		return x.ReceiveTid
	}
	return 0
}

func (x *BinderSession_Session) GetReceiveSliceStartTime() int64 {
	if x != nil {
		return x.ReceiveSliceStartTime
	}
	return 0
}

func (x *BinderSession_Session) GetReceiveSliceEndTime() int64 {
	if x != nil {
		return x.ReceiveSliceEndTime
	}
	return 0
}

var File_perfdog_perfdog_perfdog_proto protoreflect.FileDescriptor

var file_perfdog_perfdog_perfdog_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25,
	0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a,
	0x0a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xec, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x54, 0x59, 0x50, 0x45, 0x52, 0x06,
	0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf1, 0x02, 0x0a,
	0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x16,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x41, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x12, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x86, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf8, 0x01, 0x0a, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x6f, 0x67, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x6f, 0x67, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x69, 0x73, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x34,
	0x0a, 0x15, 0x69, 0x73, 0x44, 0x65, 0x76, 0x41, 0x70, 0x70, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69,
	0x73, 0x44, 0x65, 0x76, 0x41, 0x70, 0x70, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x22, 0xea, 0x02, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x70, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x37, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xe2, 0x01, 0x0a, 0x13, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc5, 0x02, 0x0a, 0x0f, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x40,
	0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0b,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xed, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x12, 0x53, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x12, 0x73, 0x79,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x5f, 0x0a, 0x12, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x7f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x4d, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x4d,
	0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x4d,
	0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42,
	0x69, 0x61, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42,
	0x69, 0x61, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x65,
	0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x08, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x40, 0x0a,
	0x0c, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61,
	0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x12,
	0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3a, 0x0a,
	0x08, 0x6f, 0x75, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x0b,
	0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x07, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x69, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x42, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x42, 0x69, 0x61, 0x73, 0x52, 0x0b, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x42, 0x69, 0x61, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x69, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x07,
	0x69, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x10, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xaf, 0x02, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x63, 0x0a, 0x17,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x74, 0x74, 0x70, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x74, 0x74, 0x70, 0x73, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x6f, 0x4e,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x70, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x22, 0x6e, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x22, 0xb6, 0x04, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x69, 0x64,
	0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x67, 0x0a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x18,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x79, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x03,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x79, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x73,
	0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x78, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x58,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x73, 0x79,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x20,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x65, 0x74,
	0x22, 0x4a, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x7b,
	0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x07,
	0x46, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x66, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x46, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x46, 0x70, 0x73, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x99, 0x02, 0x0a, 0x08, 0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6a, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6a, 0x61, 0x6e,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x4a, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x69, 0x67, 0x4a, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x74,
	0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4a, 0x61,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4a,
	0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x12, 0x6f,
	0x6e, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x13, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x0f, 0x49, 0x6f, 0x73, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x0b, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x22, 0xb4, 0x01, 0x0a,
	0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x77, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x22, 0xc2, 0x0b, 0x0a, 0x14, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d,
	0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x66, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x67, 0x66, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x67, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6a, 0x61, 0x76, 0x61, 0x48, 0x65, 0x61, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b, 0x48, 0x65, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b, 0x48, 0x65, 0x61, 0x70,
	0x12, 0x43, 0x0a, 0x0b, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x6c, 0x76, 0x69, 0x6b,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x39,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x73, 0x68,
	0x6d, 0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x61, 0x73,
	0x68, 0x6d, 0x65, 0x6d, 0x12, 0x3d, 0x0a, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x6f, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3b,
	0x0a, 0x07, 0x6a, 0x61, 0x72, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x07, 0x6a, 0x61, 0x72, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x61,
	0x70, 0x6b, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x07, 0x61, 0x70, 0x6b, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x74, 0x66, 0x4d,
	0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x74, 0x74,
	0x66, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x4d, 0x6d, 0x61, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x64, 0x65, 0x78, 0x4d, 0x6d,
	0x61, 0x70, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x6d, 0x61,
	0x70, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6d,
	0x61, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x6d, 0x61, 0x70, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d,
	0x6d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69,
	0x63, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x61, 0x74, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x6f, 0x61, 0x74, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3b,
	0x0a, 0x07, 0x61, 0x72, 0x74, 0x4d, 0x6d, 0x61, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x4d, 0x6d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x09, 0x65,
	0x67, 0x6c, 0x4d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x09, 0x65, 0x67, 0x6c, 0x4d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0b,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4d, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x77, 0x61, 0x70, 0x50, 0x73,
	0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x77, 0x61, 0x70, 0x50, 0x73, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x49, 0x6f, 0x73,
	0x31, 0x30, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x61,
	0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x49, 0x6f, 0x73, 0x31,
	0x31, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x78, 0x63, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x78, 0x63, 0x6f,
	0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a,
	0x0b, 0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x22, 0x78, 0x0a, 0x0c, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x70, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4f,
	0x0a, 0x0b, 0x43, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22,
	0x53, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x22, 0x4f, 0x0a, 0x0b, 0x47, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0x4f, 0x0a, 0x0b, 0x4e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x22, 0x5b, 0x0a, 0x0d, 0x43, 0x74, 0x78, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x74, 0x78, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x74, 0x78, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x22, 0x55, 0x0a, 0x0b, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x22, 0x6f, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x1e, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6c, 0x6f, 0x67, 0x22, 0x52, 0x0a, 0x0e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x1d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x89, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x6c, 0x69,
	0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a,
	0x16, 0x6e, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x16, 0x6e, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x13, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x74,
	0x69, 0x6c, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x10, 0x74, 0x69, 0x6c, 0x65, 0x72, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x70, 0x75,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x79,
	0x63, 0x6c, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x08,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x12, 0x4a, 0x0a, 0x0f, 0x70, 0x69, 0x78, 0x65,
	0x6c, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x52, 0x0f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x6e, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72,
	0x70, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x72, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0d, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x70, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x14, 0x4d,
	0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x32, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x32, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x6c,
	0x32, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x52, 0x0d, 0x6c, 0x32, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x52, 0x07, 0x62, 0x75, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x13, 0x51, 0x43, 0x6f, 0x6d,
	0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x0e, 0x67, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x42, 0x75,
	0x73, 0x42, 0x75, 0x73, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x0a, 0x67,
	0x70, 0x75, 0x42, 0x75, 0x73, 0x42, 0x75, 0x73, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x73, 0x68, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x42, 0x75, 0x73, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x75, 0x73, 0x79, 0x12, 0x62, 0x0a,
	0x1b, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0xe2, 0x02, 0x0a, 0x14, 0x51, 0x43, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x32, 0x4d, 0x69, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x32, 0x4d, 0x69, 0x73, 0x73, 0x12, 0x56,
	0x0a, 0x15, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52,
	0x15, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x4f, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xfe, 0x01, 0x0a, 0x14, 0x51, 0x43, 0x6f, 0x6d, 0x47,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a,
	0x17, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x17, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x18, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x68, 0x61, 0x64, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x12, 0x50, 0x56, 0x52, 0x47,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x69, 0x6c, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x0b, 0x74,
	0x69, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x68, 0x73,
	0x72, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x52, 0x0d, 0x68, 0x73, 0x72, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x70, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x09, 0x73, 0x70, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x13, 0x50, 0x56, 0x52, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x70, 0x75, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x52, 0x11, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x52, 0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x52, 0x12, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x16, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x22, 0xb5, 0x02, 0x0a, 0x13, 0x50, 0x56, 0x52, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x17, 0x73, 0x68, 0x61, 0x64, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x56, 0x0a, 0x15, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x50, 0x69, 0x78, 0x65,
	0x6c, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x15, 0x73, 0x68, 0x61, 0x64, 0x65, 0x64, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x08,
	0x6f, 0x76, 0x65, 0x72, 0x44, 0x72, 0x61, 0x77, 0x22, 0xfb, 0x02, 0x0a, 0x13, 0x49, 0x6f, 0x73,
	0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0f, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x22, 0xc3, 0x04, 0x0a, 0x13, 0x49, 0x6f, 0x73, 0x47, 0x50,
	0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a,
	0x15, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x15, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x14, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x14, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x5d, 0x0a,
	0x18, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x18, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10,
	0x67, 0x70, 0x75, 0x52, 0x65, 0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x10, 0x67, 0x70, 0x75, 0x52, 0x65,
	0x61, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x4f, 0x0a, 0x11, 0x67,
	0x70, 0x75, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x67, 0x70, 0x75, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xe7, 0x02, 0x0a,
	0x13, 0x49, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6c, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x75, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x6c, 0x75, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x0e, 0x61, 0x6c, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x0e, 0x66, 0x33, 0x32, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x66, 0x33, 0x32,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x66,
	0x31, 0x36, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0e, 0x66, 0x31, 0x36, 0x55, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x18, 0x49, 0x6f, 0x73, 0x47, 0x50, 0x55,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x65,
	0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x6d, 0x6f, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x6f,
	0x48, 0x65, 0x61, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x6f,
	0x48, 0x65, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa7, 0x01, 0x0a,
	0x0f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x61, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x72, 0x61, 0x77, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x80, 0x02, 0x0a, 0x12, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xde, 0x01, 0x0a,
	0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x49, 0x4f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x72, 0x65, 0x61, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x5f, 0x0a,
	0x0d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5f,
	0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xa8, 0x01, 0x0a, 0x10, 0x47, 0x70, 0x75, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x75, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x0f, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x67, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x47, 0x55, 0x73, 0x61, 0x67, 0x65, 0x33, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x47, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x33, 0x44, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x33, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x55, 0x73, 0x61, 0x67, 0x65, 0x33, 0x44, 0x12, 0x4f, 0x0a, 0x10, 0x67,
	0x70, 0x75, 0x47, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x67, 0x70, 0x75, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x12,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x74, 0x66, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xe5, 0x02, 0x0a, 0x15, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x70, 0x75, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x61, 0x70,
	0x70, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x70,
	0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x64,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x09, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x4e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x70, 0x75, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70,
	0x12, 0x34, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x22, 0x89, 0x03, 0x0a, 0x0b, 0x41, 0x6d, 0x64, 0x47, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x6d, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x48, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72,
	0x65, 0x71, 0x22, 0x52, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x22, 0x5c, 0x0a, 0x12, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43,
	0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x10,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4e, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x62, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x22, 0x3d, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x82, 0x01, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x76, 0x0a, 0x18, 0x44, 0x65, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x3a, 0x0a, 0x14, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49, 0x64, 0x22, 0xab, 0x03, 0x0a, 0x0d, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xd3, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x65, 0x6e, 0x64, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x50, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x42, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x43, 0x0a, 0x0c, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0xf2, 0x02, 0x0a, 0x0e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5e, 0x0a, 0x15, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x43, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x53, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x53,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x05,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x68,
	0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52,
	0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x0f, 0x43, 0x70, 0x75, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x70, 0x75, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x70, 0x75, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x22, 0x52, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x65, 0x70, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x89, 0x06, 0x0a, 0x11, 0x44, 0x65,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x46, 0x6c, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x46, 0x6c, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x70, 0x75, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x62,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x1b, 0x61, 0x76, 0x67, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x61, 0x76, 0x67, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x41,
	0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x4e, 0x74, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x35, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x74, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x4e, 0x74, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f,
	0x74, 0x65, 0x4e, 0x74, 0x66, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x4e, 0x74,
	0x66, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x74, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x4e, 0x74, 0x66, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x4e, 0x74, 0x66, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x58, 0x0a, 0x12, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x15, 0x54, 0x63, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x54, 0x63, 0x70, 0x52, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x63, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x63, 0x70,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x15, 0x74, 0x63, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x54, 0x63,
	0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65,
	0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x55, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x0b, 0x44, 0x6e, 0x73,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x5d, 0x0a, 0x09, 0x44, 0x6e, 0x73, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x03, 0x0a, 0x0f, 0x44, 0x6e, 0x73, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x6e, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6e, 0x73, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x64, 0x6e, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x10, 0x49, 0x63, 0x6d, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e,
	0x22, 0xde, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x4e, 0x0a, 0x0f, 0x74, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x0f, 0x75, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x64, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x69, 0x63, 0x6d, 0x70, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x5f, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x22, 0x57, 0x0a, 0x0b, 0x52, 0x61, 0x77, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x69, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x08,
	0x54, 0x6c, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x14, 0x54, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x49, 0x70, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13,
	0x49, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x70, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x0a, 0x69, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x73, 0x22,
	0x80, 0x07, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x63, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54,
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54,
	0x0a, 0x11, 0x74, 0x63, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x63,
	0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x63, 0x70, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x52,
	0x61, 0x77, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x52, 0x61, 0x77, 0x49, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x39, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6c, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x6c, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x74, 0x6c,
	0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6c, 0x73,
	0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x14, 0x74, 0x6c, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x13, 0x69, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x13, 0x69, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59, 0x0a, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69,
	0x63, 0x22, 0x50, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x22, 0x51, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5c,
	0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x43, 0x70, 0x75, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x1b, 0x0a,
	0x0f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a,
	0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0b, 0x67, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a,
	0x0e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x70, 0x75,
	0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x42, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53,
	0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x16, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x6d, 0x61, 0x6c, 0x69,
	0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6c, 0x69, 0x47, 0x70,
	0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x13, 0x6d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x6d,
	0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x14, 0x6d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x61,
	0x6c, 0x69, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x5a, 0x0a, 0x13, 0x71, 0x63, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x51, 0x43, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00, 0x52, 0x13, 0x71, 0x63, 0x6f, 0x6d, 0x47,
	0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x5d,
	0x0a, 0x14, 0x71, 0x63, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x43, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x71, 0x63, 0x6f, 0x6d, 0x47, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a,
	0x14, 0x71, 0x63, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53,
	0x68, 0x61, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x51, 0x43, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x71, 0x63, 0x6f, 0x6d, 0x47, 0x70, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x12,
	0x70, 0x76, 0x72, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x56, 0x52,
	0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48,
	0x00, 0x52, 0x12, 0x70, 0x76, 0x72, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x76, 0x72, 0x47, 0x70, 0x75, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x56, 0x52, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x70, 0x76,
	0x72, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x76, 0x72, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x56, 0x52, 0x47, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x70, 0x76, 0x72, 0x47, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a,
	0x18, 0x70, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18,
	0x70, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x54,
	0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x67, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b,
	0x6e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x54, 0x0a, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65,
	0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x4d, 0x65, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5d, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x57, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x46, 0x75,
	0x6c, 0x6c, 0x79, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x41, 0x70, 0x70, 0x46,
	0x75, 0x6c, 0x6c, 0x79, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x45, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x11, 0x63,
	0x70, 0x75, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x68,
	0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x70, 0x75, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x22, 0xdc, 0x0e, 0x0a, 0x0b, 0x49, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a,
	0x0f, 0x69, 0x6f, 0x73, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x47, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6f,
	0x73, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a,
	0x0c, 0x69, 0x6f, 0x73, 0x31, 0x30, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x31, 0x30, 0x4d, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6f, 0x73, 0x31, 0x30, 0x4d, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x6f, 0x73, 0x31, 0x31, 0x4d, 0x65, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6f, 0x73, 0x31, 0x31, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x69,
	0x6f, 0x73, 0x31, 0x31, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x74, 0x78, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x74,
	0x78, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x74, 0x78, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b,
	0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0b, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x6c,
	0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73,
	0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68,
	0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x69, 0x6f, 0x73, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6f, 0x73,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4e, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f,
	0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x58, 0x0a, 0x12, 0x69, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x6f, 0x73,
	0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x47, 0x50,
	0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6f,
	0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x68, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x0e, 0x69, 0x6f, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f,
	0x73, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6f, 0x73, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x18, 0x70, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x70, 0x65, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xc0, 0x03, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x11, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x79, 0x4d, 0x6f,
	0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x6f, 0x48, 0x65, 0x61, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x95, 0x0e, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4a,
	0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x73, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x6f, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x49, 0x4f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x69, 0x6f, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x47, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x74, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x74, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x74,
	0x66, 0x12, 0x52, 0x0a, 0x0e, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x47, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x70, 0x75, 0x46,
	0x72, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x12, 0x48,
	0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6d,
	0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6d, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x61, 0x6d, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x54,
	0x0a, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x72, 0x65, 0x65, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x72, 0x65, 0x65, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51,
	0x0a, 0x0f, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x13, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x0c, 0x58, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0a,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a,
	0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf7, 0x06, 0x0a,
	0x13, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x02, 0x67, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x52, 0x02, 0x67, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x33,
	0x0a, 0x03, 0x68, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x03,
	0x68, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x39, 0x0a, 0x06, 0x64, 0x6d, 0x61, 0x62,
	0x75, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x64, 0x6d, 0x61,
	0x62, 0x75, 0x66, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x72, 0x6b, 0x54, 0x73, 0x48, 0x65, 0x61, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x72, 0x6b, 0x54, 0x73,
	0x48, 0x65, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x65,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x48, 0x65, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x02, 0x64, 0x62, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x02, 0x64, 0x62, 0x12, 0x31, 0x0a, 0x02,
	0x73, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x02, 0x73, 0x6f, 0x12,
	0x33, 0x0a, 0x03, 0x74, 0x74, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x03, 0x74, 0x74, 0x66, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x47, 0x0a,
	0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e, 0x50, 0x61, 0x67,
	0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x48, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x22, 0xe5, 0x12, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x70, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x07, 0x66, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x48, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6a, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4a, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x61, 0x6e, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x47, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x46,
	0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x4d, 0x65, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x0d, 0x63,
	0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x70, 0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x70,
	0x75, 0x46, 0x72, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x42, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x65, 0x6d,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a,
	0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a,
	0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x16, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x16, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x1a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1a, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x18, 0x70, 0x65, 0x72,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x70, 0x65, 0x72, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x70,
	0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x70, 0x75,
	0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x6e, 0x70, 0x75, 0x54,
	0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x6e, 0x70, 0x75, 0x54, 0x65, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x11,
	0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x11, 0x64, 0x65, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x0f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x79, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x5d, 0x0a,
	0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x51, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70,
	0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x72,
	0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x70, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x61, 0x70, 0x70, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x44,
	0x72, 0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x06, 0x0a, 0x08,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x69, 0x6f,
	0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45,
	0x0a, 0x0c, 0x78, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x78, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8,
	0x06, 0x0a, 0x0d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x36, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x49, 0x6f, 0x73, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0b, 0x49, 0x6f, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x00, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x0e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x46, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a,
	0x13, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0c, 0x78, 0x62, 0x6f,
	0x78, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0c, 0x78, 0x62, 0x6f, 0x78, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50, 0x65, 0x72, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61,
	0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0f, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a, 0x0e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x65,
	0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x70, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x56, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x21,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x6d, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x67, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x10,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x43, 0x0a, 0x07, 0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x69, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x4a, 0x0a,
	0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x53, 0x61,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0c, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x7a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x76, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x49, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x6f,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x6f, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64,
	0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x0d, 0x70, 0x69, 0x64, 0x32, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x74, 0x2e, 0x50, 0x69, 0x64, 0x32, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x69, 0x64, 0x32, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x1a, 0x5e, 0x0a, 0x12, 0x50, 0x69, 0x64, 0x32, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x0e, 0x53, 0x79, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd2, 0x01,
	0x0a, 0x12, 0x49, 0x6f, 0x73, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x62, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x62, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x64, 0x22, 0x73, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x61,
	0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x61, 0x70, 0x70, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x2b, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x27, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x14, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x43, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x22, 0x16, 0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x61, 0x73, 0x65, 0x54,
	0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x68, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x44, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x44, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x45,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x6f, 0x67, 0x41, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64,
	0x6f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x65, 0x72, 0x66, 0x44,
	0x6f, 0x67, 0x41, 0x70, 0x70, 0x22, 0x55, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x13, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x73,
	0x70, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x46,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f,
	0x72, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x46, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x71, 0x22, 0x66, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x22,
	0xb7, 0x01, 0x0a, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x05, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x22, 0xcb, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x74, 0x4b,
	0x65, 0x79, 0x22, 0x64, 0x0a, 0x15, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x22, 0x71, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x12, 0x49, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x22, 0x70, 0x0a,
	0x25, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22,
	0x37, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x70, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x25, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x7a, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f, 0x53, 0x54, 0x59,
	0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x57, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x42, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x1a, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x41, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x41, 0x70, 0x70,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x2a, 0x33, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x54, 0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4f, 0x53, 0x54, 0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x59, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x42, 0x4f, 0x58,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x41, 0x52, 0x4d, 0x4f, 0x4e, 0x59, 0x10, 0x06, 0x2a,
	0x23, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x42, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49,
	0x46, 0x49, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x2a, 0xd3, 0x07, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x49, 0x44, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x50, 0x55, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x50, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f,
	0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x58, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x4b, 0x45, 0x55, 0x50,
	0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x4f,
	0x47, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4f, 0x53, 0x5f, 0x47,
	0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4f,
	0x53, 0x5f, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x12,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x53, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50,
	0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59,
	0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x48, 0x41, 0x44, 0x45, 0x52, 0x10, 0x18, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55,
	0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x42, 0x52, 0x49, 0x47, 0x48, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x1e, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x50, 0x55, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x64, 0x12, 0x12, 0x0a,
	0x0e, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x49, 0x4f, 0x10,
	0x66, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53,
	0x5f, 0x47, 0x50, 0x55, 0x10, 0x69, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57,
	0x53, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x53, 0x10, 0x6a, 0x12, 0x16, 0x0a, 0x12,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f,
	0x52, 0x59, 0x10, 0x6b, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f,
	0x4e, 0x56, 0x49, 0x44, 0x49, 0x41, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6d,
	0x12, 0x16, 0x0a, 0x12, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x4b,
	0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x53, 0x5f, 0x41, 0x4d, 0x44, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x55, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x6f, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x54,
	0x52, 0x45, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x70, 0x2a, 0x56, 0x0a, 0x13, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x58, 0x42, 0x4f, 0x58, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x03, 0x2a, 0x4c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x4e, 0x52, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x04, 0x2a,
	0x40, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4d, 0x50, 0x10,
	0x08, 0x2a, 0x31, 0x0a, 0x0a, 0x55, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x01, 0x2a, 0x4d, 0x0a, 0x15, 0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x2a, 0x31, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x52, 0x46, 0x44, 0x4f, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x2a, 0x73, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x10, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x43,
	0x41, 0x50, 0x10, 0x03, 0x2a, 0x2f, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x08, 0x0a,
	0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x42, 0x55, 0x46, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x15, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x02,
	0x2a, 0x3f, 0x0a, 0x16, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f,
	0x50, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x50, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x44, 0x45, 0x10,
	0x02, 0x2a, 0x35, 0x0a, 0x09, 0x44, 0x58, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x58, 0x5f, 0x39,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x58, 0x5f, 0x31, 0x31, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x58, 0x5f, 0x31, 0x32, 0x10, 0x03, 0x32, 0xe1, 0x29, 0x0a, 0x0e, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x11, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x1f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6f, 0x73, 0x31, 0x37, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x69,
	0x6e, 0x69, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0f, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0a, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15,
	0x73, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x53, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x1b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x55, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x53, 0x79, 0x73, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12,
	0x6f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65,
	0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x61, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x76, 0x0a, 0x18,
	0x67, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x50, 0x65, 0x72, 0x66, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x14,
	0x67, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x11, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x43, 0x61, 0x73, 0x65, 0x54, 0x6f, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x24, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x43,
	0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x70,
	0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x1a,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1a, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x16, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x6b, 0x69, 0x6c,
	0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65,
	0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x1c, 0x73, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x97, 0x01,
	0x0a, 0x21, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x37, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x22, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64,
	0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x7a, 0x0a, 0x22, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72,
	0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x15,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x35, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x69,
	0x65, 0x64, 0x42, 0x79, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41,
	0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x19, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x13, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x41, 0x70,
	0x70, 0x54, 0x65, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66,
	0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x41, 0x70, 0x70, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x50, 0x01,
	0x5a, 0x08, 0x2f, 0x70, 0x65, 0x72, 0x66, 0x64, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_perfdog_perfdog_perfdog_proto_rawDescOnce sync.Once
	file_perfdog_perfdog_perfdog_proto_rawDescData = file_perfdog_perfdog_perfdog_proto_rawDesc
)

func file_perfdog_perfdog_perfdog_proto_rawDescGZIP() []byte {
	file_perfdog_perfdog_perfdog_proto_rawDescOnce.Do(func() {
		file_perfdog_perfdog_perfdog_proto_rawDescData = protoimpl.X.CompressGZIP(file_perfdog_perfdog_perfdog_proto_rawDescData)
	})
	return file_perfdog_perfdog_perfdog_proto_rawDescData
}

var file_perfdog_perfdog_perfdog_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_perfdog_perfdog_perfdog_proto_msgTypes = make([]protoimpl.MessageInfo, 234)
var file_perfdog_perfdog_perfdog_proto_goTypes = []interface{}{
	(DEVICE_EVENTTYPE)(0),                         // 0: com.perfdog.proto.DEVICE_EVENTTYPE
	(DEVICE_OSTYPE)(0),                            // 1: com.perfdog.proto.DEVICE_OSTYPE
	(DEVICE_CONTYPE)(0),                           // 2: com.perfdog.proto.DEVICE_CONTYPE
	(DEVICE_ACCESS_TYPE)(0),                       // 3: com.perfdog.proto.DEVICE_ACCESS_TYPE
	(PerfDataType)(0),                             // 4: com.perfdog.proto.PerfDataType
	(DynamicPerfDataType)(0),                      // 5: com.perfdog.proto.DynamicPerfDataType
	(ProfilingMode)(0),                            // 6: com.perfdog.proto.ProfilingMode
	(NetworkProtocol)(0),                          // 7: com.perfdog.proto.NetworkProtocol
	(USAGE_TYPE)(0),                               // 8: com.perfdog.proto.USAGE_TYPE
	(BinderTransactionType)(0),                    // 9: com.perfdog.proto.BinderTransactionType
	(CounterType)(0),                              // 10: com.perfdog.proto.CounterType
	(NetworkWarningType)(0),                       // 11: com.perfdog.proto.NetworkWarningType
	(DataExportFormat)(0),                         // 12: com.perfdog.proto.DataExportFormat
	(DataInterchangeFormat)(0),                    // 13: com.perfdog.proto.DataInterchangeFormat
	(FloatingWindowMessage)(0),                    // 14: com.perfdog.proto.FloatingWindowMessage
	(FloatingWindowPosition)(0),                   // 15: com.perfdog.proto.FloatingWindowPosition
	(DXVersion)(0),                                // 16: com.perfdog.proto.DXVersion
	(*OptionalInt)(nil),                           // 17: com.perfdog.proto.OptionalInt
	(*OptionalInt64)(nil),                         // 18: com.perfdog.proto.OptionalInt64
	(*OptionalFloat)(nil),                         // 19: com.perfdog.proto.OptionalFloat
	(*OptionalDouble)(nil),                        // 20: com.perfdog.proto.OptionalDouble
	(*OptionBool)(nil),                            // 21: com.perfdog.proto.OptionBool
	(*Empty)(nil),                                 // 22: com.perfdog.proto.Empty
	(*Token)(nil),                                 // 23: com.perfdog.proto.Token
	(*UserInfo)(nil),                              // 24: com.perfdog.proto.UserInfo
	(*Device)(nil),                                // 25: com.perfdog.proto.Device
	(*GetPasswordRequest)(nil),                    // 26: com.perfdog.proto.GetPasswordRequest
	(*DeviceMessage)(nil),                         // 27: com.perfdog.proto.DeviceMessage
	(*DeviceEvent)(nil),                           // 28: com.perfdog.proto.DeviceEvent
	(*LaunchAsCollectorEvent)(nil),                // 29: com.perfdog.proto.LaunchAsCollectorEvent
	(*StartRecordEvent)(nil),                      // 30: com.perfdog.proto.StartRecordEvent
	(*AddLabelEvent)(nil),                         // 31: com.perfdog.proto.AddLabelEvent
	(*GetResolutionEvent)(nil),                    // 32: com.perfdog.proto.GetResolutionEvent
	(*GlobalEvent)(nil),                           // 33: com.perfdog.proto.GlobalEvent
	(*DeviceInfo)(nil),                            // 34: com.perfdog.proto.DeviceInfo
	(*DeviceStatus)(nil),                          // 35: com.perfdog.proto.DeviceStatus
	(*AppInfo)(nil),                               // 36: com.perfdog.proto.AppInfo
	(*AppList)(nil),                               // 37: com.perfdog.proto.AppList
	(*EnablePerfDataTypeReq)(nil),                 // 38: com.perfdog.proto.EnablePerfDataTypeReq
	(*DisablePerfDataTypeReq)(nil),                // 39: com.perfdog.proto.DisablePerfDataTypeReq
	(*DynamicPerfDataKeyInfo)(nil),                // 40: com.perfdog.proto.DynamicPerfDataKeyInfo
	(*DynamicPerfDataDesc)(nil),                   // 41: com.perfdog.proto.DynamicPerfDataDesc
	(*DynamicPerfData)(nil),                       // 42: com.perfdog.proto.DynamicPerfData
	(*DynamicDataList)(nil),                       // 43: com.perfdog.proto.DynamicDataList
	(*SystraceCategory)(nil),                      // 44: com.perfdog.proto.SystraceCategory
	(*PerfDataTypeRet)(nil),                       // 45: com.perfdog.proto.PerfDataTypeRet
	(*ScreenShotInterval)(nil),                    // 46: com.perfdog.proto.ScreenShotInterval
	(*DelayBias)(nil),                             // 47: com.perfdog.proto.DelayBias
	(*NetworkProfilingScene)(nil),                 // 48: com.perfdog.proto.NetworkProfilingScene
	(*NetworkProfilingOption)(nil),                // 49: com.perfdog.proto.NetworkProfilingOption
	(*NetworkProfilingTemplate)(nil),              // 50: com.perfdog.proto.NetworkProfilingTemplate
	(*NetworkStartTestOption)(nil),                // 51: com.perfdog.proto.NetworkStartTestOption
	(*SystraceStartTestOption)(nil),               // 52: com.perfdog.proto.SystraceStartTestOption
	(*StartTestAppReq)(nil),                       // 53: com.perfdog.proto.StartTestAppReq
	(*StartTestSysProcessReq)(nil),                // 54: com.perfdog.proto.StartTestSysProcessReq
	(*StartTestRet)(nil),                          // 55: com.perfdog.proto.StartTestRet
	(*OpenPerfDataStreamReq)(nil),                 // 56: com.perfdog.proto.OpenPerfDataStreamReq
	(*StopTestReq)(nil),                           // 57: com.perfdog.proto.StopTestReq
	(*FrameTime)(nil),                             // 58: com.perfdog.proto.FrameTime
	(*FpsData)(nil),                               // 59: com.perfdog.proto.FpsData
	(*FrameTimeData)(nil),                         // 60: com.perfdog.proto.FrameTimeData
	(*JankData)(nil),                              // 61: com.perfdog.proto.JankData
	(*AndroidGpuUsageData)(nil),                   // 62: com.perfdog.proto.AndroidGpuUsageData
	(*IosGpuUsageData)(nil),                       // 63: com.perfdog.proto.IosGpuUsageData
	(*GpuFreqData)(nil),                           // 64: com.perfdog.proto.GpuFreqData
	(*AndroidMemData)(nil),                        // 65: com.perfdog.proto.AndroidMemData
	(*AndroidMemDetailData)(nil),                  // 66: com.perfdog.proto.AndroidMemDetailData
	(*Ios10MemData)(nil),                          // 67: com.perfdog.proto.Ios10MemData
	(*Ios11MemData)(nil),                          // 68: com.perfdog.proto.Ios11MemData
	(*CoreUsageData)(nil),                         // 69: com.perfdog.proto.CoreUsageData
	(*CpuFreqData)(nil),                           // 70: com.perfdog.proto.CpuFreqData
	(*CpuUsageData)(nil),                          // 71: com.perfdog.proto.CpuUsageData
	(*CpuTempData)(nil),                           // 72: com.perfdog.proto.CpuTempData
	(*BatteryTempData)(nil),                       // 73: com.perfdog.proto.BatteryTempData
	(*GpuTempData)(nil),                           // 74: com.perfdog.proto.GpuTempData
	(*NpuTempData)(nil),                           // 75: com.perfdog.proto.NpuTempData
	(*CtxSwitchData)(nil),                         // 76: com.perfdog.proto.CtxSwitchData
	(*WakeupsData)(nil),                           // 77: com.perfdog.proto.WakeupsData
	(*BatteryData)(nil),                           // 78: com.perfdog.proto.BatteryData
	(*NetworkData)(nil),                           // 79: com.perfdog.proto.NetworkData
	(*SyslogData)(nil),                            // 80: com.perfdog.proto.SyslogData
	(*ScreenShotData)(nil),                        // 81: com.perfdog.proto.ScreenShotData
	(*WarningData)(nil),                           // 82: com.perfdog.proto.WarningData
	(*ErrorData)(nil),                             // 83: com.perfdog.proto.ErrorData
	(*MaliGpuCounterBasic)(nil),                   // 84: com.perfdog.proto.MaliGpuCounterBasic
	(*MaliGpuCounterShader)(nil),                  // 85: com.perfdog.proto.MaliGpuCounterShader
	(*MaliGpuCounterMemory)(nil),                  // 86: com.perfdog.proto.MaliGpuCounterMemory
	(*QComGpuCounterBasic)(nil),                   // 87: com.perfdog.proto.QComGpuCounterBasic
	(*QComGpuCounterMemory)(nil),                  // 88: com.perfdog.proto.QComGpuCounterMemory
	(*QComGpuCounterShader)(nil),                  // 89: com.perfdog.proto.QComGpuCounterShader
	(*PVRGpuCounterBasic)(nil),                    // 90: com.perfdog.proto.PVRGpuCounterBasic
	(*PVRGpuCounterMemory)(nil),                   // 91: com.perfdog.proto.PVRGpuCounterMemory
	(*PVRGpuCounterShader)(nil),                   // 92: com.perfdog.proto.PVRGpuCounterShader
	(*IosGPUCounterBasics)(nil),                   // 93: com.perfdog.proto.IosGPUCounterBasics
	(*IosGPUCounterMemory)(nil),                   // 94: com.perfdog.proto.IosGPUCounterMemory
	(*IosGPUCounterShader)(nil),                   // 95: com.perfdog.proto.IosGPUCounterShader
	(*IosGPUCounterSampleCount)(nil),              // 96: com.perfdog.proto.IosGPUCounterSampleCount
	(*SwitchMemData)(nil),                         // 97: com.perfdog.proto.SwitchMemData
	(*UnityMonoHeapData)(nil),                     // 98: com.perfdog.proto.UnityMonoHeapData
	(*WindowsCpuUsage)(nil),                       // 99: com.perfdog.proto.WindowsCpuUsage
	(*WindowsRender)(nil),                         // 100: com.perfdog.proto.WindowsRender
	(*WindowsRenderData)(nil),                     // 101: com.perfdog.proto.WindowsRenderData
	(*WindowsMemoryUsage)(nil),                    // 102: com.perfdog.proto.WindowsMemoryUsage
	(*WindowsIOUsage)(nil),                        // 103: com.perfdog.proto.WindowsIOUsage
	(*WindowsThread)(nil),                         // 104: com.perfdog.proto.WindowsThread
	(*WindowsHandle)(nil),                         // 105: com.perfdog.proto.WindowsHandle
	(*GpuGraphicsUsage)(nil),                      // 106: com.perfdog.proto.GpuGraphicsUsage
	(*WindowsGpuUsage)(nil),                       // 107: com.perfdog.proto.WindowsGpuUsage
	(*WindowsPerfTypeNtf)(nil),                    // 108: com.perfdog.proto.WindowsPerfTypeNtf
	(*WindowsGpuMemoryUsage)(nil),                 // 109: com.perfdog.proto.WindowsGpuMemoryUsage
	(*NvidiaGpuUsage)(nil),                        // 110: com.perfdog.proto.NvidiaGpuUsage
	(*AmdGpuUsage)(nil),                           // 111: com.perfdog.proto.AmdGpuUsage
	(*WindowsCpuFreq)(nil),                        // 112: com.perfdog.proto.WindowsCpuFreq
	(*WindowsCpuCoreFreq)(nil),                    // 113: com.perfdog.proto.WindowsCpuCoreFreq
	(*WindowsCpuCoreUsage)(nil),                   // 114: com.perfdog.proto.WindowsCpuCoreUsage
	(*WindowsDiskUsage)(nil),                      // 115: com.perfdog.proto.WindowsDiskUsage
	(*Frame)(nil),                                 // 116: com.perfdog.proto.Frame
	(*Value)(nil),                                 // 117: com.perfdog.proto.Value
	(*ListValue)(nil),                             // 118: com.perfdog.proto.ListValue
	(*PerFrameData)(nil),                          // 119: com.perfdog.proto.PerFrameData
	(*ThreadInfo)(nil),                            // 120: com.perfdog.proto.ThreadInfo
	(*DeepProfilingProcessInfo)(nil),              // 121: com.perfdog.proto.DeepProfilingProcessInfo
	(*ThreadStateExtraInfo)(nil),                  // 122: com.perfdog.proto.ThreadStateExtraInfo
	(*RunningStateExtraInfo)(nil),                 // 123: com.perfdog.proto.RunningStateExtraInfo
	(*BinderSession)(nil),                         // 124: com.perfdog.proto.BinderSession
	(*BinderTransactionInfo)(nil),                 // 125: com.perfdog.proto.BinderTransactionInfo
	(*Metadata)(nil),                              // 126: com.perfdog.proto.Metadata
	(*MetadataList)(nil),                          // 127: com.perfdog.proto.MetadataList
	(*SliceExtraInfo)(nil),                        // 128: com.perfdog.proto.SliceExtraInfo
	(*Slice)(nil),                                 // 129: com.perfdog.proto.Slice
	(*ThreadFlameData)(nil),                       // 130: com.perfdog.proto.ThreadFlameData
	(*ThreadScheduleData)(nil),                    // 131: com.perfdog.proto.ThreadScheduleData
	(*CpuScheduleData)(nil),                       // 132: com.perfdog.proto.CpuScheduleData
	(*CounterValue)(nil),                          // 133: com.perfdog.proto.CounterValue
	(*DeepProfilingCounterData)(nil),              // 134: com.perfdog.proto.DeepProfilingCounterData
	(*DeepProfilingAsyncEvent)(nil),               // 135: com.perfdog.proto.DeepProfilingAsyncEvent
	(*DeepProfilingData)(nil),                     // 136: com.perfdog.proto.DeepProfilingData
	(*PerFramePowerConsumption)(nil),              // 137: com.perfdog.proto.PerFramePowerConsumption
	(*CustomData)(nil),                            // 138: com.perfdog.proto.CustomData
	(*AddNoteNtf)(nil),                            // 139: com.perfdog.proto.AddNoteNtf
	(*SetLabelNtf)(nil),                           // 140: com.perfdog.proto.SetLabelNtf
	(*CustomDataList)(nil),                        // 141: com.perfdog.proto.CustomDataList
	(*NetworkWarning)(nil),                        // 142: com.perfdog.proto.NetworkWarning
	(*TcpConnectionCount)(nil),                    // 143: com.perfdog.proto.TcpConnectionCount
	(*TrafficStatistics)(nil),                     // 144: com.perfdog.proto.TrafficStatistics
	(*ServerLatency)(nil),                         // 145: com.perfdog.proto.ServerLatency
	(*TcpRetransmissionItem)(nil),                 // 146: com.perfdog.proto.TcpRetransmissionItem
	(*TcpRetransmission)(nil),                     // 147: com.perfdog.proto.TcpRetransmission
	(*TcpPacketDetail)(nil),                       // 148: com.perfdog.proto.TcpPacketDetail
	(*UdpPacketDetail)(nil),                       // 149: com.perfdog.proto.UdpPacketDetail
	(*DnsQuestion)(nil),                           // 150: com.perfdog.proto.DnsQuestion
	(*DnsAnswer)(nil),                             // 151: com.perfdog.proto.DnsAnswer
	(*DnsPacketDetail)(nil),                       // 152: com.perfdog.proto.DnsPacketDetail
	(*IcmpPacketDetail)(nil),                      // 153: com.perfdog.proto.IcmpPacketDetail
	(*PacketDetailItem)(nil),                      // 154: com.perfdog.proto.PacketDetailItem
	(*PacketDetail)(nil),                          // 155: com.perfdog.proto.PacketDetail
	(*RawIpPacket)(nil),                           // 156: com.perfdog.proto.RawIpPacket
	(*TlsAlert)(nil),                              // 157: com.perfdog.proto.TlsAlert
	(*TlsHandshakeComplete)(nil),                  // 158: com.perfdog.proto.TlsHandshakeComplete
	(*HttpRequest)(nil),                           // 159: com.perfdog.proto.HttpRequest
	(*IpTraffic)(nil),                             // 160: com.perfdog.proto.IpTraffic
	(*IpTrafficStatistics)(nil),                   // 161: com.perfdog.proto.IpTrafficStatistics
	(*NetworkProfilingData)(nil),                  // 162: com.perfdog.proto.NetworkProfilingData
	(*ThreadCpuUsage)(nil),                        // 163: com.perfdog.proto.ThreadCpuUsage
	(*ThreadCpuUsageList)(nil),                    // 164: com.perfdog.proto.ThreadCpuUsageList
	(*ClockSnapshot)(nil),                         // 165: com.perfdog.proto.ClockSnapshot
	(*AppLaunchingTime)(nil),                      // 166: com.perfdog.proto.AppLaunchingTime
	(*AppFullyDrawnTime)(nil),                     // 167: com.perfdog.proto.AppFullyDrawnTime
	(*ScreenBrightness)(nil),                      // 168: com.perfdog.proto.ScreenBrightness
	(*BatteryLevel)(nil),                          // 169: com.perfdog.proto.BatteryLevel
	(*TestingInfo)(nil),                           // 170: com.perfdog.proto.TestingInfo
	(*CpuThrottlingData)(nil),                     // 171: com.perfdog.proto.CpuThrottlingData
	(*FrameGeneration)(nil),                       // 172: com.perfdog.proto.FrameGeneration
	(*AndroidPerfData)(nil),                       // 173: com.perfdog.proto.AndroidPerfData
	(*IosPerfData)(nil),                           // 174: com.perfdog.proto.IosPerfData
	(*SwitchPerfData)(nil),                        // 175: com.perfdog.proto.SwitchPerfData
	(*WindowsPerfData)(nil),                       // 176: com.perfdog.proto.WindowsPerfData
	(*PlayStationPerfData)(nil),                   // 177: com.perfdog.proto.PlayStationPerfData
	(*XboxPerfData)(nil),                          // 178: com.perfdog.proto.XboxPerfData
	(*HarmonyMemoryDetail)(nil),                   // 179: com.perfdog.proto.HarmonyMemoryDetail
	(*HarmonyMemData)(nil),                        // 180: com.perfdog.proto.HarmonyMemData
	(*HarmonyPerfData)(nil),                       // 181: com.perfdog.proto.HarmonyPerfData
	(*PerfData)(nil),                              // 182: com.perfdog.proto.PerfData
	(*CachePerfData)(nil),                         // 183: com.perfdog.proto.CachePerfData
	(*ScreenshotFile)(nil),                        // 184: com.perfdog.proto.ScreenshotFile
	(*MemoryReportData)(nil),                      // 185: com.perfdog.proto.MemoryReportData
	(*CachePerfDataPacked)(nil),                   // 186: com.perfdog.proto.CachePerfDataPacked
	(*SetLabelReq)(nil),                           // 187: com.perfdog.proto.SetLabelReq
	(*SetLabelRet)(nil),                           // 188: com.perfdog.proto.SetLabelRet
	(*UpdateLabelReq)(nil),                        // 189: com.perfdog.proto.UpdateLabelReq
	(*AddNoteReq)(nil),                            // 190: com.perfdog.proto.AddNoteReq
	(*RemoveNoteReq)(nil),                         // 191: com.perfdog.proto.RemoveNoteReq
	(*SetDataUploadServerReq)(nil),                // 192: com.perfdog.proto.SetDataUploadServerReq
	(*SetDataUploadServerRsp)(nil),                // 193: com.perfdog.proto.SetDataUploadServerRsp
	(*SaveDataReq)(nil),                           // 194: com.perfdog.proto.SaveDataReq
	(*ExtraInfo)(nil),                             // 195: com.perfdog.proto.ExtraInfo
	(*UploadToServerResult)(nil),                  // 196: com.perfdog.proto.UploadToServerResult
	(*ExportToFileResult)(nil),                    // 197: com.perfdog.proto.ExportToFileResult
	(*SaveDataRsp)(nil),                           // 198: com.perfdog.proto.SaveDataRsp
	(*GetAppRunningProcessReq)(nil),               // 199: com.perfdog.proto.GetAppRunningProcessReq
	(*GetAppWindowsMapReq)(nil),                   // 200: com.perfdog.proto.GetAppWindowsMapReq
	(*ProcessInfo)(nil),                           // 201: com.perfdog.proto.ProcessInfo
	(*GetAppRunningProcessRet)(nil),               // 202: com.perfdog.proto.GetAppRunningProcessRet
	(*AppWindow)(nil),                             // 203: com.perfdog.proto.AppWindow
	(*GetAppWindowsMapRet)(nil),                   // 204: com.perfdog.proto.GetAppWindowsMapRet
	(*SysProcessInfo)(nil),                        // 205: com.perfdog.proto.SysProcessInfo
	(*GetRunningSysProcessRet)(nil),               // 206: com.perfdog.proto.GetRunningSysProcessRet
	(*IosEnergyUsageData)(nil),                    // 207: com.perfdog.proto.IosEnergyUsageData
	(*UpdateAppInfoReq)(nil),                      // 208: com.perfdog.proto.UpdateAppInfoReq
	(*UpdateAppInfoRet)(nil),                      // 209: com.perfdog.proto.UpdateAppInfoRet
	(*GetDeviceCacheDataReq)(nil),                 // 210: com.perfdog.proto.GetDeviceCacheDataReq
	(*GetDeviceCacheDataPackedReq)(nil),           // 211: com.perfdog.proto.GetDeviceCacheDataPackedReq
	(*CreateTaskReq)(nil),                         // 212: com.perfdog.proto.CreateTaskReq
	(*CreateTaskRsp)(nil),                         // 213: com.perfdog.proto.CreateTaskRsp
	(*ArchiveCaseToTaskReq)(nil),                  // 214: com.perfdog.proto.ArchiveCaseToTaskReq
	(*ArchiveCaseToTaskRsp)(nil),                  // 215: com.perfdog.proto.ArchiveCaseToTaskRsp
	(*ShareCaseReq)(nil),                          // 216: com.perfdog.proto.ShareCaseReq
	(*ShareCaseRsp)(nil),                          // 217: com.perfdog.proto.ShareCaseRsp
	(*DeviceListRsp)(nil),                         // 218: com.perfdog.proto.DeviceListRsp
	(*Preferences)(nil),                           // 219: com.perfdog.proto.Preferences
	(*SetPreferencesReq)(nil),                     // 220: com.perfdog.proto.SetPreferencesReq
	(*SetPreferencesRsp)(nil),                     // 221: com.perfdog.proto.SetPreferencesRsp
	(*GetRenderResolutionReq)(nil),                // 222: com.perfdog.proto.GetRenderResolutionReq
	(*GetRenderResolutionRet)(nil),                // 223: com.perfdog.proto.GetRenderResolutionRet
	(*GetCpuInfoReq)(nil),                         // 224: com.perfdog.proto.GetCpuInfoReq
	(*GetCpuInfoRsp)(nil),                         // 225: com.perfdog.proto.GetCpuInfoRsp
	(*SetMemorySamplingFrequencyReq)(nil),         // 226: com.perfdog.proto.SetMemorySamplingFrequencyReq
	(*TransferFloatingWindowMessageReq)(nil),      // 227: com.perfdog.proto.TransferFloatingWindowMessageReq
	(*Color)(nil),                                 // 228: com.perfdog.proto.Color
	(*SetFloatingWindowPreferencesReq)(nil),       // 229: com.perfdog.proto.SetFloatingWindowPreferencesReq
	(*UnrealMemoryReportReq)(nil),                 // 230: com.perfdog.proto.UnrealMemoryReportReq
	(*UpdateMemoryReportReq)(nil),                 // 231: com.perfdog.proto.UpdateMemoryReportReq
	(*GetPresetNetworkProfilingTemplateReq)(nil),  // 232: com.perfdog.proto.GetPresetNetworkProfilingTemplateReq
	(*GetPresetNetworkProfilingTemplateRsp)(nil),  // 233: com.perfdog.proto.GetPresetNetworkProfilingTemplateRsp
	(*SubmitUserNetworkProfilingTemplateReq)(nil), // 234: com.perfdog.proto.SubmitUserNetworkProfilingTemplateReq
	(*SubmitUserNetworkProfilingTemplateRsp)(nil), // 235: com.perfdog.proto.SubmitUserNetworkProfilingTemplateRsp
	(*UpdateUserNetworkProfilingTemplateReq)(nil), // 236: com.perfdog.proto.UpdateUserNetworkProfilingTemplateReq
	(*DeleteUserNetworkProfilingTemplateReq)(nil), // 237: com.perfdog.proto.DeleteUserNetworkProfilingTemplateReq
	(*ChangeNetworkTemplateReq)(nil),              // 238: com.perfdog.proto.ChangeNetworkTemplateReq
	(*ChangeNetworkTemplateRsp)(nil),              // 239: com.perfdog.proto.ChangeNetworkTemplateRsp
	(*AddRemoteHostDeviceReq)(nil),                // 240: com.perfdog.proto.AddRemoteHostDeviceReq
	(*CheckDeviceOccupiedByOtherUsersReq)(nil),    // 241: com.perfdog.proto.CheckDeviceOccupiedByOtherUsersReq
	(*SetPairedPasswordReq)(nil),                  // 242: com.perfdog.proto.SetPairedPasswordReq
	(*CheckDeviceOccupiedByOtherUsersRsp)(nil),    // 243: com.perfdog.proto.CheckDeviceOccupiedByOtherUsersRsp
	(*LaunchAsRemoteCollectorRsp)(nil),            // 244: com.perfdog.proto.LaunchAsRemoteCollectorRsp
	(*SetEnableDevAppTestReq)(nil),                // 245: com.perfdog.proto.SetEnableDevAppTestReq
	nil,                                           // 246: com.perfdog.proto.DeviceInfo.ValueEntry
	nil,                                           // 247: com.perfdog.proto.AppInfo.ExtraEntry
	(*BinderSession_Session)(nil),                 // 248: com.perfdog.proto.BinderSession.Session
	nil,                                           // 249: com.perfdog.proto.ExtraInfo.InfoMapEntry
	nil,                                           // 250: com.perfdog.proto.GetAppWindowsMapRet.Pid2WindowMapEntry
}
var file_perfdog_perfdog_perfdog_proto_depIdxs = []int32{
	1,   // 0: com.perfdog.proto.Device.osType:type_name -> com.perfdog.proto.DEVICE_OSTYPE
	2,   // 1: com.perfdog.proto.Device.conType:type_name -> com.perfdog.proto.DEVICE_CONTYPE
	3,   // 2: com.perfdog.proto.Device.accessType:type_name -> com.perfdog.proto.DEVICE_ACCESS_TYPE
	26,  // 3: com.perfdog.proto.DeviceMessage.getPasswordRequest:type_name -> com.perfdog.proto.GetPasswordRequest
	0,   // 4: com.perfdog.proto.DeviceEvent.eventType:type_name -> com.perfdog.proto.DEVICE_EVENTTYPE
	25,  // 5: com.perfdog.proto.DeviceEvent.device:type_name -> com.perfdog.proto.Device
	27,  // 6: com.perfdog.proto.DeviceEvent.deviceMessage:type_name -> com.perfdog.proto.DeviceMessage
	29,  // 7: com.perfdog.proto.GlobalEvent.launchAsCollectorEvent:type_name -> com.perfdog.proto.LaunchAsCollectorEvent
	30,  // 8: com.perfdog.proto.GlobalEvent.startRecordEvent:type_name -> com.perfdog.proto.StartRecordEvent
	31,  // 9: com.perfdog.proto.GlobalEvent.addLabelEvent:type_name -> com.perfdog.proto.AddLabelEvent
	32,  // 10: com.perfdog.proto.GlobalEvent.getResolutionEvent:type_name -> com.perfdog.proto.GetResolutionEvent
	246, // 11: com.perfdog.proto.DeviceInfo.value:type_name -> com.perfdog.proto.DeviceInfo.ValueEntry
	247, // 12: com.perfdog.proto.AppInfo.extra:type_name -> com.perfdog.proto.AppInfo.ExtraEntry
	36,  // 13: com.perfdog.proto.AppList.app:type_name -> com.perfdog.proto.AppInfo
	25,  // 14: com.perfdog.proto.EnablePerfDataTypeReq.device:type_name -> com.perfdog.proto.Device
	4,   // 15: com.perfdog.proto.EnablePerfDataTypeReq.type:type_name -> com.perfdog.proto.PerfDataType
	41,  // 16: com.perfdog.proto.EnablePerfDataTypeReq.dynamicData:type_name -> com.perfdog.proto.DynamicPerfDataDesc
	25,  // 17: com.perfdog.proto.DisablePerfDataTypeReq.device:type_name -> com.perfdog.proto.Device
	4,   // 18: com.perfdog.proto.DisablePerfDataTypeReq.type:type_name -> com.perfdog.proto.PerfDataType
	41,  // 19: com.perfdog.proto.DisablePerfDataTypeReq.dynamicData:type_name -> com.perfdog.proto.DynamicPerfDataDesc
	5,   // 20: com.perfdog.proto.DynamicPerfDataDesc.type:type_name -> com.perfdog.proto.DynamicPerfDataType
	40,  // 21: com.perfdog.proto.DynamicPerfDataDesc.key:type_name -> com.perfdog.proto.DynamicPerfDataKeyInfo
	117, // 22: com.perfdog.proto.DynamicPerfData.value:type_name -> com.perfdog.proto.Value
	17,  // 23: com.perfdog.proto.DynamicPerfData.sampleCount:type_name -> com.perfdog.proto.OptionalInt
	5,   // 24: com.perfdog.proto.DynamicPerfData.type:type_name -> com.perfdog.proto.DynamicPerfDataType
	42,  // 25: com.perfdog.proto.DynamicDataList.dynamicData:type_name -> com.perfdog.proto.DynamicPerfData
	41,  // 26: com.perfdog.proto.DynamicDataList.dynamicInfo:type_name -> com.perfdog.proto.DynamicPerfDataDesc
	4,   // 27: com.perfdog.proto.PerfDataTypeRet.type:type_name -> com.perfdog.proto.PerfDataType
	41,  // 28: com.perfdog.proto.PerfDataTypeRet.dynamicDataDesc:type_name -> com.perfdog.proto.DynamicPerfDataDesc
	44,  // 29: com.perfdog.proto.PerfDataTypeRet.systraceCategories:type_name -> com.perfdog.proto.SystraceCategory
	25,  // 30: com.perfdog.proto.ScreenShotInterval.device:type_name -> com.perfdog.proto.Device
	17,  // 31: com.perfdog.proto.NetworkProfilingOption.duration:type_name -> com.perfdog.proto.OptionalInt
	17,  // 32: com.perfdog.proto.NetworkProfilingOption.outBandwidth:type_name -> com.perfdog.proto.OptionalInt
	17,  // 33: com.perfdog.proto.NetworkProfilingOption.outDelay:type_name -> com.perfdog.proto.OptionalInt
	47,  // 34: com.perfdog.proto.NetworkProfilingOption.outDelayBias:type_name -> com.perfdog.proto.DelayBias
	17,  // 35: com.perfdog.proto.NetworkProfilingOption.outRate:type_name -> com.perfdog.proto.OptionalInt
	17,  // 36: com.perfdog.proto.NetworkProfilingOption.outPass:type_name -> com.perfdog.proto.OptionalInt
	17,  // 37: com.perfdog.proto.NetworkProfilingOption.outLoss:type_name -> com.perfdog.proto.OptionalInt
	17,  // 38: com.perfdog.proto.NetworkProfilingOption.outBurst:type_name -> com.perfdog.proto.OptionalInt
	17,  // 39: com.perfdog.proto.NetworkProfilingOption.inBandwidth:type_name -> com.perfdog.proto.OptionalInt
	17,  // 40: com.perfdog.proto.NetworkProfilingOption.inDelay:type_name -> com.perfdog.proto.OptionalInt
	47,  // 41: com.perfdog.proto.NetworkProfilingOption.inDelayBias:type_name -> com.perfdog.proto.DelayBias
	17,  // 42: com.perfdog.proto.NetworkProfilingOption.inRate:type_name -> com.perfdog.proto.OptionalInt
	17,  // 43: com.perfdog.proto.NetworkProfilingOption.inPass:type_name -> com.perfdog.proto.OptionalInt
	17,  // 44: com.perfdog.proto.NetworkProfilingOption.inLoss:type_name -> com.perfdog.proto.OptionalInt
	17,  // 45: com.perfdog.proto.NetworkProfilingOption.inBurst:type_name -> com.perfdog.proto.OptionalInt
	7,   // 46: com.perfdog.proto.NetworkProfilingOption.affectedProtocol:type_name -> com.perfdog.proto.NetworkProtocol
	48,  // 47: com.perfdog.proto.NetworkProfilingTemplate.sceneInfo:type_name -> com.perfdog.proto.NetworkProfilingScene
	49,  // 48: com.perfdog.proto.NetworkProfilingTemplate.networkProfilingOptions:type_name -> com.perfdog.proto.NetworkProfilingOption
	44,  // 49: com.perfdog.proto.SystraceStartTestOption.systraceCategories:type_name -> com.perfdog.proto.SystraceCategory
	25,  // 50: com.perfdog.proto.StartTestAppReq.device:type_name -> com.perfdog.proto.Device
	36,  // 51: com.perfdog.proto.StartTestAppReq.app:type_name -> com.perfdog.proto.AppInfo
	6,   // 52: com.perfdog.proto.StartTestAppReq.profilingMode:type_name -> com.perfdog.proto.ProfilingMode
	50,  // 53: com.perfdog.proto.StartTestAppReq.networkProfilingTemplate:type_name -> com.perfdog.proto.NetworkProfilingTemplate
	51,  // 54: com.perfdog.proto.StartTestAppReq.networkOption:type_name -> com.perfdog.proto.NetworkStartTestOption
	52,  // 55: com.perfdog.proto.StartTestAppReq.systraceOption:type_name -> com.perfdog.proto.SystraceStartTestOption
	25,  // 56: com.perfdog.proto.StartTestSysProcessReq.device:type_name -> com.perfdog.proto.Device
	205, // 57: com.perfdog.proto.StartTestSysProcessReq.sysProcessInfo:type_name -> com.perfdog.proto.SysProcessInfo
	16,  // 58: com.perfdog.proto.StartTestSysProcessReq.dxVersion:type_name -> com.perfdog.proto.DXVersion
	6,   // 59: com.perfdog.proto.StartTestSysProcessReq.profilingMode:type_name -> com.perfdog.proto.ProfilingMode
	52,  // 60: com.perfdog.proto.StartTestSysProcessReq.systraceOption:type_name -> com.perfdog.proto.SystraceStartTestOption
	25,  // 61: com.perfdog.proto.OpenPerfDataStreamReq.device:type_name -> com.perfdog.proto.Device
	25,  // 62: com.perfdog.proto.StopTestReq.device:type_name -> com.perfdog.proto.Device
	20,  // 63: com.perfdog.proto.FpsData.InterFrame:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 64: com.perfdog.proto.FpsData.visualFps:type_name -> com.perfdog.proto.OptionalDouble
	58,  // 65: com.perfdog.proto.FrameTimeData.frameTime:type_name -> com.perfdog.proto.FrameTime
	20,  // 66: com.perfdog.proto.JankData.onePercentLowFrame:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 67: com.perfdog.proto.AndroidMemDetailData.dalvikOther:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 68: com.perfdog.proto.AndroidMemDetailData.stack:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 69: com.perfdog.proto.AndroidMemDetailData.cursor:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 70: com.perfdog.proto.AndroidMemDetailData.ashmem:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 71: com.perfdog.proto.AndroidMemDetailData.otherDev:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 72: com.perfdog.proto.AndroidMemDetailData.soMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 73: com.perfdog.proto.AndroidMemDetailData.jarMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 74: com.perfdog.proto.AndroidMemDetailData.apkMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 75: com.perfdog.proto.AndroidMemDetailData.ttfMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 76: com.perfdog.proto.AndroidMemDetailData.dexMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 77: com.perfdog.proto.AndroidMemDetailData.codeMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 78: com.perfdog.proto.AndroidMemDetailData.imageMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 79: com.perfdog.proto.AndroidMemDetailData.otherMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 80: com.perfdog.proto.AndroidMemDetailData.graphics:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 81: com.perfdog.proto.AndroidMemDetailData.memtrack:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 82: com.perfdog.proto.AndroidMemDetailData.oatMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 83: com.perfdog.proto.AndroidMemDetailData.artMmap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 84: com.perfdog.proto.AndroidMemDetailData.eglMtrack:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 85: com.perfdog.proto.AndroidMemDetailData.otherMtrack:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 86: com.perfdog.proto.AndroidMemDetailData.totalSwapPss:type_name -> com.perfdog.proto.OptionalDouble
	19,  // 87: com.perfdog.proto.MaliGpuCounterBasic.nonFragmentUtilization:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 88: com.perfdog.proto.MaliGpuCounterBasic.fragmentUtilization:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 89: com.perfdog.proto.MaliGpuCounterBasic.tilerUtilization:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 90: com.perfdog.proto.MaliGpuCounterBasic.gpuActiveCycle:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 91: com.perfdog.proto.MaliGpuCounterShader.overDraw:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 92: com.perfdog.proto.MaliGpuCounterShader.pixelThroughput:type_name -> com.perfdog.proto.OptionalFloat
	18,  // 93: com.perfdog.proto.MaliGpuCounterShader.nonFragmentWarps:type_name -> com.perfdog.proto.OptionalInt64
	18,  // 94: com.perfdog.proto.MaliGpuCounterShader.fragmentWarps:type_name -> com.perfdog.proto.OptionalInt64
	17,  // 95: com.perfdog.proto.MaliGpuCounterMemory.l2LoadStoreRead:type_name -> com.perfdog.proto.OptionalInt
	17,  // 96: com.perfdog.proto.MaliGpuCounterMemory.l2TextureRead:type_name -> com.perfdog.proto.OptionalInt
	17,  // 97: com.perfdog.proto.MaliGpuCounterMemory.busRead:type_name -> com.perfdog.proto.OptionalInt
	17,  // 98: com.perfdog.proto.MaliGpuCounterMemory.busWrite:type_name -> com.perfdog.proto.OptionalInt
	19,  // 99: com.perfdog.proto.QComGpuCounterBasic.gpuUtilization:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 100: com.perfdog.proto.QComGpuCounterBasic.gpuBusBusy:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 101: com.perfdog.proto.QComGpuCounterBasic.shadersBusy:type_name -> com.perfdog.proto.OptionalFloat
	18,  // 102: com.perfdog.proto.QComGpuCounterBasic.preClippedPolygonsPerSecond:type_name -> com.perfdog.proto.OptionalInt64
	17,  // 103: com.perfdog.proto.QComGpuCounterMemory.readTotal:type_name -> com.perfdog.proto.OptionalInt
	17,  // 104: com.perfdog.proto.QComGpuCounterMemory.writeTotal:type_name -> com.perfdog.proto.OptionalInt
	19,  // 105: com.perfdog.proto.QComGpuCounterMemory.textureL2Miss:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 106: com.perfdog.proto.QComGpuCounterMemory.stalledOnSystemMemory:type_name -> com.perfdog.proto.OptionalFloat
	18,  // 107: com.perfdog.proto.QComGpuCounterShader.verticesShadedPerSecond:type_name -> com.perfdog.proto.OptionalInt64
	18,  // 108: com.perfdog.proto.QComGpuCounterShader.fragmentsShadedPerSecond:type_name -> com.perfdog.proto.OptionalInt64
	19,  // 109: com.perfdog.proto.PVRGpuCounterBasic.rendererActive:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 110: com.perfdog.proto.PVRGpuCounterBasic.tilerActive:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 111: com.perfdog.proto.PVRGpuCounterBasic.hsrEfficiency:type_name -> com.perfdog.proto.OptionalFloat
	19,  // 112: com.perfdog.proto.PVRGpuCounterBasic.spmActive:type_name -> com.perfdog.proto.OptionalFloat
	17,  // 113: com.perfdog.proto.PVRGpuCounterMemory.gpuMemoryReadRate:type_name -> com.perfdog.proto.OptionalInt
	17,  // 114: com.perfdog.proto.PVRGpuCounterMemory.gpuMemoryWriteRate:type_name -> com.perfdog.proto.OptionalInt
	17,  // 115: com.perfdog.proto.PVRGpuCounterMemory.gpuMemoryTotalRate:type_name -> com.perfdog.proto.OptionalInt
	19,  // 116: com.perfdog.proto.PVRGpuCounterMemory.gpuMemoryInterfaceLoad:type_name -> com.perfdog.proto.OptionalFloat
	18,  // 117: com.perfdog.proto.PVRGpuCounterShader.shadedVerticesPerSecond:type_name -> com.perfdog.proto.OptionalInt64
	18,  // 118: com.perfdog.proto.PVRGpuCounterShader.shadedPixelsPerSecond:type_name -> com.perfdog.proto.OptionalInt64
	19,  // 119: com.perfdog.proto.PVRGpuCounterShader.overDraw:type_name -> com.perfdog.proto.OptionalFloat
	20,  // 120: com.perfdog.proto.IosGPUCounterBasics.totalOccupancy:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 121: com.perfdog.proto.IosGPUCounterBasics.vertexOccupancy:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 122: com.perfdog.proto.IosGPUCounterBasics.fragmentOccupancy:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 123: com.perfdog.proto.IosGPUCounterBasics.computeOccupancy:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 124: com.perfdog.proto.IosGPUCounterMemory.bufferReadLimiter:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 125: com.perfdog.proto.IosGPUCounterMemory.bufferLoadUtilization:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 126: com.perfdog.proto.IosGPUCounterMemory.textureSampleLimiter:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 127: com.perfdog.proto.IosGPUCounterMemory.textureSampleUtilization:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 128: com.perfdog.proto.IosGPUCounterMemory.gpuReadBandwidth:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 129: com.perfdog.proto.IosGPUCounterMemory.gpuWriteBandwidth:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 130: com.perfdog.proto.IosGPUCounterShader.aluLimiter:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 131: com.perfdog.proto.IosGPUCounterShader.aluUtilization:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 132: com.perfdog.proto.IosGPUCounterShader.f32Utilization:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 133: com.perfdog.proto.IosGPUCounterShader.f16Utilization:type_name -> com.perfdog.proto.OptionalDouble
	100, // 134: com.perfdog.proto.WindowsRenderData.render:type_name -> com.perfdog.proto.WindowsRender
	8,   // 135: com.perfdog.proto.GpuGraphicsUsage.usageType:type_name -> com.perfdog.proto.USAGE_TYPE
	20,  // 136: com.perfdog.proto.GpuGraphicsUsage.usage:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 137: com.perfdog.proto.WindowsGpuUsage.temperature:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 138: com.perfdog.proto.WindowsGpuUsage.appGUsage3D:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 139: com.perfdog.proto.WindowsGpuUsage.totalGUsage3D:type_name -> com.perfdog.proto.OptionalDouble
	106, // 140: com.perfdog.proto.WindowsGpuUsage.gpuGraphicsUsage:type_name -> com.perfdog.proto.GpuGraphicsUsage
	4,   // 141: com.perfdog.proto.WindowsPerfTypeNtf.dataType:type_name -> com.perfdog.proto.PerfDataType
	20,  // 142: com.perfdog.proto.WindowsGpuMemoryUsage.appDedicated:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 143: com.perfdog.proto.WindowsGpuMemoryUsage.appShared:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 144: com.perfdog.proto.WindowsGpuMemoryUsage.dedicated:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 145: com.perfdog.proto.WindowsGpuMemoryUsage.shared:type_name -> com.perfdog.proto.OptionalDouble
	18,  // 146: com.perfdog.proto.NvidiaGpuUsage.usedMemory:type_name -> com.perfdog.proto.OptionalInt64
	17,  // 147: com.perfdog.proto.NvidiaGpuUsage.usage:type_name -> com.perfdog.proto.OptionalInt
	17,  // 148: com.perfdog.proto.NvidiaGpuUsage.temp:type_name -> com.perfdog.proto.OptionalInt
	18,  // 149: com.perfdog.proto.NvidiaGpuUsage.freq:type_name -> com.perfdog.proto.OptionalInt64
	18,  // 150: com.perfdog.proto.AmdGpuUsage.usedMemory:type_name -> com.perfdog.proto.OptionalInt64
	20,  // 151: com.perfdog.proto.AmdGpuUsage.usage:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 152: com.perfdog.proto.AmdGpuUsage.temp:type_name -> com.perfdog.proto.OptionalDouble
	18,  // 153: com.perfdog.proto.AmdGpuUsage.freq:type_name -> com.perfdog.proto.OptionalInt64
	18,  // 154: com.perfdog.proto.AmdGpuUsage.usedMemoryFreq:type_name -> com.perfdog.proto.OptionalInt64
	117, // 155: com.perfdog.proto.ListValue.values:type_name -> com.perfdog.proto.Value
	117, // 156: com.perfdog.proto.PerFrameData.value:type_name -> com.perfdog.proto.Value
	248, // 157: com.perfdog.proto.BinderSession.sessions:type_name -> com.perfdog.proto.BinderSession.Session
	9,   // 158: com.perfdog.proto.BinderTransactionInfo.type:type_name -> com.perfdog.proto.BinderTransactionType
	117, // 159: com.perfdog.proto.Metadata.value:type_name -> com.perfdog.proto.Value
	126, // 160: com.perfdog.proto.MetadataList.values:type_name -> com.perfdog.proto.Metadata
	122, // 161: com.perfdog.proto.SliceExtraInfo.threadStateExtraInfo:type_name -> com.perfdog.proto.ThreadStateExtraInfo
	125, // 162: com.perfdog.proto.SliceExtraInfo.binderTransactionInfo:type_name -> com.perfdog.proto.BinderTransactionInfo
	127, // 163: com.perfdog.proto.SliceExtraInfo.metadataList:type_name -> com.perfdog.proto.MetadataList
	123, // 164: com.perfdog.proto.SliceExtraInfo.runningStateExtraInfo:type_name -> com.perfdog.proto.RunningStateExtraInfo
	128, // 165: com.perfdog.proto.Slice.extraInfo:type_name -> com.perfdog.proto.SliceExtraInfo
	129, // 166: com.perfdog.proto.ThreadFlameData.slice:type_name -> com.perfdog.proto.Slice
	129, // 167: com.perfdog.proto.ThreadScheduleData.slice:type_name -> com.perfdog.proto.Slice
	129, // 168: com.perfdog.proto.CpuScheduleData.slice:type_name -> com.perfdog.proto.Slice
	117, // 169: com.perfdog.proto.CounterValue.value:type_name -> com.perfdog.proto.Value
	133, // 170: com.perfdog.proto.DeepProfilingCounterData.values:type_name -> com.perfdog.proto.CounterValue
	10,  // 171: com.perfdog.proto.DeepProfilingCounterData.counterType:type_name -> com.perfdog.proto.CounterType
	129, // 172: com.perfdog.proto.DeepProfilingAsyncEvent.slice:type_name -> com.perfdog.proto.Slice
	116, // 173: com.perfdog.proto.DeepProfilingData.frame:type_name -> com.perfdog.proto.Frame
	119, // 174: com.perfdog.proto.DeepProfilingData.perFrameData:type_name -> com.perfdog.proto.PerFrameData
	120, // 175: com.perfdog.proto.DeepProfilingData.threadInfo:type_name -> com.perfdog.proto.ThreadInfo
	130, // 176: com.perfdog.proto.DeepProfilingData.threadFlameData:type_name -> com.perfdog.proto.ThreadFlameData
	131, // 177: com.perfdog.proto.DeepProfilingData.threadScheduleData:type_name -> com.perfdog.proto.ThreadScheduleData
	132, // 178: com.perfdog.proto.DeepProfilingData.cpuScheduleData:type_name -> com.perfdog.proto.CpuScheduleData
	121, // 179: com.perfdog.proto.DeepProfilingData.processInfo:type_name -> com.perfdog.proto.DeepProfilingProcessInfo
	134, // 180: com.perfdog.proto.DeepProfilingData.counterData:type_name -> com.perfdog.proto.DeepProfilingCounterData
	135, // 181: com.perfdog.proto.DeepProfilingData.asyncEvent:type_name -> com.perfdog.proto.DeepProfilingAsyncEvent
	124, // 182: com.perfdog.proto.DeepProfilingData.binderSession:type_name -> com.perfdog.proto.BinderSession
	118, // 183: com.perfdog.proto.CustomData.listValues:type_name -> com.perfdog.proto.ListValue
	138, // 184: com.perfdog.proto.CustomDataList.values:type_name -> com.perfdog.proto.CustomData
	139, // 185: com.perfdog.proto.CustomDataList.addNoteNtf:type_name -> com.perfdog.proto.AddNoteNtf
	140, // 186: com.perfdog.proto.CustomDataList.setLabelNtf:type_name -> com.perfdog.proto.SetLabelNtf
	11,  // 187: com.perfdog.proto.NetworkWarning.type:type_name -> com.perfdog.proto.NetworkWarningType
	146, // 188: com.perfdog.proto.TcpRetransmission.tcpRetransmissionItem:type_name -> com.perfdog.proto.TcpRetransmissionItem
	7,   // 189: com.perfdog.proto.DnsPacketDetail.protocol:type_name -> com.perfdog.proto.NetworkProtocol
	150, // 190: com.perfdog.proto.DnsPacketDetail.questions:type_name -> com.perfdog.proto.DnsQuestion
	151, // 191: com.perfdog.proto.DnsPacketDetail.answers:type_name -> com.perfdog.proto.DnsAnswer
	148, // 192: com.perfdog.proto.PacketDetailItem.tcpPacketDetail:type_name -> com.perfdog.proto.TcpPacketDetail
	149, // 193: com.perfdog.proto.PacketDetailItem.udpPacketDetail:type_name -> com.perfdog.proto.UdpPacketDetail
	152, // 194: com.perfdog.proto.PacketDetailItem.dnsPacketDetail:type_name -> com.perfdog.proto.DnsPacketDetail
	153, // 195: com.perfdog.proto.PacketDetailItem.icmpPacketDetail:type_name -> com.perfdog.proto.IcmpPacketDetail
	154, // 196: com.perfdog.proto.PacketDetail.packetDetailItem:type_name -> com.perfdog.proto.PacketDetailItem
	160, // 197: com.perfdog.proto.IpTrafficStatistics.ipTraffics:type_name -> com.perfdog.proto.IpTraffic
	142, // 198: com.perfdog.proto.NetworkProfilingData.networkWarning:type_name -> com.perfdog.proto.NetworkWarning
	143, // 199: com.perfdog.proto.NetworkProfilingData.tcpConnectionCount:type_name -> com.perfdog.proto.TcpConnectionCount
	144, // 200: com.perfdog.proto.NetworkProfilingData.trafficStatistics:type_name -> com.perfdog.proto.TrafficStatistics
	145, // 201: com.perfdog.proto.NetworkProfilingData.serverLatency:type_name -> com.perfdog.proto.ServerLatency
	147, // 202: com.perfdog.proto.NetworkProfilingData.tcpRetransmission:type_name -> com.perfdog.proto.TcpRetransmission
	155, // 203: com.perfdog.proto.NetworkProfilingData.PacketDetail:type_name -> com.perfdog.proto.PacketDetail
	156, // 204: com.perfdog.proto.NetworkProfilingData.RawIpPacket:type_name -> com.perfdog.proto.RawIpPacket
	157, // 205: com.perfdog.proto.NetworkProfilingData.tlsAlert:type_name -> com.perfdog.proto.TlsAlert
	158, // 206: com.perfdog.proto.NetworkProfilingData.tlsHandshakeComplete:type_name -> com.perfdog.proto.TlsHandshakeComplete
	159, // 207: com.perfdog.proto.NetworkProfilingData.httpRequest:type_name -> com.perfdog.proto.HttpRequest
	161, // 208: com.perfdog.proto.NetworkProfilingData.ipTrafficStatistics:type_name -> com.perfdog.proto.IpTrafficStatistics
	163, // 209: com.perfdog.proto.ThreadCpuUsageList.threadUsage:type_name -> com.perfdog.proto.ThreadCpuUsage
	59,  // 210: com.perfdog.proto.AndroidPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	60,  // 211: com.perfdog.proto.AndroidPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 212: com.perfdog.proto.AndroidPerfData.jankData:type_name -> com.perfdog.proto.JankData
	62,  // 213: com.perfdog.proto.AndroidPerfData.androidGpuUsageData:type_name -> com.perfdog.proto.AndroidGpuUsageData
	64,  // 214: com.perfdog.proto.AndroidPerfData.gpuFreqData:type_name -> com.perfdog.proto.GpuFreqData
	65,  // 215: com.perfdog.proto.AndroidPerfData.androidMemData:type_name -> com.perfdog.proto.AndroidMemData
	69,  // 216: com.perfdog.proto.AndroidPerfData.coreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	70,  // 217: com.perfdog.proto.AndroidPerfData.cpuFreqData:type_name -> com.perfdog.proto.CpuFreqData
	71,  // 218: com.perfdog.proto.AndroidPerfData.cpuUsageData:type_name -> com.perfdog.proto.CpuUsageData
	72,  // 219: com.perfdog.proto.AndroidPerfData.cpuTempData:type_name -> com.perfdog.proto.CpuTempData
	78,  // 220: com.perfdog.proto.AndroidPerfData.batteryData:type_name -> com.perfdog.proto.BatteryData
	79,  // 221: com.perfdog.proto.AndroidPerfData.networkData:type_name -> com.perfdog.proto.NetworkData
	80,  // 222: com.perfdog.proto.AndroidPerfData.syslogData:type_name -> com.perfdog.proto.SyslogData
	81,  // 223: com.perfdog.proto.AndroidPerfData.screenShotData:type_name -> com.perfdog.proto.ScreenShotData
	71,  // 224: com.perfdog.proto.AndroidPerfData.normalizedCpuUsageData:type_name -> com.perfdog.proto.CpuUsageData
	69,  // 225: com.perfdog.proto.AndroidPerfData.normalizedCpuCoreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	84,  // 226: com.perfdog.proto.AndroidPerfData.maliGpuCounterBasic:type_name -> com.perfdog.proto.MaliGpuCounterBasic
	85,  // 227: com.perfdog.proto.AndroidPerfData.maliGpuCounterShader:type_name -> com.perfdog.proto.MaliGpuCounterShader
	86,  // 228: com.perfdog.proto.AndroidPerfData.maliGpuCounterMemory:type_name -> com.perfdog.proto.MaliGpuCounterMemory
	87,  // 229: com.perfdog.proto.AndroidPerfData.qcomGpuCounterBasic:type_name -> com.perfdog.proto.QComGpuCounterBasic
	88,  // 230: com.perfdog.proto.AndroidPerfData.qcomGpuCounterMemory:type_name -> com.perfdog.proto.QComGpuCounterMemory
	89,  // 231: com.perfdog.proto.AndroidPerfData.qcomGpuCounterShader:type_name -> com.perfdog.proto.QComGpuCounterShader
	90,  // 232: com.perfdog.proto.AndroidPerfData.pvrGpuCounterBasic:type_name -> com.perfdog.proto.PVRGpuCounterBasic
	91,  // 233: com.perfdog.proto.AndroidPerfData.pvrGpuCounterMemory:type_name -> com.perfdog.proto.PVRGpuCounterMemory
	92,  // 234: com.perfdog.proto.AndroidPerfData.pvrGpuCounterShader:type_name -> com.perfdog.proto.PVRGpuCounterShader
	137, // 235: com.perfdog.proto.AndroidPerfData.perFramePowerConsumption:type_name -> com.perfdog.proto.PerFramePowerConsumption
	73,  // 236: com.perfdog.proto.AndroidPerfData.batteryTempData:type_name -> com.perfdog.proto.BatteryTempData
	74,  // 237: com.perfdog.proto.AndroidPerfData.gpuTempData:type_name -> com.perfdog.proto.GpuTempData
	75,  // 238: com.perfdog.proto.AndroidPerfData.npuTempData:type_name -> com.perfdog.proto.NpuTempData
	136, // 239: com.perfdog.proto.AndroidPerfData.deepProfilingData:type_name -> com.perfdog.proto.DeepProfilingData
	141, // 240: com.perfdog.proto.AndroidPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	43,  // 241: com.perfdog.proto.AndroidPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	66,  // 242: com.perfdog.proto.AndroidPerfData.androidMemDetailData:type_name -> com.perfdog.proto.AndroidMemDetailData
	162, // 243: com.perfdog.proto.AndroidPerfData.NetworkProfilingData:type_name -> com.perfdog.proto.NetworkProfilingData
	164, // 244: com.perfdog.proto.AndroidPerfData.ThreadCpuUsageList:type_name -> com.perfdog.proto.ThreadCpuUsageList
	165, // 245: com.perfdog.proto.AndroidPerfData.ClockSnapshot:type_name -> com.perfdog.proto.ClockSnapshot
	166, // 246: com.perfdog.proto.AndroidPerfData.AppLaunchingTime:type_name -> com.perfdog.proto.AppLaunchingTime
	167, // 247: com.perfdog.proto.AndroidPerfData.AppFullyDrawnTime:type_name -> com.perfdog.proto.AppFullyDrawnTime
	168, // 248: com.perfdog.proto.AndroidPerfData.ScreenBrightness:type_name -> com.perfdog.proto.ScreenBrightness
	169, // 249: com.perfdog.proto.AndroidPerfData.BatteryLevel:type_name -> com.perfdog.proto.BatteryLevel
	170, // 250: com.perfdog.proto.AndroidPerfData.testingInfo:type_name -> com.perfdog.proto.TestingInfo
	171, // 251: com.perfdog.proto.AndroidPerfData.cpuThrottlingData:type_name -> com.perfdog.proto.CpuThrottlingData
	172, // 252: com.perfdog.proto.AndroidPerfData.frameGeneration:type_name -> com.perfdog.proto.FrameGeneration
	59,  // 253: com.perfdog.proto.IosPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	60,  // 254: com.perfdog.proto.IosPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 255: com.perfdog.proto.IosPerfData.jankData:type_name -> com.perfdog.proto.JankData
	63,  // 256: com.perfdog.proto.IosPerfData.iosGpuUsageData:type_name -> com.perfdog.proto.IosGpuUsageData
	67,  // 257: com.perfdog.proto.IosPerfData.ios10MemData:type_name -> com.perfdog.proto.Ios10MemData
	68,  // 258: com.perfdog.proto.IosPerfData.ios11MemData:type_name -> com.perfdog.proto.Ios11MemData
	71,  // 259: com.perfdog.proto.IosPerfData.cpuUsageData:type_name -> com.perfdog.proto.CpuUsageData
	76,  // 260: com.perfdog.proto.IosPerfData.ctxSwitchData:type_name -> com.perfdog.proto.CtxSwitchData
	77,  // 261: com.perfdog.proto.IosPerfData.wakeupsData:type_name -> com.perfdog.proto.WakeupsData
	78,  // 262: com.perfdog.proto.IosPerfData.batteryData:type_name -> com.perfdog.proto.BatteryData
	79,  // 263: com.perfdog.proto.IosPerfData.networkData:type_name -> com.perfdog.proto.NetworkData
	80,  // 264: com.perfdog.proto.IosPerfData.syslogData:type_name -> com.perfdog.proto.SyslogData
	81,  // 265: com.perfdog.proto.IosPerfData.screenShotData:type_name -> com.perfdog.proto.ScreenShotData
	207, // 266: com.perfdog.proto.IosPerfData.iosEnergyUsageData:type_name -> com.perfdog.proto.IosEnergyUsageData
	73,  // 267: com.perfdog.proto.IosPerfData.batteryTempData:type_name -> com.perfdog.proto.BatteryTempData
	93,  // 268: com.perfdog.proto.IosPerfData.iosGPUCounterBasic:type_name -> com.perfdog.proto.IosGPUCounterBasics
	94,  // 269: com.perfdog.proto.IosPerfData.iosGPUCounterMemory:type_name -> com.perfdog.proto.IosGPUCounterMemory
	95,  // 270: com.perfdog.proto.IosPerfData.iosGPUCounterShader:type_name -> com.perfdog.proto.IosGPUCounterShader
	96,  // 271: com.perfdog.proto.IosPerfData.iosSampleCount:type_name -> com.perfdog.proto.IosGPUCounterSampleCount
	79,  // 272: com.perfdog.proto.IosPerfData.deviceNetworkData:type_name -> com.perfdog.proto.NetworkData
	137, // 273: com.perfdog.proto.IosPerfData.perFramePowerConsumption:type_name -> com.perfdog.proto.PerFramePowerConsumption
	136, // 274: com.perfdog.proto.IosPerfData.deepProfilingData:type_name -> com.perfdog.proto.DeepProfilingData
	141, // 275: com.perfdog.proto.IosPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	43,  // 276: com.perfdog.proto.IosPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	59,  // 277: com.perfdog.proto.SwitchPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	60,  // 278: com.perfdog.proto.SwitchPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 279: com.perfdog.proto.SwitchPerfData.jankData:type_name -> com.perfdog.proto.JankData
	97,  // 280: com.perfdog.proto.SwitchPerfData.switchMemData:type_name -> com.perfdog.proto.SwitchMemData
	98,  // 281: com.perfdog.proto.SwitchPerfData.unityMonoHeapData:type_name -> com.perfdog.proto.UnityMonoHeapData
	69,  // 282: com.perfdog.proto.SwitchPerfData.coreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	59,  // 283: com.perfdog.proto.WindowsPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	60,  // 284: com.perfdog.proto.WindowsPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 285: com.perfdog.proto.WindowsPerfData.jankData:type_name -> com.perfdog.proto.JankData
	99,  // 286: com.perfdog.proto.WindowsPerfData.cpuUsage:type_name -> com.perfdog.proto.WindowsCpuUsage
	101, // 287: com.perfdog.proto.WindowsPerfData.renderData:type_name -> com.perfdog.proto.WindowsRenderData
	102, // 288: com.perfdog.proto.WindowsPerfData.memoryUsage:type_name -> com.perfdog.proto.WindowsMemoryUsage
	103, // 289: com.perfdog.proto.WindowsPerfData.ioUsage:type_name -> com.perfdog.proto.WindowsIOUsage
	104, // 290: com.perfdog.proto.WindowsPerfData.thread:type_name -> com.perfdog.proto.WindowsThread
	105, // 291: com.perfdog.proto.WindowsPerfData.handle:type_name -> com.perfdog.proto.WindowsHandle
	107, // 292: com.perfdog.proto.WindowsPerfData.gpuUsage:type_name -> com.perfdog.proto.WindowsGpuUsage
	81,  // 293: com.perfdog.proto.WindowsPerfData.screenshot:type_name -> com.perfdog.proto.ScreenShotData
	108, // 294: com.perfdog.proto.WindowsPerfData.perfTypeNtf:type_name -> com.perfdog.proto.WindowsPerfTypeNtf
	109, // 295: com.perfdog.proto.WindowsPerfData.gpuMemoryUsage:type_name -> com.perfdog.proto.WindowsGpuMemoryUsage
	141, // 296: com.perfdog.proto.WindowsPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	43,  // 297: com.perfdog.proto.WindowsPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	110, // 298: com.perfdog.proto.WindowsPerfData.nvidiaGpuUsage:type_name -> com.perfdog.proto.NvidiaGpuUsage
	112, // 299: com.perfdog.proto.WindowsPerfData.cpuFreq:type_name -> com.perfdog.proto.WindowsCpuFreq
	69,  // 300: com.perfdog.proto.WindowsPerfData.coreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	164, // 301: com.perfdog.proto.WindowsPerfData.threadCpuUsageList:type_name -> com.perfdog.proto.ThreadCpuUsageList
	115, // 302: com.perfdog.proto.WindowsPerfData.diskUsage:type_name -> com.perfdog.proto.WindowsDiskUsage
	79,  // 303: com.perfdog.proto.WindowsPerfData.networkData:type_name -> com.perfdog.proto.NetworkData
	111, // 304: com.perfdog.proto.WindowsPerfData.amdGpuUsage:type_name -> com.perfdog.proto.AmdGpuUsage
	136, // 305: com.perfdog.proto.WindowsPerfData.deepProfilingData:type_name -> com.perfdog.proto.DeepProfilingData
	99,  // 306: com.perfdog.proto.WindowsPerfData.treeCpuUsage:type_name -> com.perfdog.proto.WindowsCpuUsage
	113, // 307: com.perfdog.proto.WindowsPerfData.cpuCoreFreqData:type_name -> com.perfdog.proto.WindowsCpuCoreFreq
	59,  // 308: com.perfdog.proto.PlayStationPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	81,  // 309: com.perfdog.proto.PlayStationPerfData.screenshot:type_name -> com.perfdog.proto.ScreenShotData
	60,  // 310: com.perfdog.proto.PlayStationPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 311: com.perfdog.proto.PlayStationPerfData.jankData:type_name -> com.perfdog.proto.JankData
	43,  // 312: com.perfdog.proto.PlayStationPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	141, // 313: com.perfdog.proto.PlayStationPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	164, // 314: com.perfdog.proto.PlayStationPerfData.threadCpuUsageList:type_name -> com.perfdog.proto.ThreadCpuUsageList
	59,  // 315: com.perfdog.proto.XboxPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	81,  // 316: com.perfdog.proto.XboxPerfData.screenshot:type_name -> com.perfdog.proto.ScreenShotData
	60,  // 317: com.perfdog.proto.XboxPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 318: com.perfdog.proto.XboxPerfData.jankData:type_name -> com.perfdog.proto.JankData
	43,  // 319: com.perfdog.proto.XboxPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	141, // 320: com.perfdog.proto.XboxPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	20,  // 321: com.perfdog.proto.HarmonyMemoryDetail.gl:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 322: com.perfdog.proto.HarmonyMemoryDetail.graph:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 323: com.perfdog.proto.HarmonyMemoryDetail.hap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 324: com.perfdog.proto.HarmonyMemoryDetail.dev:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 325: com.perfdog.proto.HarmonyMemoryDetail.dmabuf:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 326: com.perfdog.proto.HarmonyMemoryDetail.arkTsHeap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 327: com.perfdog.proto.HarmonyMemoryDetail.nativeHeap:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 328: com.perfdog.proto.HarmonyMemoryDetail.guard:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 329: com.perfdog.proto.HarmonyMemoryDetail.stack:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 330: com.perfdog.proto.HarmonyMemoryDetail.db:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 331: com.perfdog.proto.HarmonyMemoryDetail.so:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 332: com.perfdog.proto.HarmonyMemoryDetail.ttf:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 333: com.perfdog.proto.HarmonyMemoryDetail.filePageOther:type_name -> com.perfdog.proto.OptionalDouble
	20,  // 334: com.perfdog.proto.HarmonyMemoryDetail.anonPageOther:type_name -> com.perfdog.proto.OptionalDouble
	17,  // 335: com.perfdog.proto.HarmonyMemData.availableMemory:type_name -> com.perfdog.proto.OptionalInt
	59,  // 336: com.perfdog.proto.HarmonyPerfData.fpsData:type_name -> com.perfdog.proto.FpsData
	60,  // 337: com.perfdog.proto.HarmonyPerfData.frameTimeData:type_name -> com.perfdog.proto.FrameTimeData
	61,  // 338: com.perfdog.proto.HarmonyPerfData.jankData:type_name -> com.perfdog.proto.JankData
	62,  // 339: com.perfdog.proto.HarmonyPerfData.gpuUsageData:type_name -> com.perfdog.proto.AndroidGpuUsageData
	64,  // 340: com.perfdog.proto.HarmonyPerfData.gpuFreqData:type_name -> com.perfdog.proto.GpuFreqData
	180, // 341: com.perfdog.proto.HarmonyPerfData.memoryData:type_name -> com.perfdog.proto.HarmonyMemData
	69,  // 342: com.perfdog.proto.HarmonyPerfData.coreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	70,  // 343: com.perfdog.proto.HarmonyPerfData.cpuFreqData:type_name -> com.perfdog.proto.CpuFreqData
	71,  // 344: com.perfdog.proto.HarmonyPerfData.cpuUsageData:type_name -> com.perfdog.proto.CpuUsageData
	72,  // 345: com.perfdog.proto.HarmonyPerfData.cpuTempData:type_name -> com.perfdog.proto.CpuTempData
	78,  // 346: com.perfdog.proto.HarmonyPerfData.batteryData:type_name -> com.perfdog.proto.BatteryData
	79,  // 347: com.perfdog.proto.HarmonyPerfData.networkData:type_name -> com.perfdog.proto.NetworkData
	80,  // 348: com.perfdog.proto.HarmonyPerfData.syslogData:type_name -> com.perfdog.proto.SyslogData
	81,  // 349: com.perfdog.proto.HarmonyPerfData.screenShotData:type_name -> com.perfdog.proto.ScreenShotData
	71,  // 350: com.perfdog.proto.HarmonyPerfData.normalizedCpuUsageData:type_name -> com.perfdog.proto.CpuUsageData
	69,  // 351: com.perfdog.proto.HarmonyPerfData.normalizedCpuCoreUsageData:type_name -> com.perfdog.proto.CoreUsageData
	137, // 352: com.perfdog.proto.HarmonyPerfData.perFramePowerConsumption:type_name -> com.perfdog.proto.PerFramePowerConsumption
	73,  // 353: com.perfdog.proto.HarmonyPerfData.batteryTempData:type_name -> com.perfdog.proto.BatteryTempData
	74,  // 354: com.perfdog.proto.HarmonyPerfData.gpuTempData:type_name -> com.perfdog.proto.GpuTempData
	75,  // 355: com.perfdog.proto.HarmonyPerfData.npuTempData:type_name -> com.perfdog.proto.NpuTempData
	136, // 356: com.perfdog.proto.HarmonyPerfData.deepProfilingData:type_name -> com.perfdog.proto.DeepProfilingData
	141, // 357: com.perfdog.proto.HarmonyPerfData.customDataList:type_name -> com.perfdog.proto.CustomDataList
	43,  // 358: com.perfdog.proto.HarmonyPerfData.dynamicDataList:type_name -> com.perfdog.proto.DynamicDataList
	179, // 359: com.perfdog.proto.HarmonyPerfData.memoryDetail:type_name -> com.perfdog.proto.HarmonyMemoryDetail
	162, // 360: com.perfdog.proto.HarmonyPerfData.networkProfilingData:type_name -> com.perfdog.proto.NetworkProfilingData
	164, // 361: com.perfdog.proto.HarmonyPerfData.threadCpuUsageList:type_name -> com.perfdog.proto.ThreadCpuUsageList
	165, // 362: com.perfdog.proto.HarmonyPerfData.clockSnapshot:type_name -> com.perfdog.proto.ClockSnapshot
	166, // 363: com.perfdog.proto.HarmonyPerfData.appLaunchingTime:type_name -> com.perfdog.proto.AppLaunchingTime
	167, // 364: com.perfdog.proto.HarmonyPerfData.appFullyDrawnTime:type_name -> com.perfdog.proto.AppFullyDrawnTime
	168, // 365: com.perfdog.proto.HarmonyPerfData.screenBrightness:type_name -> com.perfdog.proto.ScreenBrightness
	169, // 366: com.perfdog.proto.HarmonyPerfData.batteryLevel:type_name -> com.perfdog.proto.BatteryLevel
	82,  // 367: com.perfdog.proto.PerfData.warningData:type_name -> com.perfdog.proto.WarningData
	83,  // 368: com.perfdog.proto.PerfData.errorData:type_name -> com.perfdog.proto.ErrorData
	173, // 369: com.perfdog.proto.PerfData.androidPerfData:type_name -> com.perfdog.proto.AndroidPerfData
	174, // 370: com.perfdog.proto.PerfData.iosPerfData:type_name -> com.perfdog.proto.IosPerfData
	55,  // 371: com.perfdog.proto.PerfData.startTestRet:type_name -> com.perfdog.proto.StartTestRet
	175, // 372: com.perfdog.proto.PerfData.switchPerfData:type_name -> com.perfdog.proto.SwitchPerfData
	176, // 373: com.perfdog.proto.PerfData.windowsPerfData:type_name -> com.perfdog.proto.WindowsPerfData
	177, // 374: com.perfdog.proto.PerfData.playStationPerfData:type_name -> com.perfdog.proto.PlayStationPerfData
	178, // 375: com.perfdog.proto.PerfData.xboxPerfData:type_name -> com.perfdog.proto.XboxPerfData
	181, // 376: com.perfdog.proto.PerfData.harmonyPerfData:type_name -> com.perfdog.proto.HarmonyPerfData
	36,  // 377: com.perfdog.proto.CachePerfData.appInfo:type_name -> com.perfdog.proto.AppInfo
	173, // 378: com.perfdog.proto.CachePerfData.AndroidPerfData:type_name -> com.perfdog.proto.AndroidPerfData
	174, // 379: com.perfdog.proto.CachePerfData.IosPerfData:type_name -> com.perfdog.proto.IosPerfData
	34,  // 380: com.perfdog.proto.CachePerfData.DeviceInfo:type_name -> com.perfdog.proto.DeviceInfo
	175, // 381: com.perfdog.proto.CachePerfData.SwitchPerfData:type_name -> com.perfdog.proto.SwitchPerfData
	176, // 382: com.perfdog.proto.CachePerfData.windowsPerfData:type_name -> com.perfdog.proto.WindowsPerfData
	185, // 383: com.perfdog.proto.CachePerfData.memoryReportData:type_name -> com.perfdog.proto.MemoryReportData
	177, // 384: com.perfdog.proto.CachePerfData.playStationPerfData:type_name -> com.perfdog.proto.PlayStationPerfData
	178, // 385: com.perfdog.proto.CachePerfData.xboxPerfData:type_name -> com.perfdog.proto.XboxPerfData
	181, // 386: com.perfdog.proto.CachePerfData.harmonyPerfData:type_name -> com.perfdog.proto.HarmonyPerfData
	184, // 387: com.perfdog.proto.CachePerfDataPacked.screenshotFile:type_name -> com.perfdog.proto.ScreenshotFile
	25,  // 388: com.perfdog.proto.SetLabelReq.device:type_name -> com.perfdog.proto.Device
	25,  // 389: com.perfdog.proto.UpdateLabelReq.device:type_name -> com.perfdog.proto.Device
	25,  // 390: com.perfdog.proto.AddNoteReq.device:type_name -> com.perfdog.proto.Device
	25,  // 391: com.perfdog.proto.RemoveNoteReq.device:type_name -> com.perfdog.proto.Device
	13,  // 392: com.perfdog.proto.SetDataUploadServerReq.dataUploadFormat:type_name -> com.perfdog.proto.DataInterchangeFormat
	25,  // 393: com.perfdog.proto.SaveDataReq.device:type_name -> com.perfdog.proto.Device
	12,  // 394: com.perfdog.proto.SaveDataReq.dataExportFormat:type_name -> com.perfdog.proto.DataExportFormat
	195, // 395: com.perfdog.proto.SaveDataReq.extraInfo:type_name -> com.perfdog.proto.ExtraInfo
	249, // 396: com.perfdog.proto.ExtraInfo.infoMap:type_name -> com.perfdog.proto.ExtraInfo.InfoMapEntry
	196, // 397: com.perfdog.proto.SaveDataRsp.uploadResult:type_name -> com.perfdog.proto.UploadToServerResult
	197, // 398: com.perfdog.proto.SaveDataRsp.exportResult:type_name -> com.perfdog.proto.ExportToFileResult
	25,  // 399: com.perfdog.proto.GetAppRunningProcessReq.device:type_name -> com.perfdog.proto.Device
	36,  // 400: com.perfdog.proto.GetAppRunningProcessReq.app:type_name -> com.perfdog.proto.AppInfo
	25,  // 401: com.perfdog.proto.GetAppWindowsMapReq.device:type_name -> com.perfdog.proto.Device
	36,  // 402: com.perfdog.proto.GetAppWindowsMapReq.app:type_name -> com.perfdog.proto.AppInfo
	201, // 403: com.perfdog.proto.GetAppRunningProcessRet.processInfo:type_name -> com.perfdog.proto.ProcessInfo
	250, // 404: com.perfdog.proto.GetAppWindowsMapRet.pid2WindowMap:type_name -> com.perfdog.proto.GetAppWindowsMapRet.Pid2WindowMapEntry
	205, // 405: com.perfdog.proto.GetRunningSysProcessRet.processInfo:type_name -> com.perfdog.proto.SysProcessInfo
	25,  // 406: com.perfdog.proto.UpdateAppInfoReq.device:type_name -> com.perfdog.proto.Device
	36,  // 407: com.perfdog.proto.UpdateAppInfoReq.app:type_name -> com.perfdog.proto.AppInfo
	36,  // 408: com.perfdog.proto.UpdateAppInfoRet.app:type_name -> com.perfdog.proto.AppInfo
	25,  // 409: com.perfdog.proto.GetDeviceCacheDataReq.device:type_name -> com.perfdog.proto.Device
	25,  // 410: com.perfdog.proto.GetDeviceCacheDataPackedReq.device:type_name -> com.perfdog.proto.Device
	13,  // 411: com.perfdog.proto.GetDeviceCacheDataPackedReq.dataFormat:type_name -> com.perfdog.proto.DataInterchangeFormat
	25,  // 412: com.perfdog.proto.DeviceListRsp.devices:type_name -> com.perfdog.proto.Device
	219, // 413: com.perfdog.proto.SetPreferencesReq.preferences:type_name -> com.perfdog.proto.Preferences
	25,  // 414: com.perfdog.proto.GetRenderResolutionReq.device:type_name -> com.perfdog.proto.Device
	25,  // 415: com.perfdog.proto.GetCpuInfoReq.device:type_name -> com.perfdog.proto.Device
	25,  // 416: com.perfdog.proto.SetMemorySamplingFrequencyReq.device:type_name -> com.perfdog.proto.Device
	25,  // 417: com.perfdog.proto.TransferFloatingWindowMessageReq.device:type_name -> com.perfdog.proto.Device
	14,  // 418: com.perfdog.proto.TransferFloatingWindowMessageReq.message:type_name -> com.perfdog.proto.FloatingWindowMessage
	25,  // 419: com.perfdog.proto.SetFloatingWindowPreferencesReq.device:type_name -> com.perfdog.proto.Device
	15,  // 420: com.perfdog.proto.SetFloatingWindowPreferencesReq.position:type_name -> com.perfdog.proto.FloatingWindowPosition
	228, // 421: com.perfdog.proto.SetFloatingWindowPreferencesReq.fontColor:type_name -> com.perfdog.proto.Color
	25,  // 422: com.perfdog.proto.UnrealMemoryReportReq.device:type_name -> com.perfdog.proto.Device
	25,  // 423: com.perfdog.proto.UpdateMemoryReportReq.device:type_name -> com.perfdog.proto.Device
	50,  // 424: com.perfdog.proto.GetPresetNetworkProfilingTemplateRsp.templates:type_name -> com.perfdog.proto.NetworkProfilingTemplate
	50,  // 425: com.perfdog.proto.SubmitUserNetworkProfilingTemplateReq.template:type_name -> com.perfdog.proto.NetworkProfilingTemplate
	50,  // 426: com.perfdog.proto.UpdateUserNetworkProfilingTemplateReq.template:type_name -> com.perfdog.proto.NetworkProfilingTemplate
	25,  // 427: com.perfdog.proto.ChangeNetworkTemplateReq.device:type_name -> com.perfdog.proto.Device
	50,  // 428: com.perfdog.proto.ChangeNetworkTemplateReq.template:type_name -> com.perfdog.proto.NetworkProfilingTemplate
	1,   // 429: com.perfdog.proto.AddRemoteHostDeviceReq.type:type_name -> com.perfdog.proto.DEVICE_OSTYPE
	25,  // 430: com.perfdog.proto.CheckDeviceOccupiedByOtherUsersReq.device:type_name -> com.perfdog.proto.Device
	25,  // 431: com.perfdog.proto.SetPairedPasswordReq.device:type_name -> com.perfdog.proto.Device
	21,  // 432: com.perfdog.proto.LaunchAsRemoteCollectorRsp.result:type_name -> com.perfdog.proto.OptionBool
	25,  // 433: com.perfdog.proto.SetEnableDevAppTestReq.device:type_name -> com.perfdog.proto.Device
	203, // 434: com.perfdog.proto.GetAppWindowsMapRet.Pid2WindowMapEntry.value:type_name -> com.perfdog.proto.AppWindow
	23,  // 435: com.perfdog.proto.PerfDogService.loginWithToken:input_type -> com.perfdog.proto.Token
	22,  // 436: com.perfdog.proto.PerfDogService.getDeviceList:input_type -> com.perfdog.proto.Empty
	22,  // 437: com.perfdog.proto.PerfDogService.startDeviceMonitor:input_type -> com.perfdog.proto.Empty
	22,  // 438: com.perfdog.proto.PerfDogService.listenGlobalEvent:input_type -> com.perfdog.proto.Empty
	25,  // 439: com.perfdog.proto.PerfDogService.checkIos17AboveDriveUninstalled:input_type -> com.perfdog.proto.Device
	25,  // 440: com.perfdog.proto.PerfDogService.initDevice:input_type -> com.perfdog.proto.Device
	25,  // 441: com.perfdog.proto.PerfDogService.getDeviceInfo:input_type -> com.perfdog.proto.Device
	25,  // 442: com.perfdog.proto.PerfDogService.getDeviceStatus:input_type -> com.perfdog.proto.Device
	25,  // 443: com.perfdog.proto.PerfDogService.getAppList:input_type -> com.perfdog.proto.Device
	38,  // 444: com.perfdog.proto.PerfDogService.enablePerfDataType:input_type -> com.perfdog.proto.EnablePerfDataTypeReq
	39,  // 445: com.perfdog.proto.PerfDogService.disablePerfDataType:input_type -> com.perfdog.proto.DisablePerfDataTypeReq
	25,  // 446: com.perfdog.proto.PerfDogService.getPerfDataType:input_type -> com.perfdog.proto.Device
	25,  // 447: com.perfdog.proto.PerfDogService.getAvailableDataType:input_type -> com.perfdog.proto.Device
	46,  // 448: com.perfdog.proto.PerfDogService.setScreenShotInterval:input_type -> com.perfdog.proto.ScreenShotInterval
	53,  // 449: com.perfdog.proto.PerfDogService.StartTestAppInternal:input_type -> com.perfdog.proto.StartTestAppReq
	54,  // 450: com.perfdog.proto.PerfDogService.StartTestSysProcessInternal:input_type -> com.perfdog.proto.StartTestSysProcessReq
	53,  // 451: com.perfdog.proto.PerfDogService.startTestApp:input_type -> com.perfdog.proto.StartTestAppReq
	54,  // 452: com.perfdog.proto.PerfDogService.startTestSysProcess:input_type -> com.perfdog.proto.StartTestSysProcessReq
	56,  // 453: com.perfdog.proto.PerfDogService.openPerfDataStream:input_type -> com.perfdog.proto.OpenPerfDataStreamReq
	57,  // 454: com.perfdog.proto.PerfDogService.stopTest:input_type -> com.perfdog.proto.StopTestReq
	187, // 455: com.perfdog.proto.PerfDogService.setLabel:input_type -> com.perfdog.proto.SetLabelReq
	189, // 456: com.perfdog.proto.PerfDogService.updateLabel:input_type -> com.perfdog.proto.UpdateLabelReq
	190, // 457: com.perfdog.proto.PerfDogService.addNote:input_type -> com.perfdog.proto.AddNoteReq
	191, // 458: com.perfdog.proto.PerfDogService.removeNote:input_type -> com.perfdog.proto.RemoveNoteReq
	192, // 459: com.perfdog.proto.PerfDogService.setGlobalDataUploadServer:input_type -> com.perfdog.proto.SetDataUploadServerReq
	194, // 460: com.perfdog.proto.PerfDogService.saveData:input_type -> com.perfdog.proto.SaveDataReq
	210, // 461: com.perfdog.proto.PerfDogService.getDeviceCacheData:input_type -> com.perfdog.proto.GetDeviceCacheDataReq
	211, // 462: com.perfdog.proto.PerfDogService.getDeviceCacheDataPacked:input_type -> com.perfdog.proto.GetDeviceCacheDataPackedReq
	199, // 463: com.perfdog.proto.PerfDogService.getAppRunningProcess:input_type -> com.perfdog.proto.GetAppRunningProcessReq
	200, // 464: com.perfdog.proto.PerfDogService.getAppWindowsMap:input_type -> com.perfdog.proto.GetAppWindowsMapReq
	25,  // 465: com.perfdog.proto.PerfDogService.getRunningSysProcess:input_type -> com.perfdog.proto.Device
	208, // 466: com.perfdog.proto.PerfDogService.updateAppInfo:input_type -> com.perfdog.proto.UpdateAppInfoReq
	212, // 467: com.perfdog.proto.PerfDogService.createTask:input_type -> com.perfdog.proto.CreateTaskReq
	214, // 468: com.perfdog.proto.PerfDogService.archiveCaseToTask:input_type -> com.perfdog.proto.ArchiveCaseToTaskReq
	216, // 469: com.perfdog.proto.PerfDogService.shareCase:input_type -> com.perfdog.proto.ShareCaseReq
	220, // 470: com.perfdog.proto.PerfDogService.setPreferences:input_type -> com.perfdog.proto.SetPreferencesReq
	222, // 471: com.perfdog.proto.PerfDogService.getRenderResolutionOfWindowUnderTest:input_type -> com.perfdog.proto.GetRenderResolutionReq
	224, // 472: com.perfdog.proto.PerfDogService.getCpuInfo:input_type -> com.perfdog.proto.GetCpuInfoReq
	226, // 473: com.perfdog.proto.PerfDogService.setMemorySamplingFrequency:input_type -> com.perfdog.proto.SetMemorySamplingFrequencyReq
	227, // 474: com.perfdog.proto.PerfDogService.transferFloatingWindowMessage:input_type -> com.perfdog.proto.TransferFloatingWindowMessageReq
	230, // 475: com.perfdog.proto.PerfDogService.generateUnrealMemoryReport:input_type -> com.perfdog.proto.UnrealMemoryReportReq
	231, // 476: com.perfdog.proto.PerfDogService.updateMemoryReportInfo:input_type -> com.perfdog.proto.UpdateMemoryReportReq
	22,  // 477: com.perfdog.proto.PerfDogService.killServer:input_type -> com.perfdog.proto.Empty
	229, // 478: com.perfdog.proto.PerfDogService.setFloatingWindowPreferences:input_type -> com.perfdog.proto.SetFloatingWindowPreferencesReq
	232, // 479: com.perfdog.proto.PerfDogService.getPresetNetworkProfilingTemplate:input_type -> com.perfdog.proto.GetPresetNetworkProfilingTemplateReq
	234, // 480: com.perfdog.proto.PerfDogService.submitUserNetworkProfilingTemplate:input_type -> com.perfdog.proto.SubmitUserNetworkProfilingTemplateReq
	236, // 481: com.perfdog.proto.PerfDogService.updateUserNetworkProfilingTemplate:input_type -> com.perfdog.proto.UpdateUserNetworkProfilingTemplateReq
	237, // 482: com.perfdog.proto.PerfDogService.deleteUserNetworkProfilingTemplate:input_type -> com.perfdog.proto.DeleteUserNetworkProfilingTemplateReq
	238, // 483: com.perfdog.proto.PerfDogService.changeNetworkTemplate:input_type -> com.perfdog.proto.ChangeNetworkTemplateReq
	240, // 484: com.perfdog.proto.PerfDogService.addRemoteHostDevice:input_type -> com.perfdog.proto.AddRemoteHostDeviceReq
	241, // 485: com.perfdog.proto.PerfDogService.checkDeviceOccupiedByOtherUsers:input_type -> com.perfdog.proto.CheckDeviceOccupiedByOtherUsersReq
	242, // 486: com.perfdog.proto.PerfDogService.setPairedPasswordResponse:input_type -> com.perfdog.proto.SetPairedPasswordReq
	22,  // 487: com.perfdog.proto.PerfDogService.launchAsRemoteCollector:input_type -> com.perfdog.proto.Empty
	22,  // 488: com.perfdog.proto.PerfDogService.updateRemoteWindowsDevice:input_type -> com.perfdog.proto.Empty
	245, // 489: com.perfdog.proto.PerfDogService.setEnableDevAppTest:input_type -> com.perfdog.proto.SetEnableDevAppTestReq
	24,  // 490: com.perfdog.proto.PerfDogService.loginWithToken:output_type -> com.perfdog.proto.UserInfo
	218, // 491: com.perfdog.proto.PerfDogService.getDeviceList:output_type -> com.perfdog.proto.DeviceListRsp
	28,  // 492: com.perfdog.proto.PerfDogService.startDeviceMonitor:output_type -> com.perfdog.proto.DeviceEvent
	33,  // 493: com.perfdog.proto.PerfDogService.listenGlobalEvent:output_type -> com.perfdog.proto.GlobalEvent
	21,  // 494: com.perfdog.proto.PerfDogService.checkIos17AboveDriveUninstalled:output_type -> com.perfdog.proto.OptionBool
	22,  // 495: com.perfdog.proto.PerfDogService.initDevice:output_type -> com.perfdog.proto.Empty
	34,  // 496: com.perfdog.proto.PerfDogService.getDeviceInfo:output_type -> com.perfdog.proto.DeviceInfo
	35,  // 497: com.perfdog.proto.PerfDogService.getDeviceStatus:output_type -> com.perfdog.proto.DeviceStatus
	37,  // 498: com.perfdog.proto.PerfDogService.getAppList:output_type -> com.perfdog.proto.AppList
	22,  // 499: com.perfdog.proto.PerfDogService.enablePerfDataType:output_type -> com.perfdog.proto.Empty
	22,  // 500: com.perfdog.proto.PerfDogService.disablePerfDataType:output_type -> com.perfdog.proto.Empty
	45,  // 501: com.perfdog.proto.PerfDogService.getPerfDataType:output_type -> com.perfdog.proto.PerfDataTypeRet
	45,  // 502: com.perfdog.proto.PerfDogService.getAvailableDataType:output_type -> com.perfdog.proto.PerfDataTypeRet
	22,  // 503: com.perfdog.proto.PerfDogService.setScreenShotInterval:output_type -> com.perfdog.proto.Empty
	182, // 504: com.perfdog.proto.PerfDogService.StartTestAppInternal:output_type -> com.perfdog.proto.PerfData
	182, // 505: com.perfdog.proto.PerfDogService.StartTestSysProcessInternal:output_type -> com.perfdog.proto.PerfData
	55,  // 506: com.perfdog.proto.PerfDogService.startTestApp:output_type -> com.perfdog.proto.StartTestRet
	55,  // 507: com.perfdog.proto.PerfDogService.startTestSysProcess:output_type -> com.perfdog.proto.StartTestRet
	182, // 508: com.perfdog.proto.PerfDogService.openPerfDataStream:output_type -> com.perfdog.proto.PerfData
	22,  // 509: com.perfdog.proto.PerfDogService.stopTest:output_type -> com.perfdog.proto.Empty
	188, // 510: com.perfdog.proto.PerfDogService.setLabel:output_type -> com.perfdog.proto.SetLabelRet
	22,  // 511: com.perfdog.proto.PerfDogService.updateLabel:output_type -> com.perfdog.proto.Empty
	22,  // 512: com.perfdog.proto.PerfDogService.addNote:output_type -> com.perfdog.proto.Empty
	22,  // 513: com.perfdog.proto.PerfDogService.removeNote:output_type -> com.perfdog.proto.Empty
	193, // 514: com.perfdog.proto.PerfDogService.setGlobalDataUploadServer:output_type -> com.perfdog.proto.SetDataUploadServerRsp
	198, // 515: com.perfdog.proto.PerfDogService.saveData:output_type -> com.perfdog.proto.SaveDataRsp
	183, // 516: com.perfdog.proto.PerfDogService.getDeviceCacheData:output_type -> com.perfdog.proto.CachePerfData
	186, // 517: com.perfdog.proto.PerfDogService.getDeviceCacheDataPacked:output_type -> com.perfdog.proto.CachePerfDataPacked
	202, // 518: com.perfdog.proto.PerfDogService.getAppRunningProcess:output_type -> com.perfdog.proto.GetAppRunningProcessRet
	204, // 519: com.perfdog.proto.PerfDogService.getAppWindowsMap:output_type -> com.perfdog.proto.GetAppWindowsMapRet
	206, // 520: com.perfdog.proto.PerfDogService.getRunningSysProcess:output_type -> com.perfdog.proto.GetRunningSysProcessRet
	209, // 521: com.perfdog.proto.PerfDogService.updateAppInfo:output_type -> com.perfdog.proto.UpdateAppInfoRet
	213, // 522: com.perfdog.proto.PerfDogService.createTask:output_type -> com.perfdog.proto.CreateTaskRsp
	215, // 523: com.perfdog.proto.PerfDogService.archiveCaseToTask:output_type -> com.perfdog.proto.ArchiveCaseToTaskRsp
	217, // 524: com.perfdog.proto.PerfDogService.shareCase:output_type -> com.perfdog.proto.ShareCaseRsp
	221, // 525: com.perfdog.proto.PerfDogService.setPreferences:output_type -> com.perfdog.proto.SetPreferencesRsp
	223, // 526: com.perfdog.proto.PerfDogService.getRenderResolutionOfWindowUnderTest:output_type -> com.perfdog.proto.GetRenderResolutionRet
	225, // 527: com.perfdog.proto.PerfDogService.getCpuInfo:output_type -> com.perfdog.proto.GetCpuInfoRsp
	22,  // 528: com.perfdog.proto.PerfDogService.setMemorySamplingFrequency:output_type -> com.perfdog.proto.Empty
	22,  // 529: com.perfdog.proto.PerfDogService.transferFloatingWindowMessage:output_type -> com.perfdog.proto.Empty
	185, // 530: com.perfdog.proto.PerfDogService.generateUnrealMemoryReport:output_type -> com.perfdog.proto.MemoryReportData
	22,  // 531: com.perfdog.proto.PerfDogService.updateMemoryReportInfo:output_type -> com.perfdog.proto.Empty
	22,  // 532: com.perfdog.proto.PerfDogService.killServer:output_type -> com.perfdog.proto.Empty
	22,  // 533: com.perfdog.proto.PerfDogService.setFloatingWindowPreferences:output_type -> com.perfdog.proto.Empty
	233, // 534: com.perfdog.proto.PerfDogService.getPresetNetworkProfilingTemplate:output_type -> com.perfdog.proto.GetPresetNetworkProfilingTemplateRsp
	235, // 535: com.perfdog.proto.PerfDogService.submitUserNetworkProfilingTemplate:output_type -> com.perfdog.proto.SubmitUserNetworkProfilingTemplateRsp
	22,  // 536: com.perfdog.proto.PerfDogService.updateUserNetworkProfilingTemplate:output_type -> com.perfdog.proto.Empty
	22,  // 537: com.perfdog.proto.PerfDogService.deleteUserNetworkProfilingTemplate:output_type -> com.perfdog.proto.Empty
	239, // 538: com.perfdog.proto.PerfDogService.changeNetworkTemplate:output_type -> com.perfdog.proto.ChangeNetworkTemplateRsp
	22,  // 539: com.perfdog.proto.PerfDogService.addRemoteHostDevice:output_type -> com.perfdog.proto.Empty
	243, // 540: com.perfdog.proto.PerfDogService.checkDeviceOccupiedByOtherUsers:output_type -> com.perfdog.proto.CheckDeviceOccupiedByOtherUsersRsp
	22,  // 541: com.perfdog.proto.PerfDogService.setPairedPasswordResponse:output_type -> com.perfdog.proto.Empty
	244, // 542: com.perfdog.proto.PerfDogService.launchAsRemoteCollector:output_type -> com.perfdog.proto.LaunchAsRemoteCollectorRsp
	22,  // 543: com.perfdog.proto.PerfDogService.updateRemoteWindowsDevice:output_type -> com.perfdog.proto.Empty
	22,  // 544: com.perfdog.proto.PerfDogService.setEnableDevAppTest:output_type -> com.perfdog.proto.Empty
	490, // [490:545] is the sub-list for method output_type
	435, // [435:490] is the sub-list for method input_type
	435, // [435:435] is the sub-list for extension type_name
	435, // [435:435] is the sub-list for extension extendee
	0,   // [0:435] is the sub-list for field type_name
}

func init() { file_perfdog_perfdog_perfdog_proto_init() }
func file_perfdog_perfdog_perfdog_proto_init() {
	if File_perfdog_perfdog_perfdog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_perfdog_perfdog_perfdog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchAsCollectorEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecordEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddLabelEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResolutionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePerfDataTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePerfDataTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPerfDataKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPerfDataDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystraceCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfDataTypeRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenShotInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayBias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProfilingScene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProfilingOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProfilingTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStartTestOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystraceStartTestOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTestAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTestSysProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTestRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPerfDataStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopTestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FpsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidGpuUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosGpuUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuFreqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidMemDetailData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ios10MemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ios11MemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuFreqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuTempData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryTempData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuTempData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NpuTempData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtxSwitchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeupsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyslogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenShotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarningData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaliGpuCounterBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaliGpuCounterShader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaliGpuCounterMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QComGpuCounterBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QComGpuCounterMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QComGpuCounterShader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PVRGpuCounterBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PVRGpuCounterMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PVRGpuCounterShader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosGPUCounterBasics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosGPUCounterMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosGPUCounterShader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosGPUCounterSampleCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchMemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnityMonoHeapData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsCpuUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsRender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsRenderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsMemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsIOUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsThread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpuGraphicsUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsGpuUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsPerfTypeNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsGpuMemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NvidiaGpuUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmdGpuUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsCpuFreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsCpuCoreFreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsCpuCoreUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsDiskUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Frame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerFrameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepProfilingProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadStateExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunningStateExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderTransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SliceExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadFlameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadScheduleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuScheduleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepProfilingCounterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepProfilingAsyncEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepProfilingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerFramePowerConsumption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNoteNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLabelNtf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkWarning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpConnectionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerLatency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpRetransmissionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpRetransmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpPacketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdpPacketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsPacketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcmpPacketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDetailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawIpPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsHandshakeComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTraffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTrafficStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkProfilingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCpuUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadCpuUsageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppLaunchingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppFullyDrawnTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenBrightness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuThrottlingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameGeneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowsPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayStationPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XboxPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarmonyMemoryDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarmonyMemData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarmonyPerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachePerfData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenshotFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachePerfDataPacked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLabelRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLabelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNoteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDataUploadServerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDataUploadServerRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadToServerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportToFileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRunningProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppWindowsMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppRunningProcessRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppWindowsMapRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysProcessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunningSysProcessRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IosEnergyUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppInfoRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceCacheDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceCacheDataPackedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveCaseToTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveCaseToTaskRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCaseRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Preferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferencesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferencesRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRenderResolutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRenderResolutionRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCpuInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCpuInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMemorySamplingFrequencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFloatingWindowMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFloatingWindowPreferencesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnrealMemoryReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMemoryReportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresetNetworkProfilingTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPresetNetworkProfilingTemplateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitUserNetworkProfilingTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitUserNetworkProfilingTemplateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserNetworkProfilingTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserNetworkProfilingTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNetworkTemplateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNetworkTemplateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRemoteHostDeviceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceOccupiedByOtherUsersReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPairedPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDeviceOccupiedByOtherUsersRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchAsRemoteCollectorRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEnableDevAppTestReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_perfdog_perfdog_perfdog_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinderSession_Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*DeviceMessage_GetPasswordRequest)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*GlobalEvent_LaunchAsCollectorEvent)(nil),
		(*GlobalEvent_StartRecordEvent)(nil),
		(*GlobalEvent_AddLabelEvent)(nil),
		(*GlobalEvent_GetResolutionEvent)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[100].OneofWrappers = []interface{}{
		(*Value_LongValue)(nil),
		(*Value_DoubleValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_Blob)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[119].OneofWrappers = []interface{}{
		(*DeepProfilingData_Frame)(nil),
		(*DeepProfilingData_PerFrameData)(nil),
		(*DeepProfilingData_ThreadInfo)(nil),
		(*DeepProfilingData_ThreadFlameData)(nil),
		(*DeepProfilingData_ThreadScheduleData)(nil),
		(*DeepProfilingData_CpuScheduleData)(nil),
		(*DeepProfilingData_ProcessInfo)(nil),
		(*DeepProfilingData_CounterData)(nil),
		(*DeepProfilingData_AsyncEvent)(nil),
		(*DeepProfilingData_BinderSession)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*PacketDetailItem_TcpPacketDetail)(nil),
		(*PacketDetailItem_UdpPacketDetail)(nil),
		(*PacketDetailItem_DnsPacketDetail)(nil),
		(*PacketDetailItem_IcmpPacketDetail)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*NetworkProfilingData_NetworkWarning)(nil),
		(*NetworkProfilingData_TcpConnectionCount)(nil),
		(*NetworkProfilingData_TrafficStatistics)(nil),
		(*NetworkProfilingData_ServerLatency)(nil),
		(*NetworkProfilingData_TcpRetransmission)(nil),
		(*NetworkProfilingData_PacketDetail)(nil),
		(*NetworkProfilingData_RawIpPacket)(nil),
		(*NetworkProfilingData_TlsAlert)(nil),
		(*NetworkProfilingData_TlsHandshakeComplete)(nil),
		(*NetworkProfilingData_HttpRequest)(nil),
		(*NetworkProfilingData_IpTrafficStatistics)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[153].OneofWrappers = []interface{}{
		(*TestingInfo_TaskName)(nil),
		(*TestingInfo_ProcessName)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[156].OneofWrappers = []interface{}{
		(*AndroidPerfData_FpsData)(nil),
		(*AndroidPerfData_FrameTimeData)(nil),
		(*AndroidPerfData_JankData)(nil),
		(*AndroidPerfData_AndroidGpuUsageData)(nil),
		(*AndroidPerfData_GpuFreqData)(nil),
		(*AndroidPerfData_AndroidMemData)(nil),
		(*AndroidPerfData_CoreUsageData)(nil),
		(*AndroidPerfData_CpuFreqData)(nil),
		(*AndroidPerfData_CpuUsageData)(nil),
		(*AndroidPerfData_CpuTempData)(nil),
		(*AndroidPerfData_BatteryData)(nil),
		(*AndroidPerfData_NetworkData)(nil),
		(*AndroidPerfData_SyslogData)(nil),
		(*AndroidPerfData_ScreenShotData)(nil),
		(*AndroidPerfData_NormalizedCpuUsageData)(nil),
		(*AndroidPerfData_NormalizedCpuCoreUsageData)(nil),
		(*AndroidPerfData_MaliGpuCounterBasic)(nil),
		(*AndroidPerfData_MaliGpuCounterShader)(nil),
		(*AndroidPerfData_MaliGpuCounterMemory)(nil),
		(*AndroidPerfData_QcomGpuCounterBasic)(nil),
		(*AndroidPerfData_QcomGpuCounterMemory)(nil),
		(*AndroidPerfData_QcomGpuCounterShader)(nil),
		(*AndroidPerfData_PvrGpuCounterBasic)(nil),
		(*AndroidPerfData_PvrGpuCounterMemory)(nil),
		(*AndroidPerfData_PvrGpuCounterShader)(nil),
		(*AndroidPerfData_PerFramePowerConsumption)(nil),
		(*AndroidPerfData_BatteryTempData)(nil),
		(*AndroidPerfData_GpuTempData)(nil),
		(*AndroidPerfData_NpuTempData)(nil),
		(*AndroidPerfData_DeepProfilingData)(nil),
		(*AndroidPerfData_CustomDataList)(nil),
		(*AndroidPerfData_DynamicDataList)(nil),
		(*AndroidPerfData_AndroidMemDetailData)(nil),
		(*AndroidPerfData_NetworkProfilingData)(nil),
		(*AndroidPerfData_ThreadCpuUsageList)(nil),
		(*AndroidPerfData_ClockSnapshot)(nil),
		(*AndroidPerfData_AppLaunchingTime)(nil),
		(*AndroidPerfData_AppFullyDrawnTime)(nil),
		(*AndroidPerfData_ScreenBrightness)(nil),
		(*AndroidPerfData_BatteryLevel)(nil),
		(*AndroidPerfData_TestingInfo)(nil),
		(*AndroidPerfData_CpuThrottlingData)(nil),
		(*AndroidPerfData_FrameGeneration)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[157].OneofWrappers = []interface{}{
		(*IosPerfData_FpsData)(nil),
		(*IosPerfData_FrameTimeData)(nil),
		(*IosPerfData_JankData)(nil),
		(*IosPerfData_IosGpuUsageData)(nil),
		(*IosPerfData_Ios10MemData)(nil),
		(*IosPerfData_Ios11MemData)(nil),
		(*IosPerfData_CpuUsageData)(nil),
		(*IosPerfData_CtxSwitchData)(nil),
		(*IosPerfData_WakeupsData)(nil),
		(*IosPerfData_BatteryData)(nil),
		(*IosPerfData_NetworkData)(nil),
		(*IosPerfData_SyslogData)(nil),
		(*IosPerfData_ScreenShotData)(nil),
		(*IosPerfData_IosEnergyUsageData)(nil),
		(*IosPerfData_BatteryTempData)(nil),
		(*IosPerfData_IosGPUCounterBasic)(nil),
		(*IosPerfData_IosGPUCounterMemory)(nil),
		(*IosPerfData_IosGPUCounterShader)(nil),
		(*IosPerfData_IosSampleCount)(nil),
		(*IosPerfData_DeviceNetworkData)(nil),
		(*IosPerfData_PerFramePowerConsumption)(nil),
		(*IosPerfData_DeepProfilingData)(nil),
		(*IosPerfData_CustomDataList)(nil),
		(*IosPerfData_DynamicDataList)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[158].OneofWrappers = []interface{}{
		(*SwitchPerfData_FpsData)(nil),
		(*SwitchPerfData_FrameTimeData)(nil),
		(*SwitchPerfData_JankData)(nil),
		(*SwitchPerfData_SwitchMemData)(nil),
		(*SwitchPerfData_UnityMonoHeapData)(nil),
		(*SwitchPerfData_CoreUsageData)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[159].OneofWrappers = []interface{}{
		(*WindowsPerfData_FpsData)(nil),
		(*WindowsPerfData_FrameTimeData)(nil),
		(*WindowsPerfData_JankData)(nil),
		(*WindowsPerfData_CpuUsage)(nil),
		(*WindowsPerfData_RenderData)(nil),
		(*WindowsPerfData_MemoryUsage)(nil),
		(*WindowsPerfData_IoUsage)(nil),
		(*WindowsPerfData_Thread)(nil),
		(*WindowsPerfData_Handle)(nil),
		(*WindowsPerfData_GpuUsage)(nil),
		(*WindowsPerfData_Screenshot)(nil),
		(*WindowsPerfData_PerfTypeNtf)(nil),
		(*WindowsPerfData_GpuMemoryUsage)(nil),
		(*WindowsPerfData_CustomDataList)(nil),
		(*WindowsPerfData_DynamicDataList)(nil),
		(*WindowsPerfData_NvidiaGpuUsage)(nil),
		(*WindowsPerfData_CpuFreq)(nil),
		(*WindowsPerfData_CoreUsageData)(nil),
		(*WindowsPerfData_ThreadCpuUsageList)(nil),
		(*WindowsPerfData_DiskUsage)(nil),
		(*WindowsPerfData_NetworkData)(nil),
		(*WindowsPerfData_AmdGpuUsage)(nil),
		(*WindowsPerfData_DeepProfilingData)(nil),
		(*WindowsPerfData_TreeCpuUsage)(nil),
		(*WindowsPerfData_CpuCoreFreqData)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[160].OneofWrappers = []interface{}{
		(*PlayStationPerfData_FpsData)(nil),
		(*PlayStationPerfData_Screenshot)(nil),
		(*PlayStationPerfData_FrameTimeData)(nil),
		(*PlayStationPerfData_JankData)(nil),
		(*PlayStationPerfData_DynamicDataList)(nil),
		(*PlayStationPerfData_CustomDataList)(nil),
		(*PlayStationPerfData_ThreadCpuUsageList)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[161].OneofWrappers = []interface{}{
		(*XboxPerfData_FpsData)(nil),
		(*XboxPerfData_Screenshot)(nil),
		(*XboxPerfData_FrameTimeData)(nil),
		(*XboxPerfData_JankData)(nil),
		(*XboxPerfData_DynamicDataList)(nil),
		(*XboxPerfData_CustomDataList)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[164].OneofWrappers = []interface{}{
		(*HarmonyPerfData_FpsData)(nil),
		(*HarmonyPerfData_FrameTimeData)(nil),
		(*HarmonyPerfData_JankData)(nil),
		(*HarmonyPerfData_GpuUsageData)(nil),
		(*HarmonyPerfData_GpuFreqData)(nil),
		(*HarmonyPerfData_MemoryData)(nil),
		(*HarmonyPerfData_CoreUsageData)(nil),
		(*HarmonyPerfData_CpuFreqData)(nil),
		(*HarmonyPerfData_CpuUsageData)(nil),
		(*HarmonyPerfData_CpuTempData)(nil),
		(*HarmonyPerfData_BatteryData)(nil),
		(*HarmonyPerfData_NetworkData)(nil),
		(*HarmonyPerfData_SyslogData)(nil),
		(*HarmonyPerfData_ScreenShotData)(nil),
		(*HarmonyPerfData_NormalizedCpuUsageData)(nil),
		(*HarmonyPerfData_NormalizedCpuCoreUsageData)(nil),
		(*HarmonyPerfData_PerFramePowerConsumption)(nil),
		(*HarmonyPerfData_BatteryTempData)(nil),
		(*HarmonyPerfData_GpuTempData)(nil),
		(*HarmonyPerfData_NpuTempData)(nil),
		(*HarmonyPerfData_DeepProfilingData)(nil),
		(*HarmonyPerfData_CustomDataList)(nil),
		(*HarmonyPerfData_DynamicDataList)(nil),
		(*HarmonyPerfData_MemoryDetail)(nil),
		(*HarmonyPerfData_NetworkProfilingData)(nil),
		(*HarmonyPerfData_ThreadCpuUsageList)(nil),
		(*HarmonyPerfData_ClockSnapshot)(nil),
		(*HarmonyPerfData_AppLaunchingTime)(nil),
		(*HarmonyPerfData_AppFullyDrawnTime)(nil),
		(*HarmonyPerfData_ScreenBrightness)(nil),
		(*HarmonyPerfData_BatteryLevel)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[165].OneofWrappers = []interface{}{
		(*PerfData_WarningData)(nil),
		(*PerfData_ErrorData)(nil),
		(*PerfData_AndroidPerfData)(nil),
		(*PerfData_IosPerfData)(nil),
		(*PerfData_StartTestRet)(nil),
		(*PerfData_SwitchPerfData)(nil),
		(*PerfData_WindowsPerfData)(nil),
		(*PerfData_PlayStationPerfData)(nil),
		(*PerfData_XboxPerfData)(nil),
		(*PerfData_HarmonyPerfData)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[166].OneofWrappers = []interface{}{
		(*CachePerfData_AppInfo)(nil),
		(*CachePerfData_AndroidPerfData)(nil),
		(*CachePerfData_IosPerfData)(nil),
		(*CachePerfData_DeviceInfo)(nil),
		(*CachePerfData_SwitchPerfData)(nil),
		(*CachePerfData_WindowsPerfData)(nil),
		(*CachePerfData_IgnoreFps)(nil),
		(*CachePerfData_MemoryReportData)(nil),
		(*CachePerfData_PlayStationPerfData)(nil),
		(*CachePerfData_XboxPerfData)(nil),
		(*CachePerfData_HarmonyPerfData)(nil),
	}
	file_perfdog_perfdog_perfdog_proto_msgTypes[169].OneofWrappers = []interface{}{
		(*CachePerfDataPacked_PerfData)(nil),
		(*CachePerfDataPacked_Icon)(nil),
		(*CachePerfDataPacked_ScreenshotFile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_perfdog_perfdog_perfdog_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   234,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_perfdog_perfdog_perfdog_proto_goTypes,
		DependencyIndexes: file_perfdog_perfdog_perfdog_proto_depIdxs,
		EnumInfos:         file_perfdog_perfdog_perfdog_proto_enumTypes,
		MessageInfos:      file_perfdog_perfdog_perfdog_proto_msgTypes,
	}.Build()
	File_perfdog_perfdog_perfdog_proto = out.File
	file_perfdog_perfdog_perfdog_proto_rawDesc = nil
	file_perfdog_perfdog_perfdog_proto_goTypes = nil
	file_perfdog_perfdog_perfdog_proto_depIdxs = nil
}
