// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: perfdog/perfdog/perfdog.proto

package perfdog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerfDogServiceClient is the client API for PerfDogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerfDogServiceClient interface {
	// Log in with the requested token
	// 通过申请的token登录
	LoginWithToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error)
	// Get a list of online devices
	// 获取在线设备列表
	GetDeviceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListRsp, error)
	// Start a device monitor
	// 启动设备监听器
	StartDeviceMonitor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PerfDogService_StartDeviceMonitorClient, error)
	ListenGlobalEvent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PerfDogService_ListenGlobalEventClient, error)
	// Returns true if the device is ios17 or above and no driver is installed, otherwise returns false
	// 设备为ios17以上且未安装驱动返回true，否则返回false
	CheckIos17AboveDriveUninstalled(ctx context.Context, in *Device, opts ...grpc.CallOption) (*OptionBool, error)
	// Initialize the device
	// 初始化设备
	InitDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error)
	// Get device information
	// 获取设备信息
	GetDeviceInfo(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceInfo, error)
	// Get device status
	// 获取设备状态
	GetDeviceStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceStatus, error)
	// Get a list of device applications
	// 获取设备APP列表
	GetAppList(ctx context.Context, in *Device, opts ...grpc.CallOption) (*AppList, error)
	// Enable data type
	// 开启数据类型
	EnablePerfDataType(ctx context.Context, in *EnablePerfDataTypeReq, opts ...grpc.CallOption) (*Empty, error)
	// Disable data type
	// 关闭数据类型
	DisablePerfDataType(ctx context.Context, in *DisablePerfDataTypeReq, opts ...grpc.CallOption) (*Empty, error)
	// Get a list of enabled data types
	// 获取已开启数据类型的列表
	GetPerfDataType(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PerfDataTypeRet, error)
	// Get a list of available data types
	// 获取设备可以开启的数据项
	GetAvailableDataType(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PerfDataTypeRet, error)
	// Set the screenshot interval
	// 设置截屏时间间隔
	SetScreenShotInterval(ctx context.Context, in *ScreenShotInterval, opts ...grpc.CallOption) (*Empty, error)
	// Compatible with older versions, not recommended
	// 兼容旧版本，不建议使用
	StartTestAppInternal(ctx context.Context, in *StartTestAppReq, opts ...grpc.CallOption) (PerfDogService_StartTestAppInternalClient, error)
	// Compatible with older versions, not recommended
	// 兼容旧版本，不建议使用
	StartTestSysProcessInternal(ctx context.Context, in *StartTestSysProcessReq, opts ...grpc.CallOption) (PerfDogService_StartTestSysProcessInternalClient, error)
	// Start test
	// The data types enabled by Android by default are FPS, CPU_USAGE, MEMORY, CPU_TEMPERATURE, NETWORK_USAGE, FRAME_TIME, and BATTERY (wifi mode)
	// The data types enabled by iOS by default are FPS, CPU_USAGE, MEMORY, IOS_GPU_USAGE, NETWORK_USAGE, CTX_SWITCH, FRAME_TIME (usb mode) and BATTERY (wifi mode)
	// If you need to enable other data types or disable them, use the enablePerfDataType and disablePerfDataType interfaces
	// 开始测试
	// Android默认开启的数据类型有FPS、CPU_USAGE、MEMORY、CPU_TEMPERATURE、NETWORK_USAGE、FRAME_TIME和BATTERY(wifi模式)
	// iOS默认开启的数据类型有FPS、CPU_USAGE、MEMORY、IOS_GPU_USAGE、NETWORK_USAGE、CTX_SWITCH、FRAME_TIME(usb模式)和BATTERY(wifi模式)
	// 如果需要开启或者关闭其他数据类型，请使用enablePerfDataType和disablePerfDataType接口
	StartTestApp(ctx context.Context, in *StartTestAppReq, opts ...grpc.CallOption) (*StartTestRet, error)
	StartTestSysProcess(ctx context.Context, in *StartTestSysProcessReq, opts ...grpc.CallOption) (*StartTestRet, error)
	// Get real-time test data streams from devices
	// 获取设备实时的测试数据流
	OpenPerfDataStream(ctx context.Context, in *OpenPerfDataStreamReq, opts ...grpc.CallOption) (PerfDogService_OpenPerfDataStreamClient, error)
	// Stop test
	// 结束测试
	StopTest(ctx context.Context, in *StopTestReq, opts ...grpc.CallOption) (*Empty, error)
	// set Label
	// 设置Label
	SetLabel(ctx context.Context, in *SetLabelReq, opts ...grpc.CallOption) (*SetLabelRet, error)
	// Modify the name of the label
	// 修改label的名字
	UpdateLabel(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Empty, error)
	// add note
	// 添加批注
	AddNote(ctx context.Context, in *AddNoteReq, opts ...grpc.CallOption) (*Empty, error)
	// delete note
	// 删除批注
	RemoveNote(ctx context.Context, in *RemoveNoteReq, opts ...grpc.CallOption) (*Empty, error)
	// Set the global data upload server, if you don't set it, it will be uploaded to PerfDog cloud platform by default.
	// 设置全局的数据上传服务器,不设置的情况下默认上传到PerfDog云平台
	SetGlobalDataUploadServer(ctx context.Context, in *SetDataUploadServerReq, opts ...grpc.CallOption) (*SetDataUploadServerRsp, error)
	// Upload data (default upload to PerfDog cloud platform, can be modified through the setGlobalDataUploadServer interface), while saving to a local Excel file.
	// 上传数据(默认上传到PerfDog云平台,可通过setGlobalDataUploadServer接口修改),同时保存到本地Excel文件
	SaveData(ctx context.Context, in *SaveDataReq, opts ...grpc.CallOption) (*SaveDataRsp, error)
	// Get the device's cached data, and return the data by item.
	// 获取设备的缓存数据,数据按条返回
	GetDeviceCacheData(ctx context.Context, in *GetDeviceCacheDataReq, opts ...grpc.CallOption) (PerfDogService_GetDeviceCacheDataClient, error)
	// Get the cache data of the device, pack the data into json or protobuf and return it at once.
	// 获取设备的缓存数据,数据打包成json或protobuf一次返回
	GetDeviceCacheDataPacked(ctx context.Context, in *GetDeviceCacheDataPackedReq, opts ...grpc.CallOption) (PerfDogService_GetDeviceCacheDataPackedClient, error)
	// Get a list of processes running on the device for this app
	// 获取设备上app正在运行的进程列表
	GetAppRunningProcess(ctx context.Context, in *GetAppRunningProcessReq, opts ...grpc.CallOption) (*GetAppRunningProcessRet, error)
	// Get the Activity and SurfaceView corresponding to each process id of the app, only for android.
	// 获取app每个进程id对应的Activity和SurfaceView,仅适用于android
	GetAppWindowsMap(ctx context.Context, in *GetAppWindowsMapReq, opts ...grpc.CallOption) (*GetAppWindowsMapRet, error)
	GetRunningSysProcess(ctx context.Context, in *Device, opts ...grpc.CallOption) (*GetRunningSysProcessRet, error)
	// Refresh app information, used to get the app list after the app modified the app under test (such as upgrading the version)
	// 刷新app的信息,用于获取完app列表后修改了被测app(例如升级了版本)的情况
	UpdateAppInfo(ctx context.Context, in *UpdateAppInfoReq, opts ...grpc.CallOption) (*UpdateAppInfoRet, error)
	// Interface on the web for creating task
	// web上的创建任务接口
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRsp, error)
	// Interface on the web for archiving cases to task
	// web上的把case归档到task的接口
	ArchiveCaseToTask(ctx context.Context, in *ArchiveCaseToTaskReq, opts ...grpc.CallOption) (*ArchiveCaseToTaskRsp, error)
	// Interface on the web for sharing case
	// web上的分享case接口
	ShareCase(ctx context.Context, in *ShareCaseReq, opts ...grpc.CallOption) (*ShareCaseRsp, error)
	// Set the running configuration
	// 设置运行配置
	SetPreferences(ctx context.Context, in *SetPreferencesReq, opts ...grpc.CallOption) (*SetPreferencesRsp, error)
	// Get the rendering resolution of the test app, supported only for Android
	// 获取测试App的渲染分辨率，仅支持Android
	GetRenderResolutionOfWindowUnderTest(ctx context.Context, in *GetRenderResolutionReq, opts ...grpc.CallOption) (*GetRenderResolutionRet, error)
	// Get CPU core count and maximum frequency
	// 获取CPU核心数和最大频率
	GetCpuInfo(ctx context.Context, in *GetCpuInfoReq, opts ...grpc.CallOption) (*GetCpuInfoRsp, error)
	// Set memory sampling frequency, only for android
	// 设置内存采样频率,仅用于android
	SetMemorySamplingFrequency(ctx context.Context, in *SetMemorySamplingFrequencyReq, opts ...grpc.CallOption) (*Empty, error)
	// Send the display content of the hover window, only for windows
	// 发送悬浮窗的显示内容，仅用于windows
	TransferFloatingWindowMessage(ctx context.Context, in *TransferFloatingWindowMessageReq, opts ...grpc.CallOption) (*Empty, error)
	// Get unreal memory report
	// 获取 unreal memory report
	GenerateUnrealMemoryReport(ctx context.Context, in *UnrealMemoryReportReq, opts ...grpc.CallOption) (*MemoryReportData, error)
	// Modify tag name of memory report
	// 修改 memory report 标签名
	UpdateMemoryReportInfo(ctx context.Context, in *UpdateMemoryReportReq, opts ...grpc.CallOption) (*Empty, error)
	// Close PerfDogService
	// 关闭PerfDogService
	KillServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Set the position and font color of the hover window for android and windows
	// 设置悬浮窗位置和字体颜色，用于android和windows
	SetFloatingWindowPreferences(ctx context.Context, in *SetFloatingWindowPreferencesReq, opts ...grpc.CallOption) (*Empty, error)
	// Pull default and user-created web templates
	// 拉取默认的和用户创建的网络模版
	GetPresetNetworkProfilingTemplate(ctx context.Context, in *GetPresetNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*GetPresetNetworkProfilingTemplateRsp, error)
	// Submit user's web template
	// 提交用户的网络模板
	SubmitUserNetworkProfilingTemplate(ctx context.Context, in *SubmitUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*SubmitUserNetworkProfilingTemplateRsp, error)
	// Update user's web template
	// 更新用户的网络模板
	UpdateUserNetworkProfilingTemplate(ctx context.Context, in *UpdateUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*Empty, error)
	// Delete user's web template
	// 删除用户的网络模板
	DeleteUserNetworkProfilingTemplate(ctx context.Context, in *DeleteUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*Empty, error)
	// Modify weak network simulation parameters during testing
	// 用于在测试过程中修改弱网模拟参数
	ChangeNetworkTemplate(ctx context.Context, in *ChangeNetworkTemplateReq, opts ...grpc.CallOption) (*ChangeNetworkTemplateRsp, error)
	// Add a remote host device
	// 添加远程控制的主机设备
	AddRemoteHostDevice(ctx context.Context, in *AddRemoteHostDeviceReq, opts ...grpc.CallOption) (*Empty, error)
	// Check whether the target is occupied by other users
	// 确认主机是否被其它用户占用
	CheckDeviceOccupiedByOtherUsers(ctx context.Context, in *CheckDeviceOccupiedByOtherUsersReq, opts ...grpc.CallOption) (*CheckDeviceOccupiedByOtherUsersRsp, error)
	SetPairedPasswordResponse(ctx context.Context, in *SetPairedPasswordReq, opts ...grpc.CallOption) (*Empty, error)
	// Launch as a remote collector
	// 以远端采集器方式启动
	LaunchAsRemoteCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LaunchAsRemoteCollectorRsp, error)
	// Refresh the remote computer list
	// 刷新远程电脑列表
	UpdateRemoteWindowsDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// enable test for dev apps,only for ios
	// 支持dev app测试，仅用于ios
	SetEnableDevAppTest(ctx context.Context, in *SetEnableDevAppTestReq, opts ...grpc.CallOption) (*Empty, error)
}

type perfDogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerfDogServiceClient(cc grpc.ClientConnInterface) PerfDogServiceClient {
	return &perfDogServiceClient{cc}
}

func (c *perfDogServiceClient) LoginWithToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/loginWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetDeviceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeviceListRsp, error) {
	out := new(DeviceListRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) StartDeviceMonitor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PerfDogService_StartDeviceMonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[0], "/com.perfdog.proto.PerfDogService/startDeviceMonitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceStartDeviceMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_StartDeviceMonitorClient interface {
	Recv() (*DeviceEvent, error)
	grpc.ClientStream
}

type perfDogServiceStartDeviceMonitorClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceStartDeviceMonitorClient) Recv() (*DeviceEvent, error) {
	m := new(DeviceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) ListenGlobalEvent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (PerfDogService_ListenGlobalEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[1], "/com.perfdog.proto.PerfDogService/listenGlobalEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceListenGlobalEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_ListenGlobalEventClient interface {
	Recv() (*GlobalEvent, error)
	grpc.ClientStream
}

type perfDogServiceListenGlobalEventClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceListenGlobalEventClient) Recv() (*GlobalEvent, error) {
	m := new(GlobalEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) CheckIos17AboveDriveUninstalled(ctx context.Context, in *Device, opts ...grpc.CallOption) (*OptionBool, error) {
	out := new(OptionBool)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/checkIos17AboveDriveUninstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) InitDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/initDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetDeviceInfo(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetDeviceStatus(ctx context.Context, in *Device, opts ...grpc.CallOption) (*DeviceStatus, error) {
	out := new(DeviceStatus)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetAppList(ctx context.Context, in *Device, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) EnablePerfDataType(ctx context.Context, in *EnablePerfDataTypeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/enablePerfDataType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) DisablePerfDataType(ctx context.Context, in *DisablePerfDataTypeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/disablePerfDataType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetPerfDataType(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PerfDataTypeRet, error) {
	out := new(PerfDataTypeRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getPerfDataType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetAvailableDataType(ctx context.Context, in *Device, opts ...grpc.CallOption) (*PerfDataTypeRet, error) {
	out := new(PerfDataTypeRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getAvailableDataType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetScreenShotInterval(ctx context.Context, in *ScreenShotInterval, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setScreenShotInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) StartTestAppInternal(ctx context.Context, in *StartTestAppReq, opts ...grpc.CallOption) (PerfDogService_StartTestAppInternalClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[2], "/com.perfdog.proto.PerfDogService/StartTestAppInternal", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceStartTestAppInternalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_StartTestAppInternalClient interface {
	Recv() (*PerfData, error)
	grpc.ClientStream
}

type perfDogServiceStartTestAppInternalClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceStartTestAppInternalClient) Recv() (*PerfData, error) {
	m := new(PerfData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) StartTestSysProcessInternal(ctx context.Context, in *StartTestSysProcessReq, opts ...grpc.CallOption) (PerfDogService_StartTestSysProcessInternalClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[3], "/com.perfdog.proto.PerfDogService/StartTestSysProcessInternal", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceStartTestSysProcessInternalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_StartTestSysProcessInternalClient interface {
	Recv() (*PerfData, error)
	grpc.ClientStream
}

type perfDogServiceStartTestSysProcessInternalClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceStartTestSysProcessInternalClient) Recv() (*PerfData, error) {
	m := new(PerfData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) StartTestApp(ctx context.Context, in *StartTestAppReq, opts ...grpc.CallOption) (*StartTestRet, error) {
	out := new(StartTestRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/startTestApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) StartTestSysProcess(ctx context.Context, in *StartTestSysProcessReq, opts ...grpc.CallOption) (*StartTestRet, error) {
	out := new(StartTestRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/startTestSysProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) OpenPerfDataStream(ctx context.Context, in *OpenPerfDataStreamReq, opts ...grpc.CallOption) (PerfDogService_OpenPerfDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[4], "/com.perfdog.proto.PerfDogService/openPerfDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceOpenPerfDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_OpenPerfDataStreamClient interface {
	Recv() (*PerfData, error)
	grpc.ClientStream
}

type perfDogServiceOpenPerfDataStreamClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceOpenPerfDataStreamClient) Recv() (*PerfData, error) {
	m := new(PerfData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) StopTest(ctx context.Context, in *StopTestReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/stopTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetLabel(ctx context.Context, in *SetLabelReq, opts ...grpc.CallOption) (*SetLabelRet, error) {
	out := new(SetLabelRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) UpdateLabel(ctx context.Context, in *UpdateLabelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/updateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) AddNote(ctx context.Context, in *AddNoteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/addNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) RemoveNote(ctx context.Context, in *RemoveNoteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/removeNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetGlobalDataUploadServer(ctx context.Context, in *SetDataUploadServerReq, opts ...grpc.CallOption) (*SetDataUploadServerRsp, error) {
	out := new(SetDataUploadServerRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setGlobalDataUploadServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SaveData(ctx context.Context, in *SaveDataReq, opts ...grpc.CallOption) (*SaveDataRsp, error) {
	out := new(SaveDataRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/saveData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetDeviceCacheData(ctx context.Context, in *GetDeviceCacheDataReq, opts ...grpc.CallOption) (PerfDogService_GetDeviceCacheDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[5], "/com.perfdog.proto.PerfDogService/getDeviceCacheData", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceGetDeviceCacheDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_GetDeviceCacheDataClient interface {
	Recv() (*CachePerfData, error)
	grpc.ClientStream
}

type perfDogServiceGetDeviceCacheDataClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceGetDeviceCacheDataClient) Recv() (*CachePerfData, error) {
	m := new(CachePerfData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) GetDeviceCacheDataPacked(ctx context.Context, in *GetDeviceCacheDataPackedReq, opts ...grpc.CallOption) (PerfDogService_GetDeviceCacheDataPackedClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfDogService_ServiceDesc.Streams[6], "/com.perfdog.proto.PerfDogService/getDeviceCacheDataPacked", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfDogServiceGetDeviceCacheDataPackedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PerfDogService_GetDeviceCacheDataPackedClient interface {
	Recv() (*CachePerfDataPacked, error)
	grpc.ClientStream
}

type perfDogServiceGetDeviceCacheDataPackedClient struct {
	grpc.ClientStream
}

func (x *perfDogServiceGetDeviceCacheDataPackedClient) Recv() (*CachePerfDataPacked, error) {
	m := new(CachePerfDataPacked)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *perfDogServiceClient) GetAppRunningProcess(ctx context.Context, in *GetAppRunningProcessReq, opts ...grpc.CallOption) (*GetAppRunningProcessRet, error) {
	out := new(GetAppRunningProcessRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getAppRunningProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetAppWindowsMap(ctx context.Context, in *GetAppWindowsMapReq, opts ...grpc.CallOption) (*GetAppWindowsMapRet, error) {
	out := new(GetAppWindowsMapRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getAppWindowsMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetRunningSysProcess(ctx context.Context, in *Device, opts ...grpc.CallOption) (*GetRunningSysProcessRet, error) {
	out := new(GetRunningSysProcessRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getRunningSysProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) UpdateAppInfo(ctx context.Context, in *UpdateAppInfoReq, opts ...grpc.CallOption) (*UpdateAppInfoRet, error) {
	out := new(UpdateAppInfoRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/updateAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRsp, error) {
	out := new(CreateTaskRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/createTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) ArchiveCaseToTask(ctx context.Context, in *ArchiveCaseToTaskReq, opts ...grpc.CallOption) (*ArchiveCaseToTaskRsp, error) {
	out := new(ArchiveCaseToTaskRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/archiveCaseToTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) ShareCase(ctx context.Context, in *ShareCaseReq, opts ...grpc.CallOption) (*ShareCaseRsp, error) {
	out := new(ShareCaseRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/shareCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetPreferences(ctx context.Context, in *SetPreferencesReq, opts ...grpc.CallOption) (*SetPreferencesRsp, error) {
	out := new(SetPreferencesRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetRenderResolutionOfWindowUnderTest(ctx context.Context, in *GetRenderResolutionReq, opts ...grpc.CallOption) (*GetRenderResolutionRet, error) {
	out := new(GetRenderResolutionRet)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getRenderResolutionOfWindowUnderTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetCpuInfo(ctx context.Context, in *GetCpuInfoReq, opts ...grpc.CallOption) (*GetCpuInfoRsp, error) {
	out := new(GetCpuInfoRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getCpuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetMemorySamplingFrequency(ctx context.Context, in *SetMemorySamplingFrequencyReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setMemorySamplingFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) TransferFloatingWindowMessage(ctx context.Context, in *TransferFloatingWindowMessageReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/transferFloatingWindowMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GenerateUnrealMemoryReport(ctx context.Context, in *UnrealMemoryReportReq, opts ...grpc.CallOption) (*MemoryReportData, error) {
	out := new(MemoryReportData)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/generateUnrealMemoryReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) UpdateMemoryReportInfo(ctx context.Context, in *UpdateMemoryReportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/updateMemoryReportInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) KillServer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/killServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetFloatingWindowPreferences(ctx context.Context, in *SetFloatingWindowPreferencesReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setFloatingWindowPreferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) GetPresetNetworkProfilingTemplate(ctx context.Context, in *GetPresetNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*GetPresetNetworkProfilingTemplateRsp, error) {
	out := new(GetPresetNetworkProfilingTemplateRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/getPresetNetworkProfilingTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SubmitUserNetworkProfilingTemplate(ctx context.Context, in *SubmitUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*SubmitUserNetworkProfilingTemplateRsp, error) {
	out := new(SubmitUserNetworkProfilingTemplateRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/submitUserNetworkProfilingTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) UpdateUserNetworkProfilingTemplate(ctx context.Context, in *UpdateUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/updateUserNetworkProfilingTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) DeleteUserNetworkProfilingTemplate(ctx context.Context, in *DeleteUserNetworkProfilingTemplateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/deleteUserNetworkProfilingTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) ChangeNetworkTemplate(ctx context.Context, in *ChangeNetworkTemplateReq, opts ...grpc.CallOption) (*ChangeNetworkTemplateRsp, error) {
	out := new(ChangeNetworkTemplateRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/changeNetworkTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) AddRemoteHostDevice(ctx context.Context, in *AddRemoteHostDeviceReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/addRemoteHostDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) CheckDeviceOccupiedByOtherUsers(ctx context.Context, in *CheckDeviceOccupiedByOtherUsersReq, opts ...grpc.CallOption) (*CheckDeviceOccupiedByOtherUsersRsp, error) {
	out := new(CheckDeviceOccupiedByOtherUsersRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/checkDeviceOccupiedByOtherUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetPairedPasswordResponse(ctx context.Context, in *SetPairedPasswordReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setPairedPasswordResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) LaunchAsRemoteCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*LaunchAsRemoteCollectorRsp, error) {
	out := new(LaunchAsRemoteCollectorRsp)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/launchAsRemoteCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) UpdateRemoteWindowsDevice(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/updateRemoteWindowsDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *perfDogServiceClient) SetEnableDevAppTest(ctx context.Context, in *SetEnableDevAppTestReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/com.perfdog.proto.PerfDogService/setEnableDevAppTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerfDogServiceServer is the server API for PerfDogService service.
// All implementations must embed UnimplementedPerfDogServiceServer
// for forward compatibility
type PerfDogServiceServer interface {
	// Log in with the requested token
	// 通过申请的token登录
	LoginWithToken(context.Context, *Token) (*UserInfo, error)
	// Get a list of online devices
	// 获取在线设备列表
	GetDeviceList(context.Context, *Empty) (*DeviceListRsp, error)
	// Start a device monitor
	// 启动设备监听器
	StartDeviceMonitor(*Empty, PerfDogService_StartDeviceMonitorServer) error
	ListenGlobalEvent(*Empty, PerfDogService_ListenGlobalEventServer) error
	// Returns true if the device is ios17 or above and no driver is installed, otherwise returns false
	// 设备为ios17以上且未安装驱动返回true，否则返回false
	CheckIos17AboveDriveUninstalled(context.Context, *Device) (*OptionBool, error)
	// Initialize the device
	// 初始化设备
	InitDevice(context.Context, *Device) (*Empty, error)
	// Get device information
	// 获取设备信息
	GetDeviceInfo(context.Context, *Device) (*DeviceInfo, error)
	// Get device status
	// 获取设备状态
	GetDeviceStatus(context.Context, *Device) (*DeviceStatus, error)
	// Get a list of device applications
	// 获取设备APP列表
	GetAppList(context.Context, *Device) (*AppList, error)
	// Enable data type
	// 开启数据类型
	EnablePerfDataType(context.Context, *EnablePerfDataTypeReq) (*Empty, error)
	// Disable data type
	// 关闭数据类型
	DisablePerfDataType(context.Context, *DisablePerfDataTypeReq) (*Empty, error)
	// Get a list of enabled data types
	// 获取已开启数据类型的列表
	GetPerfDataType(context.Context, *Device) (*PerfDataTypeRet, error)
	// Get a list of available data types
	// 获取设备可以开启的数据项
	GetAvailableDataType(context.Context, *Device) (*PerfDataTypeRet, error)
	// Set the screenshot interval
	// 设置截屏时间间隔
	SetScreenShotInterval(context.Context, *ScreenShotInterval) (*Empty, error)
	// Compatible with older versions, not recommended
	// 兼容旧版本，不建议使用
	StartTestAppInternal(*StartTestAppReq, PerfDogService_StartTestAppInternalServer) error
	// Compatible with older versions, not recommended
	// 兼容旧版本，不建议使用
	StartTestSysProcessInternal(*StartTestSysProcessReq, PerfDogService_StartTestSysProcessInternalServer) error
	// Start test
	// The data types enabled by Android by default are FPS, CPU_USAGE, MEMORY, CPU_TEMPERATURE, NETWORK_USAGE, FRAME_TIME, and BATTERY (wifi mode)
	// The data types enabled by iOS by default are FPS, CPU_USAGE, MEMORY, IOS_GPU_USAGE, NETWORK_USAGE, CTX_SWITCH, FRAME_TIME (usb mode) and BATTERY (wifi mode)
	// If you need to enable other data types or disable them, use the enablePerfDataType and disablePerfDataType interfaces
	// 开始测试
	// Android默认开启的数据类型有FPS、CPU_USAGE、MEMORY、CPU_TEMPERATURE、NETWORK_USAGE、FRAME_TIME和BATTERY(wifi模式)
	// iOS默认开启的数据类型有FPS、CPU_USAGE、MEMORY、IOS_GPU_USAGE、NETWORK_USAGE、CTX_SWITCH、FRAME_TIME(usb模式)和BATTERY(wifi模式)
	// 如果需要开启或者关闭其他数据类型，请使用enablePerfDataType和disablePerfDataType接口
	StartTestApp(context.Context, *StartTestAppReq) (*StartTestRet, error)
	StartTestSysProcess(context.Context, *StartTestSysProcessReq) (*StartTestRet, error)
	// Get real-time test data streams from devices
	// 获取设备实时的测试数据流
	OpenPerfDataStream(*OpenPerfDataStreamReq, PerfDogService_OpenPerfDataStreamServer) error
	// Stop test
	// 结束测试
	StopTest(context.Context, *StopTestReq) (*Empty, error)
	// set Label
	// 设置Label
	SetLabel(context.Context, *SetLabelReq) (*SetLabelRet, error)
	// Modify the name of the label
	// 修改label的名字
	UpdateLabel(context.Context, *UpdateLabelReq) (*Empty, error)
	// add note
	// 添加批注
	AddNote(context.Context, *AddNoteReq) (*Empty, error)
	// delete note
	// 删除批注
	RemoveNote(context.Context, *RemoveNoteReq) (*Empty, error)
	// Set the global data upload server, if you don't set it, it will be uploaded to PerfDog cloud platform by default.
	// 设置全局的数据上传服务器,不设置的情况下默认上传到PerfDog云平台
	SetGlobalDataUploadServer(context.Context, *SetDataUploadServerReq) (*SetDataUploadServerRsp, error)
	// Upload data (default upload to PerfDog cloud platform, can be modified through the setGlobalDataUploadServer interface), while saving to a local Excel file.
	// 上传数据(默认上传到PerfDog云平台,可通过setGlobalDataUploadServer接口修改),同时保存到本地Excel文件
	SaveData(context.Context, *SaveDataReq) (*SaveDataRsp, error)
	// Get the device's cached data, and return the data by item.
	// 获取设备的缓存数据,数据按条返回
	GetDeviceCacheData(*GetDeviceCacheDataReq, PerfDogService_GetDeviceCacheDataServer) error
	// Get the cache data of the device, pack the data into json or protobuf and return it at once.
	// 获取设备的缓存数据,数据打包成json或protobuf一次返回
	GetDeviceCacheDataPacked(*GetDeviceCacheDataPackedReq, PerfDogService_GetDeviceCacheDataPackedServer) error
	// Get a list of processes running on the device for this app
	// 获取设备上app正在运行的进程列表
	GetAppRunningProcess(context.Context, *GetAppRunningProcessReq) (*GetAppRunningProcessRet, error)
	// Get the Activity and SurfaceView corresponding to each process id of the app, only for android.
	// 获取app每个进程id对应的Activity和SurfaceView,仅适用于android
	GetAppWindowsMap(context.Context, *GetAppWindowsMapReq) (*GetAppWindowsMapRet, error)
	GetRunningSysProcess(context.Context, *Device) (*GetRunningSysProcessRet, error)
	// Refresh app information, used to get the app list after the app modified the app under test (such as upgrading the version)
	// 刷新app的信息,用于获取完app列表后修改了被测app(例如升级了版本)的情况
	UpdateAppInfo(context.Context, *UpdateAppInfoReq) (*UpdateAppInfoRet, error)
	// Interface on the web for creating task
	// web上的创建任务接口
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRsp, error)
	// Interface on the web for archiving cases to task
	// web上的把case归档到task的接口
	ArchiveCaseToTask(context.Context, *ArchiveCaseToTaskReq) (*ArchiveCaseToTaskRsp, error)
	// Interface on the web for sharing case
	// web上的分享case接口
	ShareCase(context.Context, *ShareCaseReq) (*ShareCaseRsp, error)
	// Set the running configuration
	// 设置运行配置
	SetPreferences(context.Context, *SetPreferencesReq) (*SetPreferencesRsp, error)
	// Get the rendering resolution of the test app, supported only for Android
	// 获取测试App的渲染分辨率，仅支持Android
	GetRenderResolutionOfWindowUnderTest(context.Context, *GetRenderResolutionReq) (*GetRenderResolutionRet, error)
	// Get CPU core count and maximum frequency
	// 获取CPU核心数和最大频率
	GetCpuInfo(context.Context, *GetCpuInfoReq) (*GetCpuInfoRsp, error)
	// Set memory sampling frequency, only for android
	// 设置内存采样频率,仅用于android
	SetMemorySamplingFrequency(context.Context, *SetMemorySamplingFrequencyReq) (*Empty, error)
	// Send the display content of the hover window, only for windows
	// 发送悬浮窗的显示内容，仅用于windows
	TransferFloatingWindowMessage(context.Context, *TransferFloatingWindowMessageReq) (*Empty, error)
	// Get unreal memory report
	// 获取 unreal memory report
	GenerateUnrealMemoryReport(context.Context, *UnrealMemoryReportReq) (*MemoryReportData, error)
	// Modify tag name of memory report
	// 修改 memory report 标签名
	UpdateMemoryReportInfo(context.Context, *UpdateMemoryReportReq) (*Empty, error)
	// Close PerfDogService
	// 关闭PerfDogService
	KillServer(context.Context, *Empty) (*Empty, error)
	// Set the position and font color of the hover window for android and windows
	// 设置悬浮窗位置和字体颜色，用于android和windows
	SetFloatingWindowPreferences(context.Context, *SetFloatingWindowPreferencesReq) (*Empty, error)
	// Pull default and user-created web templates
	// 拉取默认的和用户创建的网络模版
	GetPresetNetworkProfilingTemplate(context.Context, *GetPresetNetworkProfilingTemplateReq) (*GetPresetNetworkProfilingTemplateRsp, error)
	// Submit user's web template
	// 提交用户的网络模板
	SubmitUserNetworkProfilingTemplate(context.Context, *SubmitUserNetworkProfilingTemplateReq) (*SubmitUserNetworkProfilingTemplateRsp, error)
	// Update user's web template
	// 更新用户的网络模板
	UpdateUserNetworkProfilingTemplate(context.Context, *UpdateUserNetworkProfilingTemplateReq) (*Empty, error)
	// Delete user's web template
	// 删除用户的网络模板
	DeleteUserNetworkProfilingTemplate(context.Context, *DeleteUserNetworkProfilingTemplateReq) (*Empty, error)
	// Modify weak network simulation parameters during testing
	// 用于在测试过程中修改弱网模拟参数
	ChangeNetworkTemplate(context.Context, *ChangeNetworkTemplateReq) (*ChangeNetworkTemplateRsp, error)
	// Add a remote host device
	// 添加远程控制的主机设备
	AddRemoteHostDevice(context.Context, *AddRemoteHostDeviceReq) (*Empty, error)
	// Check whether the target is occupied by other users
	// 确认主机是否被其它用户占用
	CheckDeviceOccupiedByOtherUsers(context.Context, *CheckDeviceOccupiedByOtherUsersReq) (*CheckDeviceOccupiedByOtherUsersRsp, error)
	SetPairedPasswordResponse(context.Context, *SetPairedPasswordReq) (*Empty, error)
	// Launch as a remote collector
	// 以远端采集器方式启动
	LaunchAsRemoteCollector(context.Context, *Empty) (*LaunchAsRemoteCollectorRsp, error)
	// Refresh the remote computer list
	// 刷新远程电脑列表
	UpdateRemoteWindowsDevice(context.Context, *Empty) (*Empty, error)
	// enable test for dev apps,only for ios
	// 支持dev app测试，仅用于ios
	SetEnableDevAppTest(context.Context, *SetEnableDevAppTestReq) (*Empty, error)
	mustEmbedUnimplementedPerfDogServiceServer()
}

// UnimplementedPerfDogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerfDogServiceServer struct {
}

func (UnimplementedPerfDogServiceServer) LoginWithToken(context.Context, *Token) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithToken not implemented")
}
func (UnimplementedPerfDogServiceServer) GetDeviceList(context.Context, *Empty) (*DeviceListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (UnimplementedPerfDogServiceServer) StartDeviceMonitor(*Empty, PerfDogService_StartDeviceMonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method StartDeviceMonitor not implemented")
}
func (UnimplementedPerfDogServiceServer) ListenGlobalEvent(*Empty, PerfDogService_ListenGlobalEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenGlobalEvent not implemented")
}
func (UnimplementedPerfDogServiceServer) CheckIos17AboveDriveUninstalled(context.Context, *Device) (*OptionBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIos17AboveDriveUninstalled not implemented")
}
func (UnimplementedPerfDogServiceServer) InitDevice(context.Context, *Device) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDevice not implemented")
}
func (UnimplementedPerfDogServiceServer) GetDeviceInfo(context.Context, *Device) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedPerfDogServiceServer) GetDeviceStatus(context.Context, *Device) (*DeviceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedPerfDogServiceServer) GetAppList(context.Context, *Device) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppList not implemented")
}
func (UnimplementedPerfDogServiceServer) EnablePerfDataType(context.Context, *EnablePerfDataTypeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePerfDataType not implemented")
}
func (UnimplementedPerfDogServiceServer) DisablePerfDataType(context.Context, *DisablePerfDataTypeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePerfDataType not implemented")
}
func (UnimplementedPerfDogServiceServer) GetPerfDataType(context.Context, *Device) (*PerfDataTypeRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerfDataType not implemented")
}
func (UnimplementedPerfDogServiceServer) GetAvailableDataType(context.Context, *Device) (*PerfDataTypeRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDataType not implemented")
}
func (UnimplementedPerfDogServiceServer) SetScreenShotInterval(context.Context, *ScreenShotInterval) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetScreenShotInterval not implemented")
}
func (UnimplementedPerfDogServiceServer) StartTestAppInternal(*StartTestAppReq, PerfDogService_StartTestAppInternalServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTestAppInternal not implemented")
}
func (UnimplementedPerfDogServiceServer) StartTestSysProcessInternal(*StartTestSysProcessReq, PerfDogService_StartTestSysProcessInternalServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTestSysProcessInternal not implemented")
}
func (UnimplementedPerfDogServiceServer) StartTestApp(context.Context, *StartTestAppReq) (*StartTestRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestApp not implemented")
}
func (UnimplementedPerfDogServiceServer) StartTestSysProcess(context.Context, *StartTestSysProcessReq) (*StartTestRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTestSysProcess not implemented")
}
func (UnimplementedPerfDogServiceServer) OpenPerfDataStream(*OpenPerfDataStreamReq, PerfDogService_OpenPerfDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenPerfDataStream not implemented")
}
func (UnimplementedPerfDogServiceServer) StopTest(context.Context, *StopTestReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopTest not implemented")
}
func (UnimplementedPerfDogServiceServer) SetLabel(context.Context, *SetLabelReq) (*SetLabelRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLabel not implemented")
}
func (UnimplementedPerfDogServiceServer) UpdateLabel(context.Context, *UpdateLabelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}
func (UnimplementedPerfDogServiceServer) AddNote(context.Context, *AddNoteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedPerfDogServiceServer) RemoveNote(context.Context, *RemoveNoteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNote not implemented")
}
func (UnimplementedPerfDogServiceServer) SetGlobalDataUploadServer(context.Context, *SetDataUploadServerReq) (*SetDataUploadServerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGlobalDataUploadServer not implemented")
}
func (UnimplementedPerfDogServiceServer) SaveData(context.Context, *SaveDataReq) (*SaveDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedPerfDogServiceServer) GetDeviceCacheData(*GetDeviceCacheDataReq, PerfDogService_GetDeviceCacheDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceCacheData not implemented")
}
func (UnimplementedPerfDogServiceServer) GetDeviceCacheDataPacked(*GetDeviceCacheDataPackedReq, PerfDogService_GetDeviceCacheDataPackedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceCacheDataPacked not implemented")
}
func (UnimplementedPerfDogServiceServer) GetAppRunningProcess(context.Context, *GetAppRunningProcessReq) (*GetAppRunningProcessRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRunningProcess not implemented")
}
func (UnimplementedPerfDogServiceServer) GetAppWindowsMap(context.Context, *GetAppWindowsMapReq) (*GetAppWindowsMapRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppWindowsMap not implemented")
}
func (UnimplementedPerfDogServiceServer) GetRunningSysProcess(context.Context, *Device) (*GetRunningSysProcessRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningSysProcess not implemented")
}
func (UnimplementedPerfDogServiceServer) UpdateAppInfo(context.Context, *UpdateAppInfoReq) (*UpdateAppInfoRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppInfo not implemented")
}
func (UnimplementedPerfDogServiceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedPerfDogServiceServer) ArchiveCaseToTask(context.Context, *ArchiveCaseToTaskReq) (*ArchiveCaseToTaskRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveCaseToTask not implemented")
}
func (UnimplementedPerfDogServiceServer) ShareCase(context.Context, *ShareCaseReq) (*ShareCaseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareCase not implemented")
}
func (UnimplementedPerfDogServiceServer) SetPreferences(context.Context, *SetPreferencesReq) (*SetPreferencesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreferences not implemented")
}
func (UnimplementedPerfDogServiceServer) GetRenderResolutionOfWindowUnderTest(context.Context, *GetRenderResolutionReq) (*GetRenderResolutionRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenderResolutionOfWindowUnderTest not implemented")
}
func (UnimplementedPerfDogServiceServer) GetCpuInfo(context.Context, *GetCpuInfoReq) (*GetCpuInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpuInfo not implemented")
}
func (UnimplementedPerfDogServiceServer) SetMemorySamplingFrequency(context.Context, *SetMemorySamplingFrequencyReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMemorySamplingFrequency not implemented")
}
func (UnimplementedPerfDogServiceServer) TransferFloatingWindowMessage(context.Context, *TransferFloatingWindowMessageReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFloatingWindowMessage not implemented")
}
func (UnimplementedPerfDogServiceServer) GenerateUnrealMemoryReport(context.Context, *UnrealMemoryReportReq) (*MemoryReportData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateUnrealMemoryReport not implemented")
}
func (UnimplementedPerfDogServiceServer) UpdateMemoryReportInfo(context.Context, *UpdateMemoryReportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemoryReportInfo not implemented")
}
func (UnimplementedPerfDogServiceServer) KillServer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillServer not implemented")
}
func (UnimplementedPerfDogServiceServer) SetFloatingWindowPreferences(context.Context, *SetFloatingWindowPreferencesReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFloatingWindowPreferences not implemented")
}
func (UnimplementedPerfDogServiceServer) GetPresetNetworkProfilingTemplate(context.Context, *GetPresetNetworkProfilingTemplateReq) (*GetPresetNetworkProfilingTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresetNetworkProfilingTemplate not implemented")
}
func (UnimplementedPerfDogServiceServer) SubmitUserNetworkProfilingTemplate(context.Context, *SubmitUserNetworkProfilingTemplateReq) (*SubmitUserNetworkProfilingTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserNetworkProfilingTemplate not implemented")
}
func (UnimplementedPerfDogServiceServer) UpdateUserNetworkProfilingTemplate(context.Context, *UpdateUserNetworkProfilingTemplateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNetworkProfilingTemplate not implemented")
}
func (UnimplementedPerfDogServiceServer) DeleteUserNetworkProfilingTemplate(context.Context, *DeleteUserNetworkProfilingTemplateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNetworkProfilingTemplate not implemented")
}
func (UnimplementedPerfDogServiceServer) ChangeNetworkTemplate(context.Context, *ChangeNetworkTemplateReq) (*ChangeNetworkTemplateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNetworkTemplate not implemented")
}
func (UnimplementedPerfDogServiceServer) AddRemoteHostDevice(context.Context, *AddRemoteHostDeviceReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteHostDevice not implemented")
}
func (UnimplementedPerfDogServiceServer) CheckDeviceOccupiedByOtherUsers(context.Context, *CheckDeviceOccupiedByOtherUsersReq) (*CheckDeviceOccupiedByOtherUsersRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceOccupiedByOtherUsers not implemented")
}
func (UnimplementedPerfDogServiceServer) SetPairedPasswordResponse(context.Context, *SetPairedPasswordReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPairedPasswordResponse not implemented")
}
func (UnimplementedPerfDogServiceServer) LaunchAsRemoteCollector(context.Context, *Empty) (*LaunchAsRemoteCollectorRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchAsRemoteCollector not implemented")
}
func (UnimplementedPerfDogServiceServer) UpdateRemoteWindowsDevice(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRemoteWindowsDevice not implemented")
}
func (UnimplementedPerfDogServiceServer) SetEnableDevAppTest(context.Context, *SetEnableDevAppTestReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnableDevAppTest not implemented")
}
func (UnimplementedPerfDogServiceServer) mustEmbedUnimplementedPerfDogServiceServer() {}

// UnsafePerfDogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerfDogServiceServer will
// result in compilation errors.
type UnsafePerfDogServiceServer interface {
	mustEmbedUnimplementedPerfDogServiceServer()
}

func RegisterPerfDogServiceServer(s grpc.ServiceRegistrar, srv PerfDogServiceServer) {
	s.RegisterService(&PerfDogService_ServiceDesc, srv)
}

func _PerfDogService_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/loginWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).LoginWithToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetDeviceList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_StartDeviceMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).StartDeviceMonitor(m, &perfDogServiceStartDeviceMonitorServer{stream})
}

type PerfDogService_StartDeviceMonitorServer interface {
	Send(*DeviceEvent) error
	grpc.ServerStream
}

type perfDogServiceStartDeviceMonitorServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceStartDeviceMonitorServer) Send(m *DeviceEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_ListenGlobalEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).ListenGlobalEvent(m, &perfDogServiceListenGlobalEventServer{stream})
}

type PerfDogService_ListenGlobalEventServer interface {
	Send(*GlobalEvent) error
	grpc.ServerStream
}

type perfDogServiceListenGlobalEventServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceListenGlobalEventServer) Send(m *GlobalEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_CheckIos17AboveDriveUninstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).CheckIos17AboveDriveUninstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/checkIos17AboveDriveUninstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).CheckIos17AboveDriveUninstalled(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_InitDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).InitDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/initDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).InitDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetDeviceInfo(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetDeviceStatus(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetAppList(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_EnablePerfDataType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePerfDataTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).EnablePerfDataType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/enablePerfDataType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).EnablePerfDataType(ctx, req.(*EnablePerfDataTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_DisablePerfDataType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePerfDataTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).DisablePerfDataType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/disablePerfDataType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).DisablePerfDataType(ctx, req.(*DisablePerfDataTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetPerfDataType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetPerfDataType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getPerfDataType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetPerfDataType(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetAvailableDataType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetAvailableDataType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getAvailableDataType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetAvailableDataType(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetScreenShotInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScreenShotInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetScreenShotInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setScreenShotInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetScreenShotInterval(ctx, req.(*ScreenShotInterval))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_StartTestAppInternal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartTestAppReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).StartTestAppInternal(m, &perfDogServiceStartTestAppInternalServer{stream})
}

type PerfDogService_StartTestAppInternalServer interface {
	Send(*PerfData) error
	grpc.ServerStream
}

type perfDogServiceStartTestAppInternalServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceStartTestAppInternalServer) Send(m *PerfData) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_StartTestSysProcessInternal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartTestSysProcessReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).StartTestSysProcessInternal(m, &perfDogServiceStartTestSysProcessInternalServer{stream})
}

type PerfDogService_StartTestSysProcessInternalServer interface {
	Send(*PerfData) error
	grpc.ServerStream
}

type perfDogServiceStartTestSysProcessInternalServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceStartTestSysProcessInternalServer) Send(m *PerfData) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_StartTestApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).StartTestApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/startTestApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).StartTestApp(ctx, req.(*StartTestAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_StartTestSysProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestSysProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).StartTestSysProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/startTestSysProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).StartTestSysProcess(ctx, req.(*StartTestSysProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_OpenPerfDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OpenPerfDataStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).OpenPerfDataStream(m, &perfDogServiceOpenPerfDataStreamServer{stream})
}

type PerfDogService_OpenPerfDataStreamServer interface {
	Send(*PerfData) error
	grpc.ServerStream
}

type perfDogServiceOpenPerfDataStreamServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceOpenPerfDataStreamServer) Send(m *PerfData) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_StopTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).StopTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/stopTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).StopTest(ctx, req.(*StopTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetLabel(ctx, req.(*SetLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/updateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).UpdateLabel(ctx, req.(*UpdateLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/addNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).AddNote(ctx, req.(*AddNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_RemoveNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).RemoveNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/removeNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).RemoveNote(ctx, req.(*RemoveNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetGlobalDataUploadServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDataUploadServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetGlobalDataUploadServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setGlobalDataUploadServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetGlobalDataUploadServer(ctx, req.(*SetDataUploadServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SaveData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SaveData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/saveData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SaveData(ctx, req.(*SaveDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetDeviceCacheData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceCacheDataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).GetDeviceCacheData(m, &perfDogServiceGetDeviceCacheDataServer{stream})
}

type PerfDogService_GetDeviceCacheDataServer interface {
	Send(*CachePerfData) error
	grpc.ServerStream
}

type perfDogServiceGetDeviceCacheDataServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceGetDeviceCacheDataServer) Send(m *CachePerfData) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_GetDeviceCacheDataPacked_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeviceCacheDataPackedReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerfDogServiceServer).GetDeviceCacheDataPacked(m, &perfDogServiceGetDeviceCacheDataPackedServer{stream})
}

type PerfDogService_GetDeviceCacheDataPackedServer interface {
	Send(*CachePerfDataPacked) error
	grpc.ServerStream
}

type perfDogServiceGetDeviceCacheDataPackedServer struct {
	grpc.ServerStream
}

func (x *perfDogServiceGetDeviceCacheDataPackedServer) Send(m *CachePerfDataPacked) error {
	return x.ServerStream.SendMsg(m)
}

func _PerfDogService_GetAppRunningProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRunningProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetAppRunningProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getAppRunningProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetAppRunningProcess(ctx, req.(*GetAppRunningProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetAppWindowsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppWindowsMapReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetAppWindowsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getAppWindowsMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetAppWindowsMap(ctx, req.(*GetAppWindowsMapReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetRunningSysProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetRunningSysProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getRunningSysProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetRunningSysProcess(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_UpdateAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).UpdateAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/updateAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).UpdateAppInfo(ctx, req.(*UpdateAppInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/createTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_ArchiveCaseToTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveCaseToTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).ArchiveCaseToTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/archiveCaseToTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).ArchiveCaseToTask(ctx, req.(*ArchiveCaseToTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_ShareCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).ShareCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/shareCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).ShareCase(ctx, req.(*ShareCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetPreferences(ctx, req.(*SetPreferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetRenderResolutionOfWindowUnderTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenderResolutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetRenderResolutionOfWindowUnderTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getRenderResolutionOfWindowUnderTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetRenderResolutionOfWindowUnderTest(ctx, req.(*GetRenderResolutionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetCpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCpuInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetCpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getCpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetCpuInfo(ctx, req.(*GetCpuInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetMemorySamplingFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemorySamplingFrequencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetMemorySamplingFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setMemorySamplingFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetMemorySamplingFrequency(ctx, req.(*SetMemorySamplingFrequencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_TransferFloatingWindowMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFloatingWindowMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).TransferFloatingWindowMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/transferFloatingWindowMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).TransferFloatingWindowMessage(ctx, req.(*TransferFloatingWindowMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GenerateUnrealMemoryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnrealMemoryReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GenerateUnrealMemoryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/generateUnrealMemoryReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GenerateUnrealMemoryReport(ctx, req.(*UnrealMemoryReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_UpdateMemoryReportInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemoryReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).UpdateMemoryReportInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/updateMemoryReportInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).UpdateMemoryReportInfo(ctx, req.(*UpdateMemoryReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_KillServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).KillServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/killServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).KillServer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetFloatingWindowPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFloatingWindowPreferencesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetFloatingWindowPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setFloatingWindowPreferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetFloatingWindowPreferences(ctx, req.(*SetFloatingWindowPreferencesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_GetPresetNetworkProfilingTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresetNetworkProfilingTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).GetPresetNetworkProfilingTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/getPresetNetworkProfilingTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).GetPresetNetworkProfilingTemplate(ctx, req.(*GetPresetNetworkProfilingTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SubmitUserNetworkProfilingTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUserNetworkProfilingTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SubmitUserNetworkProfilingTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/submitUserNetworkProfilingTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SubmitUserNetworkProfilingTemplate(ctx, req.(*SubmitUserNetworkProfilingTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_UpdateUserNetworkProfilingTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNetworkProfilingTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).UpdateUserNetworkProfilingTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/updateUserNetworkProfilingTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).UpdateUserNetworkProfilingTemplate(ctx, req.(*UpdateUserNetworkProfilingTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_DeleteUserNetworkProfilingTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNetworkProfilingTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).DeleteUserNetworkProfilingTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/deleteUserNetworkProfilingTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).DeleteUserNetworkProfilingTemplate(ctx, req.(*DeleteUserNetworkProfilingTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_ChangeNetworkTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNetworkTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).ChangeNetworkTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/changeNetworkTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).ChangeNetworkTemplate(ctx, req.(*ChangeNetworkTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_AddRemoteHostDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteHostDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).AddRemoteHostDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/addRemoteHostDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).AddRemoteHostDevice(ctx, req.(*AddRemoteHostDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_CheckDeviceOccupiedByOtherUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceOccupiedByOtherUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).CheckDeviceOccupiedByOtherUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/checkDeviceOccupiedByOtherUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).CheckDeviceOccupiedByOtherUsers(ctx, req.(*CheckDeviceOccupiedByOtherUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetPairedPasswordResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPairedPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetPairedPasswordResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setPairedPasswordResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetPairedPasswordResponse(ctx, req.(*SetPairedPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_LaunchAsRemoteCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).LaunchAsRemoteCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/launchAsRemoteCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).LaunchAsRemoteCollector(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_UpdateRemoteWindowsDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).UpdateRemoteWindowsDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/updateRemoteWindowsDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).UpdateRemoteWindowsDevice(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerfDogService_SetEnableDevAppTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnableDevAppTestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).SetEnableDevAppTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.perfdog.proto.PerfDogService/setEnableDevAppTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).SetEnableDevAppTest(ctx, req.(*SetEnableDevAppTestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PerfDogService_ServiceDesc is the grpc.ServiceDesc for PerfDogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerfDogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.perfdog.proto.PerfDogService",
	HandlerType: (*PerfDogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginWithToken",
			Handler:    _PerfDogService_LoginWithToken_Handler,
		},
		{
			MethodName: "getDeviceList",
			Handler:    _PerfDogService_GetDeviceList_Handler,
		},
		{
			MethodName: "checkIos17AboveDriveUninstalled",
			Handler:    _PerfDogService_CheckIos17AboveDriveUninstalled_Handler,
		},
		{
			MethodName: "initDevice",
			Handler:    _PerfDogService_InitDevice_Handler,
		},
		{
			MethodName: "getDeviceInfo",
			Handler:    _PerfDogService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "getDeviceStatus",
			Handler:    _PerfDogService_GetDeviceStatus_Handler,
		},
		{
			MethodName: "getAppList",
			Handler:    _PerfDogService_GetAppList_Handler,
		},
		{
			MethodName: "enablePerfDataType",
			Handler:    _PerfDogService_EnablePerfDataType_Handler,
		},
		{
			MethodName: "disablePerfDataType",
			Handler:    _PerfDogService_DisablePerfDataType_Handler,
		},
		{
			MethodName: "getPerfDataType",
			Handler:    _PerfDogService_GetPerfDataType_Handler,
		},
		{
			MethodName: "getAvailableDataType",
			Handler:    _PerfDogService_GetAvailableDataType_Handler,
		},
		{
			MethodName: "setScreenShotInterval",
			Handler:    _PerfDogService_SetScreenShotInterval_Handler,
		},
		{
			MethodName: "startTestApp",
			Handler:    _PerfDogService_StartTestApp_Handler,
		},
		{
			MethodName: "startTestSysProcess",
			Handler:    _PerfDogService_StartTestSysProcess_Handler,
		},
		{
			MethodName: "stopTest",
			Handler:    _PerfDogService_StopTest_Handler,
		},
		{
			MethodName: "setLabel",
			Handler:    _PerfDogService_SetLabel_Handler,
		},
		{
			MethodName: "updateLabel",
			Handler:    _PerfDogService_UpdateLabel_Handler,
		},
		{
			MethodName: "addNote",
			Handler:    _PerfDogService_AddNote_Handler,
		},
		{
			MethodName: "removeNote",
			Handler:    _PerfDogService_RemoveNote_Handler,
		},
		{
			MethodName: "setGlobalDataUploadServer",
			Handler:    _PerfDogService_SetGlobalDataUploadServer_Handler,
		},
		{
			MethodName: "saveData",
			Handler:    _PerfDogService_SaveData_Handler,
		},
		{
			MethodName: "getAppRunningProcess",
			Handler:    _PerfDogService_GetAppRunningProcess_Handler,
		},
		{
			MethodName: "getAppWindowsMap",
			Handler:    _PerfDogService_GetAppWindowsMap_Handler,
		},
		{
			MethodName: "getRunningSysProcess",
			Handler:    _PerfDogService_GetRunningSysProcess_Handler,
		},
		{
			MethodName: "updateAppInfo",
			Handler:    _PerfDogService_UpdateAppInfo_Handler,
		},
		{
			MethodName: "createTask",
			Handler:    _PerfDogService_CreateTask_Handler,
		},
		{
			MethodName: "archiveCaseToTask",
			Handler:    _PerfDogService_ArchiveCaseToTask_Handler,
		},
		{
			MethodName: "shareCase",
			Handler:    _PerfDogService_ShareCase_Handler,
		},
		{
			MethodName: "setPreferences",
			Handler:    _PerfDogService_SetPreferences_Handler,
		},
		{
			MethodName: "getRenderResolutionOfWindowUnderTest",
			Handler:    _PerfDogService_GetRenderResolutionOfWindowUnderTest_Handler,
		},
		{
			MethodName: "getCpuInfo",
			Handler:    _PerfDogService_GetCpuInfo_Handler,
		},
		{
			MethodName: "setMemorySamplingFrequency",
			Handler:    _PerfDogService_SetMemorySamplingFrequency_Handler,
		},
		{
			MethodName: "transferFloatingWindowMessage",
			Handler:    _PerfDogService_TransferFloatingWindowMessage_Handler,
		},
		{
			MethodName: "generateUnrealMemoryReport",
			Handler:    _PerfDogService_GenerateUnrealMemoryReport_Handler,
		},
		{
			MethodName: "updateMemoryReportInfo",
			Handler:    _PerfDogService_UpdateMemoryReportInfo_Handler,
		},
		{
			MethodName: "killServer",
			Handler:    _PerfDogService_KillServer_Handler,
		},
		{
			MethodName: "setFloatingWindowPreferences",
			Handler:    _PerfDogService_SetFloatingWindowPreferences_Handler,
		},
		{
			MethodName: "getPresetNetworkProfilingTemplate",
			Handler:    _PerfDogService_GetPresetNetworkProfilingTemplate_Handler,
		},
		{
			MethodName: "submitUserNetworkProfilingTemplate",
			Handler:    _PerfDogService_SubmitUserNetworkProfilingTemplate_Handler,
		},
		{
			MethodName: "updateUserNetworkProfilingTemplate",
			Handler:    _PerfDogService_UpdateUserNetworkProfilingTemplate_Handler,
		},
		{
			MethodName: "deleteUserNetworkProfilingTemplate",
			Handler:    _PerfDogService_DeleteUserNetworkProfilingTemplate_Handler,
		},
		{
			MethodName: "changeNetworkTemplate",
			Handler:    _PerfDogService_ChangeNetworkTemplate_Handler,
		},
		{
			MethodName: "addRemoteHostDevice",
			Handler:    _PerfDogService_AddRemoteHostDevice_Handler,
		},
		{
			MethodName: "checkDeviceOccupiedByOtherUsers",
			Handler:    _PerfDogService_CheckDeviceOccupiedByOtherUsers_Handler,
		},
		{
			MethodName: "setPairedPasswordResponse",
			Handler:    _PerfDogService_SetPairedPasswordResponse_Handler,
		},
		{
			MethodName: "launchAsRemoteCollector",
			Handler:    _PerfDogService_LaunchAsRemoteCollector_Handler,
		},
		{
			MethodName: "updateRemoteWindowsDevice",
			Handler:    _PerfDogService_UpdateRemoteWindowsDevice_Handler,
		},
		{
			MethodName: "setEnableDevAppTest",
			Handler:    _PerfDogService_SetEnableDevAppTest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "startDeviceMonitor",
			Handler:       _PerfDogService_StartDeviceMonitor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "listenGlobalEvent",
			Handler:       _PerfDogService_ListenGlobalEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTestAppInternal",
			Handler:       _PerfDogService_StartTestAppInternal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTestSysProcessInternal",
			Handler:       _PerfDogService_StartTestSysProcessInternal_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "openPerfDataStream",
			Handler:       _PerfDogService_OpenPerfDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDeviceCacheData",
			Handler:       _PerfDogService_GetDeviceCacheData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "getDeviceCacheDataPacked",
			Handler:       _PerfDogService_GetDeviceCacheDataPacked_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "perfdog/perfdog/perfdog.proto",
}
