// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: perfdog/fakeperfdog/perfdog.proto

package fakeperfdog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerfDogServiceClient is the client API for PerfDogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerfDogServiceClient interface {
	// Log in with the requested token
	// 通过申请的token登录
	LoginWithToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error)
}

type perfDogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerfDogServiceClient(cc grpc.ClientConnInterface) PerfDogServiceClient {
	return &perfDogServiceClient{cc}
}

func (c *perfDogServiceClient) LoginWithToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/com.fake.perfdog.proto.PerfDogService/loginWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerfDogServiceServer is the server API for PerfDogService service.
// All implementations must embed UnimplementedPerfDogServiceServer
// for forward compatibility
type PerfDogServiceServer interface {
	// Log in with the requested token
	// 通过申请的token登录
	LoginWithToken(context.Context, *Token) (*UserInfo, error)
	mustEmbedUnimplementedPerfDogServiceServer()
}

// UnimplementedPerfDogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerfDogServiceServer struct {
}

func (UnimplementedPerfDogServiceServer) LoginWithToken(context.Context, *Token) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithToken not implemented")
}
func (UnimplementedPerfDogServiceServer) mustEmbedUnimplementedPerfDogServiceServer() {}

// UnsafePerfDogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerfDogServiceServer will
// result in compilation errors.
type UnsafePerfDogServiceServer interface {
	mustEmbedUnimplementedPerfDogServiceServer()
}

func RegisterPerfDogServiceServer(s grpc.ServiceRegistrar, srv PerfDogServiceServer) {
	s.RegisterService(&PerfDogService_ServiceDesc, srv)
}

func _PerfDogService_LoginWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerfDogServiceServer).LoginWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.fake.perfdog.proto.PerfDogService/loginWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerfDogServiceServer).LoginWithToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// PerfDogService_ServiceDesc is the grpc.ServiceDesc for PerfDogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerfDogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.fake.perfdog.proto.PerfDogService",
	HandlerType: (*PerfDogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginWithToken",
			Handler:    _PerfDogService_LoginWithToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perfdog/fakeperfdog/perfdog.proto",
}
